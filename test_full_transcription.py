#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Soniox API
"""

import os
import asyncio
from dotenv import load_dotenv
from voice_transcriber import VoiceTranscriber
from pydub import AudioSegment
import numpy as np

async def test_full_transcription():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('SONIOX_API_KEY')
    if not api_key:
        print("‚ùå SONIOX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä–∞
    transcriber = VoiceTranscriber()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not transcriber.is_available():
        print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API...")
    if not await transcriber.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Soniox API")
        return False
    
    print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Soniox API —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª (2 —Å–µ–∫—É–Ω–¥—ã —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–æ–Ω–æ–º)
    print("\nüéµ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª...")
    test_file_path = "test_audio_full.wav"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–Ω (440 Hz - –Ω–æ—Ç–∞ A)
        sample_rate = 16000
        duration = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã
        samples = int(sample_rate * duration)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        t = np.linspace(0, duration, samples, False)
        frequency = 440  # Hz
        audio_data = np.sin(2 * np.pi * frequency * t)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit PCM
        audio_data = (audio_data * 32767).astype(np.int16)
        
        # –°–æ–∑–¥–∞–µ–º AudioSegment
        audio = AudioSegment(
            audio_data.tobytes(), 
            frame_rate=sample_rate,
            sample_width=2,  # 16-bit
            channels=1  # –º–æ–Ω–æ
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV —Ñ–∞–π–ª
        audio.export(test_file_path, format="wav")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(test_file_path)} –±–∞–π—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        print("\nüé§ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        success, text, stats = await transcriber.transcribe_voice_message(test_file_path)
        
        if success:
            print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"üìù –¢–µ–∫—Å—Ç: {text}")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        else:
            print(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {text}")
            return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(test_file_path)
            print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except:
            pass
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    try:
        result = await test_full_transcription()
        
        print("\n" + "=" * 60)
        if result:
            print("üéâ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ Soniox API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
