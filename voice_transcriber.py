#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Soniox API
"""

import os
import json
import time
import asyncio
import tempfile
import traceback
from typing import Optional, Tuple
from datetime import datetime, timedelta

import requests
from pydub import AudioSegment
import logging

logger = logging.getLogger(__name__)

class VoiceTranscriber:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Soniox API"""
    
    def __init__(self):
        self.api_key = os.getenv('SONIOX_API_KEY')
        self.api_base = "https://api.soniox.com"
        
        if not self.api_key:
            logger.warning("SONIOX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.max_retries = 3
        self.base_delay = 2
        self.max_delay = 30
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.session = requests.Session()
        if self.api_key:
            self.session.headers["Authorization"] = f"Bearer {self.api_key}"
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.session.timeout = (10, 30)  # (connect_timeout, read_timeout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        adapter = requests.adapters.HTTPAdapter(
            max_retries=0,  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            pool_connections=10,
            pool_maxsize=10
        )
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
    
    async def transcribe_voice_message(self, file_path: str) -> Tuple[bool, str, dict]:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        logger.info(f"üé§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if not await self.test_connection_with_retries():
            logger.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Soniox API –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return False, "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {}
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                logger.error(f"‚ùå {error_msg}")
                return False, error_msg, {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            if file_size == 0:
                error_msg = "–§–∞–π–ª –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç)"
                logger.error(f"‚ùå {error_msg}")
                return False, error_msg, {}
            
            logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è API
            logger.info("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç")
            try:
                converted_path = await self._convert_audio_format(file_path)
                if not converted_path or not os.path.exists(converted_path):
                    error_msg = "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
                    logger.error(f"‚ùå {error_msg}")
                    return False, error_msg, {}
                logger.info(f"‚úÖ –ê—É–¥–∏–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_path}")
            except Exception as conv_error:
                error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(conv_error)}"
                logger.error(f"‚ùå {error_msg}")
                logger.error(f"Stack trace –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {traceback.format_exc()}")
                return False, error_msg, {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Soniox
            logger.info("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ Soniox API")
            file_id = await self._upload_file_with_retries(converted_path)
            if not file_id:
                error_msg = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ Soniox API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                logger.error(f"‚ùå {error_msg}")
                return False, error_msg, {}
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Soniox, file_id: {file_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            transcription_id = await self._start_transcription_with_retries(file_id)
            if not transcription_id:
                error_msg = "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                logger.error(f"‚ùå {error_msg}")
                return False, error_msg, {}
            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, transcription_id: {transcription_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            logger.info("‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            success = await self._wait_for_completion(transcription_id)
            if not success:
                error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                logger.error(f"‚ùå {error_msg}")
                return False, error_msg, {}
            logger.info("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("üì• –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            text, stats = await self._get_transcript_with_retries(transcription_id)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            logger.info("üóëÔ∏è –û—á–∏—â–∞—é —Ä–µ—Å—É—Ä—Å—ã –≤ Soniox")
            await self._cleanup(file_id, transcription_id)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if converted_path != file_path and os.path.exists(converted_path):
                    os.unlink(converted_path)
                    logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {converted_path}")
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")
            
            return True, text, stats
            
        except Exception as e:
            import traceback
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"Stack trace: {traceback.format_exc()}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            try:
                if 'file_path' in locals():
                    logger.error(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
                    if os.path.exists(file_path):
                        logger.error(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
                    else:
                        logger.error("üìÅ –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as diag_error:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {diag_error}")
            
            return False, error_msg, {}
    
    async def _convert_audio_format(self, file_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è API"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é pydub
            audio = AudioSegment.from_file(file_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ, 16kHz, 16-bit PCM
            audio = audio.set_channels(1)  # –ú–æ–Ω–æ
            audio = audio.set_frame_rate(16000)  # 16kHz
            audio = audio.set_sample_width(2)  # 16-bit
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)
            audio.export(temp_file.name, format='wav')
            temp_file.close()
            
            return temp_file.name
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            return file_path
    
    async def _upload_file(self, file_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Soniox API"""
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {file_size / 1024:.2f} KB")
        
        if file_size == 0:
            logger.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return None
        
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {attempt + 1}/{max_retries}")
                
                with open(file_path, 'rb') as f:
                    files = {'file': f}
                    response = self.session.post(f"{self.api_base}/v1/files", files=files)
                    
                    logger.info(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    if response.status_code in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                        try:
                            result = response.json()
                            logger.info(f"üìã –û—Ç–≤–µ—Ç API: {result}")
                            
                            # Soniox API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å file_id –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
                            file_id = result.get('file_id') or result.get('id') or result.get('fileId')
                            
                            if file_id:
                                logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ª—É—á–µ–Ω file_id: {file_id}")
                                return file_id
                            else:
                                logger.error(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω file_id. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                                return None
                                
                        except json.JSONDecodeError as json_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {json_error}")
                            logger.error(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                            return None
                            
                    elif response.status_code == 401:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SONIOX_API_KEY")
                        return None
                    elif response.status_code == 413:
                        logger.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è API")
                        return None
                    elif response.status_code == 429:
                        logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
                        if attempt < max_retries - 1:
                            wait_time = retry_delay * 2
                            logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                            await asyncio.sleep(wait_time)
                            retry_delay *= 2
                            continue
                        return None
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code} - {response.text}")
                        return None
                        
            except requests.exceptions.SSLError as ssl_error:
                logger.error(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {ssl_error}")
                if attempt < max_retries - 1:
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ SSL –æ—à–∏–±–æ–∫")
                    return None
                    
            except requests.exceptions.RequestException as req_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {req_error}")
                if attempt < max_retries - 1:
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫")
                    return None
                    
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
                import traceback
                logger.error(f"Stack trace: {traceback.format_exc()}")
                return None
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None
    
    async def _start_transcription(self, file_id: str) -> Optional[str]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è file_id: {file_id}")
            
            request_data = {
                "file_id": file_id,
                "model": "stt-async-preview",
                "language_hints": ["ru", "en"],  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
                "enable_speaker_diarization": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                "enable_language_identification": True
            }
            
            logger.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {request_data}")
            
            response = self.session.post(
                f"{self.api_base}/v1/transcriptions",
                json=request_data
            )
            
            logger.info(f"üì° –û—Ç–≤–µ—Ç API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            if response.status_code in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                try:
                    result = response.json()
                    logger.info(f"üìã –û—Ç–≤–µ—Ç API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result}")
                    
                    transcription_id = result.get("id") or result.get("transcription_id")
                    
                    if transcription_id:
                        logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω ID: {transcription_id}")
                        return transcription_id
                    else:
                        logger.error(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                        return None
                        
                except json.JSONDecodeError as json_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {json_error}")
                    logger.error(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                    return None
                    
            elif response.status_code == 401:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SONIOX_API_KEY")
                return None
            elif response.status_code == 400:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}")
                return None
            elif response.status_code == 404:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {file_id}")
                return None
            elif response.status_code == 429:
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∫ API")
                return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code} - {response.text}")
                return None
                
        except requests.exceptions.SSLError as ssl_error:
            logger.error(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {ssl_error}")
            return None
        except requests.exceptions.RequestException as req_error:
            logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {req_error}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            import traceback
            logger.error(f"Stack trace: {traceback.format_exc()}")
            return None
    
    async def _wait_for_completion(self, transcription_id: str, max_wait: int = 300) -> bool:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 60 –¥–æ 300 —Å–µ–∫—É–Ω–¥
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
        try:
            logger.info(f"‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id} (–º–∞–∫—Å–∏–º—É–º {max_wait} —Å–µ–∫)")
            
            for i in range(max_wait):
                if i % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    logger.info(f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏... ({i}/{max_wait} —Å–µ–∫)")
                
                try:
                    response = self.session.get(f"{self.api_base}/v1/transcriptions/{transcription_id}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        status = data.get("status", "unknown")
                        
                        logger.debug(f"üìä –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {status}")
                        
                        if status == "completed":
                            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {transcription_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            return True
                        elif status == "error":
                            error_msg = data.get('error_message', 'Unknown error')
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id}: {error_msg}")
                            return False
                        elif status == "processing":
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                            pass
                        else:
                            logger.info(f"üìä –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {status}")
                            
                    elif response.status_code == 404:
                        logger.error(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {transcription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return False
                    elif response.status_code == 401:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                        return False
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
                        
                except requests.exceptions.SSLError as ssl_error:
                    logger.warning(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {ssl_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ SSL –æ—à–∏–±–∫–∞—Ö
                except requests.exceptions.RequestException as req_error:
                    logger.warning(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {req_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                
                await asyncio.sleep(1)
            
            logger.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id} ({max_wait} —Å–µ–∫—É–Ω–¥)")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id}: {e}")
            import traceback
            logger.error(f"Stack trace: {traceback.format_exc()}")
            return False
    
    async def _get_transcript(self, transcription_id: str) -> Tuple[str, dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
        try:
            logger.info(f"üì• –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            status_response = self.session.get(f"{self.api_base}/v1/transcriptions/{transcription_id}")
            logger.info(f"üì° –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {status_response.status_code}")
            
            if status_response.status_code == 200:
                status_data = status_response.json()
                logger.info(f"üìã –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {status_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                status = status_data.get("status", "unknown")
                if status != "completed":
                    logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}")
                    return "", {}
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
                duration_ms = status_data.get("audio_duration_ms", 0)
                if duration_ms:
                    duration = duration_ms / 1000.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                else:
                    duration = 0
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {status_response.status_code}")
                return "", {}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
            response = self.session.get(f"{self.api_base}/v1/transcriptions/{transcription_id}/transcript")
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
            if response.status_code != 200:
                logger.info(f"‚ö†Ô∏è Endpoint /transcript –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é –æ—Å–Ω–æ–≤–Ω–æ–π endpoint")
                response = self.session.get(f"{self.api_base}/v1/transcriptions/{transcription_id}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, —Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                if response.status_code == 200:
                    status_data = response.json()
                    if status_data.get("status") == "completed":
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π endpoint
                        transcript_response = self.session.get(f"{self.api_base}/v1/transcriptions/{transcription_id}/result")
                        if transcript_response.status_code == 200:
                            response = transcript_response
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–∏–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ /result endpoint")
                        else:
                            logger.warning(f"‚ö†Ô∏è Endpoint /result —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {transcript_response.status_code}")
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –µ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–º –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                            data = status_data
                            logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞: {data}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ
                            text = status_data.get("text") or status_data.get("transcript") or status_data.get("content", "")
                            
                            if not text:
                                logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                                text = "[–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª]"
                            else:
                                text = " ".join(text.split())
                                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                            
                            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
                            stats = {
                                "transcription_id": transcription_id,
                                "text_length": len(text),
                                "tokens_count": 0,
                                "confidence_avg": 0.0,
                                "language": status_data.get("language", "unknown"),
                                "duration": duration,
                                "status": status
                            }
                            
                            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å—Ç–∞—Ç—É—Å–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                            return text, stats
            
            logger.info(f"üì° –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    logger.info(f"üìã –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {data}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API:")
                    for key, value in data.items():
                        logger.info(f"   ‚Ä¢ {key}: {type(value).__name__} = {repr(value)}")
                    
                    # Soniox API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
                    text = data.get("text") or data.get("transcript") or data.get("content") or data.get("result", "")
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
                    if not text:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ segments –∏–ª–∏ words
                        segments = data.get("segments", [])
                        if segments:
                            logger.info(f"üìù –ù–∞–π–¥–µ–Ω—ã —Å–µ–≥–º–µ–Ω—Ç—ã: {len(segments)}")
                            text_parts = []
                            for segment in segments:
                                segment_text = segment.get("text", "")
                                if segment_text:
                                    text_parts.append(segment_text)
                            if text_parts:
                                text = " ".join(text_parts)
                                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º words
                        if not text:
                            words = data.get("words", [])
                            if words:
                                logger.info(f"üìù –ù–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞: {len(words)}")
                                word_texts = []
                                for word in words:
                                    word_text = word.get("text", "")
                                    if word_text:
                                        word_texts.append(word_text)
                                if word_texts:
                                    text = " ".join(word_texts)
                                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω –∏–∑ —Å–ª–æ–≤: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    if not text:
                        logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
                        logger.warning(f"üìã –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}")
                        text = "[–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª]"
                    else:
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                        text = " ".join(text.split())
                        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    tokens = data.get("tokens", [])
                    stats = {
                        "transcription_id": transcription_id,
                        "text_length": len(text),
                        "tokens_count": len(tokens),
                        "confidence_avg": self._calculate_average_confidence(tokens),
                        "language": data.get("language", "unknown"),
                        "duration": duration,
                        "status": status
                    }
                    
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                    return text, stats
                    
                except json.JSONDecodeError as json_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {json_error}")
                    logger.error(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                    return "", {}
                    
            elif response.status_code == 404:
                logger.error(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è {transcription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return "", {}
            elif response.status_code == 401:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
                return "", {}
            elif response.status_code == 400:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {response.text}")
                return "", {}
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {response.status_code} - {response.text}")
                return "", {}
                
        except requests.exceptions.SSLError as ssl_error:
            logger.error(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {ssl_error}")
            return "", {}
        except requests.exceptions.RequestException as req_error:
            logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {req_error}")
            return "", {}
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            import traceback
            logger.error(f"Stack trace: {traceback.format_exc()}")
            return "", {}
    
    def _calculate_average_confidence(self, tokens: list) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if not tokens:
            return 0.0
        
        confidences = [token.get("confidence", 0.0) for token in tokens]
        return sum(confidences) / len(confidences)
    
    async def _cleanup(self, file_id: str, transcription_id: str):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –≤ Soniox API"""
        try:
            logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤: file_id={file_id}, transcription_id={transcription_id}")
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
            try:
                response = self.session.delete(f"{self.api_base}/v1/transcriptions/{transcription_id}")
                if response.status_code in [200, 204]:  # 200 OK –∏–ª–∏ 204 No Content
                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {transcription_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                elif response.status_code == 404:
                    logger.info(f"‚ÑπÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {transcription_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            try:
                response = self.session.delete(f"{self.api_base}/v1/files/{file_id}")
                if response.status_code in [200, 204]:  # 200 OK –∏–ª–∏ 204 No Content
                    logger.info(f"‚úÖ –§–∞–π–ª {file_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                elif response.status_code == 404:
                    logger.info(f"‚ÑπÔ∏è –§–∞–π–ª {file_id} —É–∂–µ —É–¥–∞–ª–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            import traceback
            logger.error(f"Stack trace: {traceback.format_exc()}")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
        return bool(self.api_key)
    
    async def test_connection_with_retries(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Soniox API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not self.api_key:
            logger.error("‚ùå SONIOX_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Soniox API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries})...")
                
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                response = self.session.get(f"{self.api_base}/v1/models", timeout=(5, 10))
                
                if response.status_code in [200, 201, 204]:  # 200 OK, 201 Created, 204 No Content
                    logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Soniox API —É—Å–ø–µ—à–Ω–æ")
                    return True
                elif response.status_code == 401:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SONIOX_API_KEY")
                    return False
                elif response.status_code == 403:
                    logger.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API")
                    return False
                elif response.status_code == 429:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {response.status_code}")
                    logger.info(f"üìã –û—Ç–≤–µ—Ç API: {response.text[:200]}...")  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if response.status_code < 500:  # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                        return False
                    
            except requests.exceptions.SSLError as ssl_error:
                logger.error(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {ssl_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(delay)
                continue
                
            except requests.exceptions.Timeout as timeout_error:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {timeout_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(delay)
                continue
                
            except requests.exceptions.ConnectionError as conn_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {conn_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(delay)
                continue
                
            except requests.exceptions.RequestException as req_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {req_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(delay)
                continue
                
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(delay)
                continue
        
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Soniox API –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def _upload_file_with_retries(self, file_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Soniox API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {file_size / 1024:.2f} KB")
        
        if file_size == 0:
            logger.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return None
        
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {attempt + 1}/{self.max_retries}")
                
                with open(file_path, 'rb') as f:
                    files = {'file': f}
                    response = self.session.post(f"{self.api_base}/v1/files", files=files, timeout=(30, 60))
                    
                    logger.info(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    if response.status_code in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                        try:
                            result = response.json()
                            logger.info(f"üìã –û—Ç–≤–µ—Ç API: {result}")
                            
                            # Soniox API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å file_id –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
                            file_id = result.get('file_id') or result.get('id') or result.get('fileId')
                            
                            if file_id:
                                logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ª—É—á–µ–Ω file_id: {file_id}")
                                return file_id
                            else:
                                logger.error(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω file_id. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                                return None
                                
                        except json.JSONDecodeError as json_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {json_error}")
                            logger.error(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                            return None
                            
                    elif response.status_code == 401:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SONIOX_API_KEY")
                        return None
                    elif response.status_code == 413:
                        logger.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è API")
                        return None
                    elif response.status_code == 429:
                        logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
                        if attempt < self.max_retries - 1:
                            delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                            logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                            await asyncio.sleep(delay)
                            continue
                        return None
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code} - {response.text}")
                        if attempt < self.max_retries - 1:
                            delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                            logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                            await asyncio.sleep(delay)
                            continue
                        return None
                        
            except requests.exceptions.SSLError as ssl_error:
                logger.error(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {ssl_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ SSL –æ—à–∏–±–æ–∫")
                    return None
                    
            except requests.exceptions.Timeout as timeout_error:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {timeout_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤")
                    return None
                    
            except requests.exceptions.ConnectionError as conn_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {conn_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    return None
                    
            except requests.exceptions.RequestException as req_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {req_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫")
                    return None
                    
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                import traceback
                logger.error(f"Stack trace: {traceback.format_exc()}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                return None
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None

    async def _start_transcription_with_retries(self, file_id: str) -> Optional[str]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è file_id: {file_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries})")
                
                request_data = {
                    "file_id": file_id,
                    "model": "stt-async-preview",
                    "language_hints": ["ru", "en"],  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
                    "enable_speaker_diarization": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    "enable_language_identification": True
                }
                
                logger.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {request_data}")
                
                response = self.session.post(
                    f"{self.api_base}/v1/transcriptions",
                    json=request_data,
                    timeout=(10, 30)
                )
                
                logger.info(f"üì° –û—Ç–≤–µ—Ç API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                    try:
                        result = response.json()
                        logger.info(f"üìã –û—Ç–≤–µ—Ç API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result}")
                        
                        transcription_id = result.get("id") or result.get("transcription_id")
                        
                        if transcription_id:
                            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω ID: {transcription_id}")
                            return transcription_id
                        else:
                            logger.error(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                            return None
                            
                    except json.JSONDecodeError as json_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {json_error}")
                        logger.error(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                        return None
                        
                elif response.status_code == 401:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                    return None
                elif response.status_code == 400:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.text}")
                    return None
                elif response.status_code == 429:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
                    if attempt < self.max_retries - 1:
                        delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(delay)
                        continue
                    return None
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code} - {response.text}")
                    if attempt < self.max_retries - 1:
                        delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(delay)
                        continue
                    return None
                        
            except requests.exceptions.SSLError as ssl_error:
                logger.error(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {ssl_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ SSL –æ—à–∏–±–æ–∫")
                    return None
                    
            except requests.exceptions.Timeout as timeout_error:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {timeout_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤")
                    return None
                    
            except requests.exceptions.ConnectionError as conn_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {conn_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    return None
                    
            except requests.exceptions.RequestException as req_error:
                logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {req_error}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫")
                    return None
                    
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                import traceback
                logger.error(f"Stack trace: {traceback.format_exc()}")
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                return None
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None

    async def _get_transcript_with_retries(self, transcription_id: str) -> Tuple[str, dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üì• –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcription_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries})")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                text, stats = await self._get_transcript(transcription_id)
                
                if text and text != "[–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª]":
                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text, stats
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                    
                    if attempt < self.max_retries - 1:
                        delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞—é {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(delay)
                        continue
                    else:
                        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                        return text, stats  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                
                if attempt < self.max_retries - 1:
                    delay = min(self.base_delay * (2 ** attempt), self.max_delay)
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    return "", {}
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return "", {}

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Soniox API (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_connection_with_retries)"""
        return await self.test_connection_with_retries() 