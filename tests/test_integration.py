#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Mind Map Generator —Å Telegram –±–æ—Ç–æ–º

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import pytest
import asyncio
import os
import tempfile
from unittest.mock import Mock, AsyncMock, patch
from mind_map_generator import MindMapGenerator

class TestMindMapIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ mind map —Å Telegram –±–æ—Ç–æ–º"""
    
    @pytest.fixture
    def mock_mind_map_generator(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ mind map –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        generator = MindMapGenerator("test_api_key")
        
        # –ú–æ–∫–∞–µ–º LLM –∞–Ω–∞–ª–∏–∑
        async def mock_analyze_chunk(chunk):
            ideas = []
            if '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in chunk.lower():
                ideas.extend([
                    "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                    "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
                ])
            if 'youtube' in chunk.lower():
                ideas.extend([
                    "YouTube –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"
                ])
            if not ideas:
                ideas = ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "–¶–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"]
            return ideas
        
        generator._analyze_chunk_with_llm = mock_analyze_chunk
        return generator
    
    @pytest.fixture
    def sample_text(self):
        """–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return """
        –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ. 
        –≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
        
        YouTube –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ 
        –∏ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ. –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Siri –∏ Alexa, —Ç–∞–∫–∂–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ò–ò.
        """
    
    @pytest.mark.asyncio
    async def test_full_mind_map_creation(self, mock_mind_map_generator, sample_text):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è mind map"""
        # –°–æ–∑–¥–∞–µ–º mind map –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        results = await mock_mind_map_generator.create_mind_map(sample_text, "all")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert "structure" in results
        assert "markdown" in results
        assert "mermaid" in results
        assert "html_content" in results
        assert "png_path" in results
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–¥–µ–π
        structure = results["structure"]
        assert "main_topic" in structure
        assert "subtopics" in structure
        assert len(structure["subtopics"]) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Markdown
        markdown = results["markdown"]
        assert "# " in markdown  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        assert "## " in markdown  # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        assert "üí°" in markdown or "ü§ñ" in markdown or "üé•" in markdown  # –≠–º–æ–¥–∑–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Mermaid
        mermaid = results["mermaid"]
        assert "mindmap" in mermaid
        assert "root" in mermaid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML
        html = results["html_content"]
        assert "<!DOCTYPE html>" in html
        assert "Mind Map - Subs-bot" in html
        assert "markmap" in html
    
    @pytest.mark.asyncio
    async def test_text_chunking(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏"""
        long_text = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1. " * 1000  # ~6000 —Å–∏–º–≤–æ–ª–æ–≤
        
        chunks = mock_mind_map_generator._chunk_text(long_text)
        
        assert len(chunks) > 1  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
        assert all(len(chunk) <= 2000 for chunk in chunks)  # –ö–∞–∂–¥—ã–π —á–∞–Ω–∫ –Ω–µ –±–æ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤
    
    @pytest.mark.asyncio
    async def test_hierarchy_building(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏–¥–µ–π"""
        ideas = [
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "YouTube –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤",
            "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        hierarchy = mock_mind_map_generator._build_hierarchy(ideas)
        
        assert "main_topic" in hierarchy
        assert "subtopics" in hierarchy
        assert len(hierarchy["subtopics"]) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–¥–µ–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ç–µ–º–∞–º
        subtopics = hierarchy["subtopics"]
        assert any("–ò–ò" in topic or "ML" in topic for topic in subtopics.keys())
        # YouTube –∏–¥–µ–∏ –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –≤ "–û–±—â–∏–µ —Ç–µ–º—ã" –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
        assert len(subtopics) > 0  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥—Ç–µ–º—ã
    
    def test_markdown_generation(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown"""
        structure = {
            "main_topic": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò",
            "subtopics": {
                "–ò–ò –∏ ML": ["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"],
                "–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã": ["YouTube", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"]
            }
        }
        
        markdown = mock_mind_map_generator.generate_markdown(structure)
        
        assert "# –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò" in markdown
        assert "## –ò–ò –∏ ML" in markdown
        assert "## –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã" in markdown
        assert "ü§ñ" in markdown or "üí°" in markdown  # –≠–º–æ–¥–∑–∏
        assert "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏" in markdown
    
    def test_mermaid_generation(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Mermaid"""
        structure = {
            "main_topic": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò",
            "subtopics": {
                "–ò–ò –∏ ML": ["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"]
            }
        }
        
        mermaid = mock_mind_map_generator.generate_mermaid(structure)
        
        assert "mindmap" in mermaid
        assert 'root(("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ò–ò"))' in mermaid
        assert '"–ò–ò –∏ ML"' in mermaid
        assert '"ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"' in mermaid
    
    def test_html_generation(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML"""
        markdown_content = "# –¢–µ—Å—Ç\n## –ü–æ–¥—Ç–µ–º–∞\n- –ü—É–Ω–∫—Ç"
        
        html = mock_mind_map_generator.generate_html_markmap(markdown_content)
        
        assert "<!DOCTYPE html>" in html
        assert "<title>Mind Map - Subs-bot</title>" in html
        assert "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏" in html
        assert "markmap-toolbar" in html
        assert "markmap-view" in html
    
    @pytest.mark.asyncio
    async def test_png_rendering_fallback(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç fallback –¥–ª—è PNG —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
        mermaid_code = "mindmap\n  root((–¢–µ—Å—Ç))\n    –ø–æ–¥—Ç–µ–º–∞\n      –ø—É–Ω–∫—Ç"
        
        # –ú–æ–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É mermaid-cli
        with patch.object(mock_mind_map_generator, '_check_mermaid_cli', return_value=False):
            # –ú–æ–∫–∞–µ–º kroki.io API
            with patch.object(mock_mind_map_generator, '_render_with_kroki_api', return_value=True):
                result = await mock_mind_map_generator.render_to_png(mermaid_code, "test.png")
                assert result is True
    
    def test_emoji_classification(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ —ç–º–æ–¥–∑–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∏–¥–µ–π
        ai_idea = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        video_idea = "YouTube —Å—É–±—Ç–∏—Ç—Ä—ã –∏ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç"
        audio_idea = "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ"
        general_idea = "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–æ–¥–∑–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ Markdown
        structure = {
            "main_topic": "–¢–µ—Å—Ç",
            "subtopics": {
                "–¢–µ—Å—Ç": [ai_idea, video_idea, audio_idea, general_idea]
            }
        }
        
        markdown = mock_mind_map_generator.generate_markdown(structure)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏
        assert "ü§ñ" in markdown or "üé•" in markdown or "üéµ" in markdown or "üí°" in markdown
    
    @pytest.mark.asyncio
    async def test_error_handling(self, mock_mind_map_generator):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        empty_results = await mock_mind_map_generator.create_mind_map("", "all")
        assert "structure" in empty_results
        # –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
        assert "main_topic" in empty_results["structure"]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        short_results = await mock_mind_map_generator.create_mind_map("–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç", "all")
        assert "structure" in short_results

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 