#!/usr/bin/env python3
"""
Test MCP Integrations
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import asyncio
import json
from datetime import datetime, timedelta
from enterprise_task_orchestrator import EnterpriseTaskOrchestrator, TaskData
from mcp_integrations import MCPIntegrationManager

async def test_basic_integrations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    test_task = TaskData(
        id="test_task_001",
        title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏",
        priority=4,
        deadline=(datetime.now() + timedelta(days=1)).isoformat(),
        tags=["test", "integration", "mcp"]
    )
    
    print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {test_task.title}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Enterprise –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä...")
    
    orchestrator = EnterpriseTaskOrchestrator()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        created_task = await orchestrator.create_task(
            title=test_task.title,
            description=test_task.description,
            priority=test_task.priority,
            deadline=test_task.deadline,
            tags=test_task.tags
        )
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: {created_task.id}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_status = orchestrator.get_health_status()
        print(f"üè• –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:")
        for server, status in health_status["server_health"].items():
            print(f"  {server}: {status['status']} (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {status['response_time']:.3f}s)")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = orchestrator.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats['total_operations']}")
        print(f"  –°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤: {stats['server_status']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    finally:
        await orchestrator.stop()

async def test_direct_integrations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    integration_manager = MCPIntegrationManager()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    status = await integration_manager.get_integration_status()
    
    for server, is_online in status.items():
        status_icon = "‚úÖ" if is_online else "‚ùå"
        print(f"  {status_icon} {server}: {'–æ–Ω–ª–∞–π–Ω' if is_online else '–æ—Ñ–ª–∞–π–Ω'}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏...")
    test_task = TaskData(
        id="direct_test_001",
        title="–ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç",
        description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏",
        priority=3,
        tags=["direct", "test"]
    )
    
    try:
        results = await integration_manager.create_task_integrated(test_task)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:")
        for server, response in results.items():
            status_icon = "‚úÖ" if response.success else "‚ùå"
            print(f"  {status_icon} {server}: {response.success}")
            if not response.success:
                print(f"    –û—à–∏–±–∫–∞: {response.error}")
            print(f"    –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response.response_time:.3f}s")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")

async def test_individual_servers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    from mcp_integrations import (
        DeltaTaskIntegration, ShrimpTaskManagerIntegration, 
        HPKVMemoryIntegration, NotificationsIntegration
    )
    
    # –¢–µ—Å—Ç deltatask
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ deltatask...")
    try:
        async with DeltaTaskIntegration() as client:
            test_task = TaskData(
                id="deltatask_test",
                title="Deltatask —Ç–µ—Å—Ç",
                description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å deltatask",
                priority=2
            )
            response = await client.create_task(test_task)
            print(f"  {'‚úÖ' if response.success else '‚ùå'} Deltatask: {response.success}")
    except Exception as e:
        print(f"  ‚ùå Deltatask –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç shrimp-task-manager
    print("ü¶ê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ shrimp-task-manager...")
    try:
        async with ShrimpTaskManagerIntegration() as client:
            response = await client.plan_task(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã shrimp-task-manager"
            )
            print(f"  {'‚úÖ' if response.success else '‚ùå'} Shrimp-task-manager: {response.success}")
    except Exception as e:
        print(f"  ‚ùå Shrimp-task-manager –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç hpkv-memory
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ hpkv-memory...")
    try:
        async with HPKVMemoryIntegration() as client:
            response = await client.store_memory(
                "test_project",
                "test_session",
                1,
                "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
                {"test": True}
            )
            print(f"  {'‚úÖ' if response.success else '‚ùå'} HPKV-memory: {response.success}")
    except Exception as e:
        print(f"  ‚ùå HPKV-memory –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç notifications
    print("üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ notifications...")
    try:
        async with NotificationsIntegration() as client:
            response = await client.send_notification(
                "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç MCP —Å–∏—Å—Ç–µ–º—ã",
                "info"
            )
            print(f"  {'‚úÖ' if response.success else '‚ùå'} Notifications: {response.success}")
    except Exception as e:
        print(f"  ‚ùå Notifications –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        await test_basic_integrations()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        await test_direct_integrations()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        await test_individual_servers()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 