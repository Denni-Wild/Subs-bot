#!/usr/bin/env python3
"""
Enterprise Task Management System Demo
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π enterprise —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""

import asyncio
import json
from datetime import datetime, timedelta
from enterprise_task_orchestrator import EnterpriseTaskOrchestrator, TaskData
from mcp_integrations import MCPIntegrationManager

class EnterpriseSystemDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è enterprise —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.orchestrator = EnterpriseTaskOrchestrator()
        self.integration_manager = MCPIntegrationManager()
    
    async def run_full_demo(self):
        """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ Enterprise Task Management System Demo")
        print("=" * 60)
        
        try:
            # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
            await self.demo_task_creation()
            
            # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.demo_task_planning()
            
            # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self.demo_monitoring()
            
            # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
            await self.demo_integrations()
            
            # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            await self.demo_error_handling()
            
            print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        finally:
            await self.orchestrator.stop()
    
    async def demo_task_creation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        print("\nüìã 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–∑–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        tasks = [
            {
                "title": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
                "description": "–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "priority": 5,
                "tags": ["critical", "urgent"]
            },
            {
                "title": "–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞",
                "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "priority": 3,
                "tags": ["normal", "work"]
            },
            {
                "title": "–ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞",
                "description": "–ó–∞–¥–∞—á–∞ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
                "priority": 1,
                "tags": ["low", "optional"]
            }
        ]
        
        created_tasks = []
        
        for i, task_info in enumerate(tasks, 1):
            print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {i}: {task_info['title']}")
            
            task = await self.orchestrator.create_task(
                title=task_info['title'],
                description=task_info['description'],
                priority=task_info['priority'],
                deadline=(datetime.now() + timedelta(days=i)).isoformat(),
                tags=task_info['tags']
            )
            
            created_tasks.append(task)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {task.id}")
            print(f"  üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}")
            print(f"  üè∑Ô∏è –¢–µ–≥–∏: {', '.join(task.tags)}")
        
        print(f"\nüìà –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(created_tasks)}")
    
    async def demo_task_planning(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        print("\nü¶ê 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á")
        print("-" * 40)
        
        from mcp_integrations import ShrimpTaskManagerIntegration
        
        complex_task_description = """
        –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
        - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
        - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç—á–µ—Ç—ã
        - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        """
        
        print("üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏...")
        
        async with ShrimpTaskManagerIntegration() as client:
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            plan_response = await client.plan_task(
                complex_task_description,
                "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI, REST API, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL"
            )
            
            if plan_response.success:
                print("  ‚úÖ –ó–∞–¥–∞—á–∞ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
                print("  üìä –ü–æ–ª—É—á–µ–Ω –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {plan_response.error}")
    
    async def demo_monitoring(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüìä 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_status = self.orchestrator.get_health_status()
        
        print("üè• –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–æ–≤:")
        for server, status in health_status["server_health"].items():
            status_icon = "üü¢" if status['status'] == 'ServerStatus.ONLINE' else "üî¥"
            print(f"  {status_icon} {server}: {status['status']}")
            print(f"    ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {status['response_time']:.3f}s")
            print(f"    ‚ùå –û—à–∏–±–æ–∫: {status['error_count']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.orchestrator.get_statistics()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats['total_operations']}")
        print(f"  üîÑ –°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤: {stats['server_status']}")
        print(f"  ‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {sum(stats['error_rates'].values())}")
        
        # –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        queue_size = health_status["queue_size"]
        print(f"  üì¶ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á: {queue_size}")
    
    async def demo_integrations(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        print("\nüîó 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        print("-" * 40)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        status = await self.integration_manager.get_integration_status()
        
        online_count = sum(1 for is_online in status.values() if is_online)
        total_count = len(status)
        
        print(f"  üìä –û–Ω–ª–∞–π–Ω: {online_count}/{total_count}")
        
        for server, is_online in status.items():
            status_icon = "üü¢" if is_online else "üî¥"
            print(f"    {status_icon} {server}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        from mcp_integrations import NotificationsIntegration
        
        async with NotificationsIntegration() as client:
            notification_response = await client.send_notification(
                "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "Enterprise Task Management System —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
                "success"
            )
            
            if notification_response.success:
                print("  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_response.error}")
    
    async def demo_error_handling(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüõ°Ô∏è 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            task = await self.orchestrator.create_task(
                title="–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                description="–ó–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                priority=10,  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                tags=["error", "test"]
            )
            print("  ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω)")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è circuit breaker
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Circuit Breaker...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        for i in range(3):
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º
                pass  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫
                print(f"  üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ {i+1}: {e}")
        
        print("  üõ°Ô∏è Circuit Breaker –∑–∞—â–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    demo = EnterpriseSystemDemo()
    await demo.run_full_demo()

if __name__ == "__main__":
    asyncio.run(main()) 