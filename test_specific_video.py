import asyncio
import logging
from youtube_transcript_api import YouTubeTranscriptApi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_specific_video():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –≤–∏–¥–µ–æ"""
    video_id = "WDKSIQ38wGA"
    
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –≤–∏–¥–µ–æ: {video_id}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        logger.info("üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤...")
        list_transcripts = YouTubeTranscriptApi.list_transcripts(video_id)
        available_languages = [t.language_code for t in list_transcripts]
        logger.info(f"üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_languages}")
        
        # 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for lang in available_languages:
            logger.info(f"üé¨ –¢–µ—Å—Ç–∏—Ä—É—é —è–∑—ã–∫: {lang}")
            try:
                transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=[lang])
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {lang}: {len(transcript)} —Å—Ç—Ä–æ–∫")
                logger.info(f"üìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏: {transcript[:3]}")
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ {lang}: {e}")
        
        # 3. –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
        logger.info("ü§ñ –ü—Ä–æ–±—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã...")
        try:
            transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['auto'])
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã: {len(transcript)} —Å—Ç—Ä–æ–∫")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {e}")
        
        # 4. –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ list_transcripts —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        logger.info("üîç –ü—Ä–æ–±—É—é —á–µ—Ä–µ–∑ list_transcripts —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º...")
        try:
            for transcript_obj in list_transcripts:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
                    transcript = transcript_obj.fetch()
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ list_transcripts: {len(transcript)} —Å—Ç—Ä–æ–∫")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ list_transcripts: {e}")
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                    try:
                        logger.info(f"üîÑ –ü—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {transcript_obj.language_code} –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
                        transcript = transcript_obj.translate('en').fetch()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {len(transcript)} —Å—Ç—Ä–æ–∫")
                        logger.info(f"üìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏: {transcript[:3]}")
                        break
                    except Exception as e2:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e2}")
                        
                        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
                        for target_lang in ['en', 'ru', 'es', 'fr']:
                            if target_lang != transcript_obj.language_code:
                                try:
                                    logger.info(f"üîÑ –ü—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ {target_lang}...")
                                    transcript = transcript_obj.translate(target_lang).fetch()
                                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ {target_lang}: {len(transcript)} —Å—Ç—Ä–æ–∫")
                                    break
                                except:
                                    continue
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä—ã")
                            
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ list_transcripts: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_specific_video()) 