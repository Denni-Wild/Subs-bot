import os
import re
import logging
import time
import asyncio
import random
import tempfile
from io import BytesIO
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
from dotenv import load_dotenv
from summarizer import TextSummarizer
from voice_transcriber import VoiceTranscriber
import requests

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
summarizer = TextSummarizer()
voice_transcriber = VoiceTranscriber()
YOUTUBE_REGEX = r"(?:v=|youtu\.be/|youtube\.com/embed/|youtube\.com/watch\?v=)?([\w-]{11})"

# Enhanced rate limiting constants
MIN_REQUEST_INTERVAL = 15  # Increased from 10 to 15 seconds
MAX_RETRIES = 3
BASE_DELAY = 2  # Base delay in seconds
MAX_DELAY = 60  # Maximum delay in seconds

# Global rate limiting state
request_timestamps = {}  # Track last request time per user
global_last_request = 0  # Global rate limiting
global_request_lock = asyncio.Lock()  # Prevent concurrent requests

START_MESSAGE = (
    'üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube Subtitle Bot!**\n\n'
    'üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n'
    '‚Ä¢ üì∫ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å YouTube-–≤–∏–¥–µ–æ\n'
    '‚Ä¢ üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n'
    '‚Ä¢ ü§ñ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤\n'
    '‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤\n\n'
    'üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ\n'
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤\n'
    '3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Å—É–±—Ç–∏—Ç—Ä—ã/—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è)\n'
    '4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n'
    'üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n'
    '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n'
    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç\n\n'
    'üìö **–ö–æ–º–∞–Ω–¥—ã:**\n'
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
    '/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n'
    '/about - –û –±–æ—Ç–µ\n'
    '/subs - –ü–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã\n'
    '/voice - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å\n'
    '/info - –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n'
    'üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**'
)

HELP_MESSAGE = (
    '‚ÑπÔ∏è **–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê**\n\n'
    'üì∫ **YouTube —Å—É–±—Ç–∏—Ç—Ä—ã:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ\n'
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n'
    '3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n'
    '   ‚Ä¢ üìÑ –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã\n'
    '   ‚Ä¢ ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
    '   ‚Ä¢ üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
    '4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (—Å/–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫)\n'
    '5. –î–ª—è –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å\n\n'
    'üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    '2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç\n'
    '3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏\n'
    '4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)\n'
    '5. –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π\n\n'
    'ü§ñ **–ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:**\n'
    '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n'
    '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ò–ò-–º–æ–¥–µ–ª–µ–π\n'
    '‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2-3 –º–∏–Ω—É—Ç—ã\n\n'
    '‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
    '‚Ä¢ –ù–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ 15 —Å–µ–∫—É–Ω–¥\n'
    '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∏–¥–µ–æ\n'
    '‚Ä¢ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã\n'
    '‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
    'üîß **–ö–æ–º–∞–Ω–¥—ã:**\n'
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n'
    '/about - –û –±–æ—Ç–µ\n\n'
    'üí° **–°–æ–≤–µ—Ç—ã:**\n'
    '‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n'
    '‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏\n'
    '‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥'
)

ABOUT_MESSAGE = (
    'ü§ñ **–û –ë–û–¢–ï**\n\n'
    '**YouTube Subtitle Bot** - —ç—Ç–æ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n\n'
    'üéØ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:**\n'
    '–°–¥–µ–ª–∞—Ç—å YouTube-–∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n\n'
    '‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n'
    '‚Ä¢ üì∫ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –ª—é–±–æ–≥–æ YouTube-–≤–∏–¥–µ–æ\n'
    '‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤\n'
    '‚Ä¢ ü§ñ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è\n'
    '‚Ä¢ üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n'
    '‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n'
    'üõ† **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n'
    '‚Ä¢ YouTube Transcript API\n'
    '‚Ä¢ –ò–ò-–º–æ–¥–µ–ª–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n'
    '‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ\n'
    '‚Ä¢ Telegram Bot API\n\n'
    'üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n'
    '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 100+ —è–∑—ã–∫–æ–≤\n'
    '‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n'
    '‚Ä¢ –ù–∞–¥–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n\n'
    'üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n'
    '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help\n\n'
    'üöÄ **–í–µ—Ä—Å–∏—è:** 2.0\n'
    'üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** 2024'
)

INFO_MESSAGE = (
    '‚ÑπÔ∏è **–ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n'
    'üéØ **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**\n'
    '‚Ä¢ üì∫ –ü–æ–ª—É—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã —Å YouTube-–≤–∏–¥–µ–æ\n'
    '‚Ä¢ ü§ñ –°–æ–∑–¥–∞–≤–∞—Ç—å –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é\n'
    '‚Ä¢ üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
    '‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤\n\n'
    '‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ\n'
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–µ\n'
    '3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n'
    'üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n'
    '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    '–ú–∞–∫—Å–∏–º—É–º: 5 –º–∏–Ω—É—Ç\n\n'
    '‚è±Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
    '‚Ä¢ –ù–µ —á–∞—â–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ 15 —Å–µ–∫—É–Ω–¥\n'
    '‚Ä¢ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: 2-3 –º–∏–Ω—É—Ç—ã\n'
    '‚Ä¢ –ì–æ–ª–æ—Å: –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
    'üí° **–°–æ–≤–µ—Ç—ã:**\n'
    '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞\n'
    '‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏\n'
    '‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∂–¥–∏—Ç–µ 15 —Å–µ–∫—É–Ω–¥\n\n'
    'üìö **–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** /help'
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def extract_video_id(text):
    match = re.search(YOUTUBE_REGEX, text)
    return match.group(1) if match else None

def sanitize_filename(filename):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '')
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    filename = re.sub(r'\s+', ' ', filename)
    filename = re.sub(r'-+', '-', filename)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if len(filename) > 100:
        filename = filename[:97] + '...'
    
    return filename.strip()

async def get_video_title(video_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º oEmbed API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        url = f"https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v={video_id}&format=json"
        
        async with asyncio.Lock():  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            title = data.get('title', 'Unknown Video')
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {title}")
            return title
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ {video_id}: {e}")
        return f"Video_{video_id}"

async def create_filename(video_id: str, file_type: str, lang_code: str = None, format_str: str = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_title = await get_video_title(video_id)
        safe_title = sanitize_filename(video_title)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename_parts = [safe_title]
        
        if lang_code:
            filename_parts.append(f"[{lang_code}]")
        
        if format_str:
            format_short = "time" if "–º–µ—Ç–∫–∞–º–∏" in format_str else "plain"
            filename_parts.append(f"[{format_short}]")
        
        filename_parts.append(f"[{file_type}]")
        
        filename = " - ".join(filename_parts) + ".txt"
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        fallback_parts = [file_type, video_id]
        if lang_code:
            fallback_parts.append(lang_code)
        return f"{'_'.join(fallback_parts)}.txt"

async def rate_limit_check(user_id: int) -> bool:
    """Check if user is within rate limits"""
    now = time.time()
    last_time = request_timestamps.get(user_id, 0)
    
    if now - last_time < MIN_REQUEST_INTERVAL:
        return False
    
    request_timestamps[user_id] = now
    return True

async def global_rate_limit_check() -> bool:
    """Check global rate limiting to prevent API abuse"""
    global global_last_request
    now = time.time()
    
    async with global_request_lock:
        if now - global_last_request < 2:  # Minimum 2 seconds between any requests
            return False
        global_last_request = now
        return True

async def get_transcript_with_retry(video_id: str, languages: list, max_retries: int = MAX_RETRIES) -> tuple:
    """
    Get transcript with exponential backoff retry logic and fallback methods
    Returns: (transcript_data, success, error_message)
    """
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {video_id}, —è–∑—ã–∫–∏: {languages}, –ø–æ–ø—ã—Ç–∫–∞ 1/{max_retries}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    try:
        logger.info(f"üìã –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        ytt_api = YouTubeTranscriptApi()
        list_transcripts = ytt_api.list(video_id)
        available_languages = [t.language_code for t in list_transcripts]
        logger.info(f"üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_languages}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if languages[0] not in available_languages:
            fallback_languages = ['en', 'ru', 'auto']  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è fallback
            for fallback_lang in fallback_languages:
                if fallback_lang in available_languages:
                    logger.info(f"üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —è–∑—ã–∫ {languages[0]} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback: {fallback_lang}")
                    languages = [fallback_lang]
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö fallback, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                if available_languages:
                    logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫: {available_languages[0]}")
                    languages = [available_languages[0]]
                else:
                    return None, False, "–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ."
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit")
            # Check global rate limit
            if not await global_rate_limit_check():
                logger.info(f"‚è≥ –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limit –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥—É 2 —Å–µ–∫—É–Ω–¥—ã")
                await asyncio.sleep(2)
                continue
                
            logger.info(f"üåê –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ YouTube API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            transcript = None
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            try:
                ytt_api = YouTubeTranscriptApi()
                transcript = ytt_api.fetch(video_id, languages=languages)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã –º–µ—Ç–æ–¥–æ–º 1: {len(transcript)} —Å—Ç—Ä–æ–∫")
            except Exception as e1:
                logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e1}")
                
                # –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ list_transcripts
                try:
                    ytt_api = YouTubeTranscriptApi()
                    list_transcripts = ytt_api.list(video_id)
                    for lang in languages:
                        try:
                            transcript_obj = list_transcripts.find_transcript([lang])
                            transcript = transcript_obj.fetch()
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã –º–µ—Ç–æ–¥–æ–º 2: {len(transcript)} —Å—Ç—Ä–æ–∫")
                            break
                        except:
                            continue
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    
                    # –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
                    try:
                        ytt_api = YouTubeTranscriptApi()
                        transcript = ytt_api.fetch(video_id, languages=['auto'])
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã: {len(transcript)} —Å—Ç—Ä–æ–∫")
                    except Exception as e3:
                        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e3}")
            
            if transcript:
                return transcript, True, None
            else:
                raise Exception("–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {error_msg}")
            
            # Handle specific error types
            if "Too Many Requests" in error_msg or "429" in error_msg:
                if attempt < max_retries - 1:
                    # Exponential backoff with jitter
                    delay = min(BASE_DELAY * (2 ** attempt) + random.uniform(0, 1), MAX_DELAY)
                    logger.warning(f"Rate limit hit for video {video_id}, attempt {attempt + 1}/{max_retries}, waiting {delay:.1f}s")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç)."
            
            elif "TranscriptsDisabled" in error_msg:
                return None, False, "–£ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ —Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã."
            
            elif "NoTranscriptFound" in error_msg:
                return None, False, "–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ."
            
            elif "Video unavailable" in error_msg:
                return None, False, "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ."
            
            elif "no element found" in error_msg:
                if attempt < max_retries - 1:
                    delay = BASE_DELAY * (2 ** attempt)
                    logger.warning(f"XML parsing error for {video_id}, attempt {attempt + 1}/{max_retries}: {error_msg}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —Å—É–±—Ç–∏—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            
            else:
                if attempt < max_retries - 1:
                    delay = BASE_DELAY * (2 ** attempt)
                    logger.warning(f"Error getting transcript for {video_id}, attempt {attempt + 1}/{max_retries}: {error_msg}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {error_msg}"
    
    return None, False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."

async def get_available_transcripts_with_retry(video_id: str, max_retries: int = MAX_RETRIES) -> tuple:
    """
    Get available transcripts list with retry logic
    Returns: (transcripts_list, success, error_message)
    """
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {video_id}, –ø–æ–ø—ã—Ç–∫–∞ 1/{max_retries}")
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit")
            # Check global rate limit
            if not await global_rate_limit_check():
                logger.info(f"‚è≥ –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limit –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥—É 2 —Å–µ–∫—É–Ω–¥—ã")
                await asyncio.sleep(2)
                continue
                
            logger.info(f"üåê –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ YouTube API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            ytt_api = YouTubeTranscriptApi()
            list_transcripts = ytt_api.list(video_id)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –æ—Ç YouTube API")
            return list(list_transcripts), True, None
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {error_msg}")
            
            if "Too Many Requests" in error_msg or "429" in error_msg:
                if attempt < max_retries - 1:
                    delay = min(BASE_DELAY * (2 ** attempt) + random.uniform(0, 1), MAX_DELAY)
                    logger.warning(f"Rate limit hit for video {video_id} (list), attempt {attempt + 1}/{max_retries}, waiting {delay:.1f}s")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç)."
            
            elif "Video unavailable" in error_msg:
                return None, False, "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ."
            
            else:
                if attempt < max_retries - 1:
                    delay = BASE_DELAY * (2 ** attempt)
                    logger.warning(f"Error listing transcripts for {video_id}, attempt {attempt + 1}/{max_retries}: {error_msg}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {error_msg}"
    
    return None, False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."

def build_language_keyboard(list_transcripts):
    buttons = []
    for transcript in list_transcripts:
        lang_code = transcript.language_code
        lang_name = transcript.language
        buttons.append([InlineKeyboardButton(f'{lang_name} ({lang_code})', callback_data=f'lang_{lang_code}')])
    return InlineKeyboardMarkup(buttons)

def build_action_keyboard():
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è: —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã –∏–ª–∏ —Å –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('üìÑ –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã', callback_data='action_subtitles')],
        [InlineKeyboardButton('ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data='action_ai_summary')],
        [InlineKeyboardButton('üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data='action_only_summary')]
    ])

def build_format_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏', callback_data='format_with_time')],
        [InlineKeyboardButton('–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫', callback_data='format_plain')]
    ])

def build_model_keyboard():
    """–í—ã–±–æ—Ä –ò–ò-–º–æ–¥–µ–ª–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    models = summarizer.get_available_models()
    buttons = []
    for i, model in enumerate(models[:6]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 –º–æ–¥–µ–ª–µ–π
        buttons.append([InlineKeyboardButton(f'ü§ñ {model}', callback_data=f'model_{i}')])
    buttons.append([InlineKeyboardButton('‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä (–ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è)', callback_data='model_auto')])
    return InlineKeyboardMarkup(buttons)

def build_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('üì∫ –ü–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã', callback_data='get_subs')],
        [InlineKeyboardButton('üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å', callback_data='voice_info')],
        [InlineKeyboardButton('üìö –ü–æ–º–æ—â—å', callback_data='help')],
        [InlineKeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info')],
        [InlineKeyboardButton('ü§ñ –û –±–æ—Ç–µ', callback_data='about')]
    ])

def format_subtitles(transcript, with_time=False):
    if with_time:
        return '\n'.join([
            f"[{int(item.start)//60:02}:{int(item.start)%60:02}] {item.text}" for item in transcript
        ])
    else:
        return '\n'.join([item.text for item in transcript])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_MESSAGE, reply_markup=build_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_MESSAGE, reply_markup=build_main_keyboard())

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ABOUT_MESSAGE, reply_markup=build_main_keyboard())

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(INFO_MESSAGE, reply_markup=build_main_keyboard())

async def subs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üì∫ **–ü–û–õ–£–ß–ï–ù–ò–ï –°–£–ë–¢–ò–¢–†–û–í**\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã!\n\n'
        'üéØ **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n'
        '‚Ä¢ üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã\n'
        '‚Ä¢ ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
        '‚Ä¢ üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n'
        'üìù **–§–æ—Ä–º–∞—Ç—ã:**\n'
        '‚Ä¢ –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏\n'
        '‚Ä¢ –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫\n\n'
        'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**'
    )

async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô**\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n'
        '‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**\n'
        '‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫\n'
        '‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n'
        '‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
        '‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
        '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)\n'
        '‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n'
        '‚Ä¢ –ß–µ—Ç–∫–∞—è —Ä–µ—á—å\n\n'
        'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # Check user rate limit
    if not await rate_limit_check(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - request_timestamps.get(user_id, 0))
        logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å {int(remaining_time)} —Å–µ–∫—É–Ω–¥")
        await update.message.reply_text(f'‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.')
        return

    text = update.message.text.strip()
    logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}...")
    
    video_id = extract_video_id(text)
    logger.info(f"üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π video_id: {video_id}")
    
    if not video_id:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text}")
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID.')
        return
    
    # Show processing message
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ {video_id}")
    processing_msg = await update.message.reply_text('üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö...')
    
    # Get available transcripts with retry logic
    logger.info(f"üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {video_id}")
    list_transcripts, success, error_msg = await get_available_transcripts_with_retry(video_id)
    
    if not success:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {error_msg}")
        await processing_msg.edit_text(f'‚ùå {error_msg}')
        return
    
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(list_transcripts)} —è–∑—ã–∫–æ–≤")
    
    if not list_transcripts:
        logger.warning(f"‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
        await processing_msg.edit_text('‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.')
        return
    
    # Save video info for user
    context.user_data['video_id'] = video_id
    context.user_data['list_transcripts'] = list_transcripts
    
    # If only one language - offer action directly
    if len(list_transcripts) == 1:
        lang_code = list_transcripts[0].language_code
        context.user_data['lang_code'] = lang_code
        logger.info(f"üéØ –û–¥–∏–Ω —è–∑—ã–∫ –Ω–∞–π–¥–µ–Ω: {lang_code}")
        await processing_msg.edit_text(
            f'‚úÖ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {list_transcripts[0].language} ({lang_code}). –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?',
            reply_markup=build_action_keyboard()
        )
    else:
        logger.info(f"üåç –ù–∞–π–¥–µ–Ω–æ {len(list_transcripts)} —è–∑—ã–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–±–æ—Ä")
        await processing_msg.edit_text('‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_language_keyboard(list_transcripts))

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # Check user rate limit
    if not await rate_limit_check(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - request_timestamps.get(user_id, 0))
        await update.message.reply_text(f'‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.')
        return
    
    # Check if voice transcription is available
    if not voice_transcriber.is_available():
        await update.message.reply_text(
            '‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n'
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SONIOX_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
        )
        return
    
    voice = update.message.voice
    if not voice:
        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        return
    
    # Check voice message duration and offer options for long messages
    if voice.duration > 300:  # –ë–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
        await update.message.reply_text(
            '‚ö†Ô∏è **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**\n\n'
            f'üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)\n'
            'üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 5 –º–∏–Ω—É—Ç\n\n'
            'üí° **–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:**\n'
            '‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ 5 –º–∏–Ω—É—Ç\n'
            '‚Ä¢ ‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π\n'
            '‚Ä¢ üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
            '‚Ä¢ üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é —á–∞—Å—Ç—å\n\n'
            'üîÑ **–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–π—á–∞—Å** (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π):',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('üé§ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å', callback_data=f'voice_force_{voice.file_id}')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
            ])
        )
        return
    elif voice.duration > 180:  # –ë–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            '‚ö†Ô∏è **–î–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n'
            f'üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)\n'
            '‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã\n\n'
            'üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n'
            '‚Ä¢ –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏\n'
            '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∑–≤—É–∫–∞\n\n'
            'üîÑ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?**',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'voice_continue_{voice.file_id}')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
            ])
        )
        return
    
    # Show processing message
    processing_msg = await update.message.reply_text('üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
    
    try:
        # Download voice file
        file = await context.bot.get_file(voice.file_id)
        
        # Create temporary file
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        # Download the file
        await file.download_to_drive(temp_path)
        
        # Transcribe voice message
        success, text, stats = await voice_transcriber.transcribe_voice_message(voice, temp_path)
        
        # Clean up temporary file
        try:
            os.unlink(temp_path)
        except:
            pass
        
        if success:
            # Format response
            response_parts = []
            response_parts.append("üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø:**")
            response_parts.append(text)
            
            # Add statistics
            if stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                response_parts.append(f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥")
                response_parts.append(f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {stats.get('text_length', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats.get('tokens_count', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('confidence_avg', 0):.2f}")
            
            full_response = "\n".join(response_parts)
            
            # Send response
            if len(full_response) <= 4000:
                await processing_msg.edit_text(full_response, parse_mode='Markdown')
            else:
                await processing_msg.edit_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                timestamp = int(time.time())
                file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                await update.message.reply_document(InputFile(file))
        else:
            await processing_msg.edit_text(f'‚ùå {text}')
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        await processing_msg.edit_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}')

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.replace('lang_', '')
    context.user_data['lang_code'] = lang_code
    await query.edit_message_text(f'–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', reply_markup=build_action_keyboard())

async def action_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data.replace('action_', '')
    context.user_data['action'] = action
    
    if action == 'subtitles':
        # –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã - —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_format_keyboard())
    elif action in ['ai_summary', 'only_summary']:
        # –ù—É–∂–Ω–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è - –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò-–º–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:', reply_markup=build_model_keyboard())

async def model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'model_auto':
        model_index = 0  # –ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else:
        model_index = int(query.data.replace('model_', ''))
    
    context.user_data['model_index'] = model_index
    
    action = context.user_data.get('action')
    if action == 'ai_summary':
        # –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò: –Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_format_keyboard())
    else:
        # –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        context.user_data['with_time'] = False  # –î–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤–∞–∂–µ–Ω
        await process_request(query, context)

async def format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    with_time = query.data == 'format_with_time'
    context.user_data['with_time'] = with_time
    await process_request(query, context)

async def process_request(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–ª—É—á–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∏/–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é"""
    video_id = context.user_data.get('video_id')
    lang_code = context.user_data.get('lang_code')
    action = context.user_data.get('action')
    with_time = context.user_data.get('with_time', False)
    model_index = context.user_data.get('model_index', 0)
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: video_id={video_id}, lang_code={lang_code}, action={action}, with_time={with_time}")
    
    if not video_id or not lang_code:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç video_id –∏–ª–∏ lang_code: video_id={video_id}, lang_code={lang_code}")
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ —è–∑—ã–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
        return
    
    # Show processing message
    logger.info(f"üìù –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
    await query.edit_message_text('üîÑ –ü–æ–ª—É—á–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã...')
    
    # Get transcript with retry logic
    logger.info(f"üé¨ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {video_id} –Ω–∞ —è–∑—ã–∫–µ {lang_code}")
    transcript, success, error_msg = await get_transcript_with_retry(video_id, [lang_code])
    
    if not success:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã: {error_msg}")
        await query.edit_message_text(f'‚ùå {error_msg}')
        return
    
    logger.info(f"‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {len(transcript)} —Å—Ç—Ä–æ–∫")
    subtitles = format_subtitles(transcript, with_time=with_time)
    raw_subtitles = format_subtitles(transcript, with_time=False)  # –î–ª—è –ò–ò –±–µ–∑ –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    
    format_str = '—Å –º–µ—Ç–∫–∞–º–∏' if with_time else '–±–µ–∑ –º–µ—Ç–æ–∫'
    
    if action == 'subtitles':
        # –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã
        logger.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã")
        await send_subtitles(query, subtitles, video_id, lang_code, format_str, len(transcript))
    
    elif action in ['ai_summary', 'only_summary']:
        # –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        await query.edit_message_text('ü§ñ –°–æ–∑–¥–∞—é –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2-3 –º–∏–Ω—É—Ç.')
        
        try:
            summary, stats = await summarizer.summarize_text(raw_subtitles, model_index)
            logger.info(f"‚úÖ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_parts = []
            
            if action == 'ai_summary':
                # –°—É–±—Ç–∏—Ç—Ä—ã + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                response_parts.append("üìÑ **–°–£–ë–¢–ò–¢–†–´:**")
                if len(subtitles) <= 2000:
                    response_parts.append(subtitles[:2000])
                    if len(subtitles) > 2000:
                        response_parts.append("... (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ñ–∞–π–ª–µ)")
                else:
                    response_parts.append("(–°—É–±—Ç–∏—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª–æ–º)")
            
            response_parts.append("\nü§ñ **–ò–ò-–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:**")
            response_parts.append(summary)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
            response_parts.append(f"‚Ä¢ –ú–æ–¥–µ–ª—å: {stats.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            response_parts.append(f"‚Ä¢ –°—Ç—Ä–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(transcript)}")
            response_parts.append(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å—Ç–µ–π: {stats.get('chunks', 0)}")
            response_parts.append(f"‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {stats.get('original_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            response_parts.append(f"‚Ä¢ –†–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {stats.get('summary_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            full_response = "\n".join(response_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if len(full_response) <= 4000:
                await query.edit_message_text(full_response, parse_mode='Markdown')
            else:
                await query.edit_message_text("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                filename = await create_filename(video_id, "summary", lang_code)
                file.name = filename
                await query.message.reply_document(InputFile(file))
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã —Ñ–∞–π–ª–æ–º
            if action == 'ai_summary' and len(subtitles) > 2000:
                subs_file = BytesIO(subtitles.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                subs_filename = await create_filename(video_id, "subtitles", lang_code, format_str)
                subs_file.name = subs_filename
                await query.message.reply_document(
                    InputFile(subs_file), 
                    caption=f'–ü–æ–ª–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã\n–§–æ—Ä–º–∞—Ç: {format_str}'
                )
            
        except Exception as ai_error:
            logger.error(f'–û—à–∏–±–∫–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {ai_error}')
            await query.edit_message_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {ai_error}')

async def send_subtitles(query, subtitles, video_id, lang_code, format_str, transcript_count):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã"""
    stat_msg = f'–Ø–∑—ã–∫: {lang_code}\n–°—Ç—Ä–æ–∫: {transcript_count}\n–§–æ—Ä–º–∞—Ç: {format_str}'
    
    if len(subtitles) <= 4000:
        await query.edit_message_text(subtitles)
        await query.message.reply_text(stat_msg)
    else:
        file = BytesIO(subtitles.encode('utf-8'))
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = await create_filename(video_id, "subtitles", lang_code, format_str)
        file.name = filename
        await query.edit_message_text('–°—É–±—Ç–∏—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.')
        await query.message.reply_document(InputFile(file), caption=stat_msg)

async def main_keyboard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'help':
        await query.edit_message_text(HELP_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'get_subs':
        await query.edit_message_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID.')
    elif query.data == 'about':
        await query.edit_message_text(ABOUT_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'info':
        await query.edit_message_text(INFO_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'voice_info':
        await query.edit_message_text(
            'üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô**\n\n'
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n'
            '‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**\n'
            '‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫\n'
            '‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n'
            '‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
            '‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
            '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)\n'
            '‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n'
            '‚Ä¢ –ß–µ—Ç–∫–∞—è —Ä–µ—á—å\n\n'
            'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**',
            reply_markup=build_main_keyboard()
        )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.', reply_markup=build_main_keyboard())

async def voice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voice_cancel':
        await query.edit_message_text('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return
    
    elif query.data.startswith('voice_force_'):
        file_id = query.data.replace('voice_force_', '')
        await query.edit_message_text('‚ö†Ô∏è **–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç.')
        await process_voice_message_by_file_id(update, context, file_id, force=True)
    
    elif query.data.startswith('voice_continue_'):
        file_id = query.data.replace('voice_continue_', '')
        await query.edit_message_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        await process_voice_message_by_file_id(update, context, file_id, force=False)

async def process_voice_message_by_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str, force: bool = False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ file_id"""
    user_id = update.effective_user.id
    
    try:
        # Download voice file
        file = await context.bot.get_file(file_id)
        
        # Create temporary file
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        # Download the file
        await file.download_to_drive(temp_path)
        
        # Create a mock voice object for the transcriber
        class MockVoice:
            def __init__(self, file_id, duration=300):
                self.file_id = file_id
                self.duration = duration
        
        voice = MockVoice(file_id, duration=300 if force else 180)
        
        # Transcribe voice message
        success, text, stats = await voice_transcriber.transcribe_voice_message(voice, temp_path)
        
        # Clean up temporary file
        try:
            os.unlink(temp_path)
        except:
            pass
        
        if success:
            # Format response
            response_parts = []
            response_parts.append("üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø:**")
            if force:
                response_parts.append("‚ö†Ô∏è *–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ*")
            response_parts.append(text)
            
            # Add statistics
            if stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                response_parts.append(f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥")
                response_parts.append(f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {stats.get('text_length', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats.get('tokens_count', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('confidence_avg', 0):.2f}")
            
            full_response = "\n".join(response_parts)
            
            # Send response
            if len(full_response) <= 4000:
                await update.callback_query.edit_message_text(full_response, parse_mode='Markdown')
            else:
                await update.callback_query.edit_message_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                timestamp = int(time.time())
                file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                await update.callback_query.message.reply_document(InputFile(file))
        else:
            await update.callback_query.edit_message_text(f'‚ùå {text}')
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ file_id: {e}')
        await update.callback_query.edit_message_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}')

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('about', about_command))
    app.add_handler(CommandHandler('info', info_command))
    app.add_handler(CommandHandler('subs', subs_command))
    app.add_handler(CommandHandler('voice', voice_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    app.add_handler(CallbackQueryHandler(language_callback, pattern=r'^lang_'))
    app.add_handler(CallbackQueryHandler(action_callback, pattern=r'^action_'))
    app.add_handler(CallbackQueryHandler(model_callback, pattern=r'^model_'))
    app.add_handler(CallbackQueryHandler(format_callback, pattern=r'^format_'))
    app.add_handler(CallbackQueryHandler(main_keyboard_callback, pattern=r'^(help|get_subs|about|info|voice_info)$'))
    app.add_handler(CallbackQueryHandler(voice_callback, pattern=r'^(voice_force_|voice_continue_|voice_cancel)$'))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    app.run_polling() 