import pytest
import asyncio
from unittest.mock import patch, MagicMock, AsyncMock
from telegram import Update, Message, User, Chat, CallbackQuery, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import bot
from summarizer import TextSummarizer


class TestBotUtilityFunctions:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def test_extract_video_id_youtube_watch(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ —Å—Å—ã–ª–∫–∏ youtube.com/watch"""
        url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        video_id = bot.extract_video_id(url)
        assert video_id == "dQw4w9WgXcQ"
    
    def test_extract_video_id_youtu_be(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ youtu.be"""
        url = "https://youtu.be/dQw4w9WgXcQ"
        video_id = bot.extract_video_id(url)
        assert video_id == "dQw4w9WgXcQ"
    
    def test_extract_video_id_embed(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ embed —Å—Å—ã–ª–∫–∏"""
        url = "https://www.youtube.com/embed/dQw4w9WgXcQ"
        video_id = bot.extract_video_id(url)
        assert video_id == "dQw4w9WgXcQ"
    
    def test_extract_video_id_direct(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –ø—Ä—è–º–æ–≥–æ ID"""
        video_id = bot.extract_video_id("dQw4w9WgXcQ")
        assert video_id == "dQw4w9WgXcQ"
    
    def test_extract_video_id_invalid(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
        invalid_urls = [
            "https://www.google.com",
            "not a url",
            "https://youtube.com/invalid",
            "shortid"
        ]
        
        for url in invalid_urls:
            video_id = bot.extract_video_id(url)
            assert video_id is None
    
    @patch('bot.YouTubeTranscriptApi.list_transcripts')
    def test_get_available_transcripts_success(self, mock_list):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        mock_transcript = MagicMock()
        mock_transcript.language_code = 'ru'
        mock_transcript.language = 'Russian'
        mock_list.return_value = [mock_transcript]
        
        result = bot.get_available_transcripts("test_video_id")
        
        assert result is not None
        mock_list.assert_called_once_with("test_video_id")
    
    @patch('bot.YouTubeTranscriptApi.list_transcripts')
    def test_get_available_transcripts_error(self, mock_list):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        mock_list.side_effect = Exception("API Error")
        
        result = bot.get_available_transcripts("test_video_id")
        
        assert result is None
    
    def test_format_subtitles_with_time(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        transcript = [
            {'start': 0.0, 'text': '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞'},
            {'start': 65.5, 'text': '–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞'}
        ]
        
        result = bot.format_subtitles(transcript, with_time=True)
        
        expected = "[00:00] –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n[01:05] –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
        assert result == expected
    
    def test_format_subtitles_plain(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
        transcript = [
            {'start': 0.0, 'text': '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞'},
            {'start': 65.5, 'text': '–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞'}
        ]
        
        result = bot.format_subtitles(transcript, with_time=False)
        
        expected = "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
        assert result == expected


class TestBotKeyboards:
    """–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    def test_build_language_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        mock_transcripts = []
        for lang_code, lang_name in [('ru', 'Russian'), ('en', 'English')]:
            transcript = MagicMock()
            transcript.language_code = lang_code
            transcript.language = lang_name
            mock_transcripts.append(transcript)
        
        keyboard = bot.build_language_keyboard(mock_transcripts)
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 2
        assert keyboard.inline_keyboard[0][0].text == "Russian (ru)"
        assert keyboard.inline_keyboard[0][0].callback_data == "lang_ru"
    
    def test_build_action_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        keyboard = bot.build_action_keyboard()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
        texts = [row[0].text for row in keyboard.inline_keyboard]
        assert "üìÑ –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã" in texts
        assert "ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è" in texts
        assert "üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è" in texts
    
    def test_build_format_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
        keyboard = bot.build_format_keyboard()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 2
        
        texts = [row[0].text for row in keyboard.inline_keyboard]
        assert "–° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏" in texts
        assert "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫" in texts
    
    @patch('bot.summarizer')
    def test_build_model_keyboard(self, mock_summarizer):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        mock_models = ['model1', 'model2', 'model3', 'model4', 'model5', 'model6', 'model7']
        mock_summarizer.get_available_models.return_value = mock_models
        
        keyboard = bot.build_model_keyboard()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        # 6 –º–æ–¥–µ–ª–µ–π + –∫–Ω–æ–ø–∫–∞ "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä"
        assert len(keyboard.inline_keyboard) == 7


class TestBotHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    @pytest.fixture
    def mock_update(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock Update"""
        update = MagicMock(spec=Update)
        update.effective_user = MagicMock(spec=User)
        update.effective_user.id = 123456
        update.message = MagicMock(spec=Message)
        update.message.reply_text = AsyncMock()
        update.message.text = "test message"
        return update
    
    @pytest.fixture
    def mock_context(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock Context"""
        context = MagicMock(spec=ContextTypes.DEFAULT_TYPE)
        context.user_data = {}
        return context
    
    @pytest.mark.asyncio
    async def test_start_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start"""
        await bot.start(mock_update, mock_context)
        
        mock_update.message.reply_text.assert_called_once()
        call_args = mock_update.message.reply_text.call_args
        assert bot.START_MESSAGE in call_args[0]
    
    @pytest.mark.asyncio
    async def test_help_handler(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /help"""
        await bot.help_command(mock_update, mock_context)
        
        mock_update.message.reply_text.assert_called_once()
        call_args = mock_update.message.reply_text.call_args
        assert bot.HELP_MESSAGE in call_args[0]
    
    @pytest.mark.asyncio
    async def test_handle_message_rate_limit(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –≤ handle_message —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ rate limiting"""
        import time
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
        mock_update.message.text = "https://youtu.be/dQw4w9WgXcQ"
        mock_context.user_data = {}
        
        # Mock the processing message
        mock_processing_msg = MagicMock()
        mock_processing_msg.edit_text = AsyncMock()
        mock_update.message.reply_text.return_value = mock_processing_msg
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        with patch('bot.rate_limit_check', return_value=True):
            with patch('bot.get_available_transcripts_with_retry') as mock_get_transcripts:
                mock_transcript = MagicMock()
                mock_transcript.language_code = 'ru'
                mock_transcript.language = 'Russian'
                mock_get_transcripts.return_value = ([mock_transcript], True, None)
                
                await bot.handle_message(mock_update, mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
                # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - processing message
                mock_update.message.reply_text.assert_called_once_with('üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö...')
                # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ edit_text
                mock_processing_msg.edit_text.assert_called_once()
                call_args = mock_processing_msg.edit_text.call_args[0][0]
                assert "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?" in call_args
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        with patch('bot.rate_limit_check', return_value=False):
            await bot.handle_message(mock_update, mock_context)
            
            # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ reply_text –¥–ª—è –æ—à–∏–±–∫–∏
            assert mock_update.message.reply_text.call_count >= 2
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ (–æ—à–∏–±–∫–∞ rate limit)
            last_call_args = mock_update.message.reply_text.call_args[0][0]
            assert "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤" in last_call_args
    
    @pytest.mark.asyncio
    async def test_handle_message_invalid_url(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        mock_update.message.text = "invalid url"
        mock_context.user_data = {}
        
        await bot.handle_message(mock_update, mock_context)
        
        mock_update.message.reply_text.assert_called_once()
        call_args = mock_update.message.reply_text.call_args[0][0]
        assert "–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É" in call_args
    
    @pytest.mark.asyncio
    @patch('bot.get_available_transcripts_with_retry')
    async def test_handle_message_no_transcripts(self, mock_get_transcripts, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        mock_update.message.text = "https://youtu.be/dQw4w9WgXcQ"
        mock_context.user_data = {}
        mock_get_transcripts.return_value = (None, False, "–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # Mock the processing message
        mock_processing_msg = MagicMock()
        mock_processing_msg.edit_text = AsyncMock()
        mock_update.message.reply_text.return_value = mock_processing_msg
        
        # Mock rate limiting to allow the request
        with patch('bot.rate_limit_check', return_value=True):
            await bot.handle_message(mock_update, mock_context)
            
            # First call should be processing message
            mock_update.message.reply_text.assert_called_once_with('üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö...')
            # Second call should be error message
            mock_processing_msg.edit_text.assert_called_once_with('‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    
    @pytest.mark.asyncio
    @patch('bot.get_available_transcripts_with_retry')
    async def test_handle_message_single_language(self, mock_get_transcripts, mock_update, mock_context):
        """–¢–µ—Å—Ç —Å –æ–¥–Ω–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º"""
        mock_update.message.text = "https://youtu.be/dQw4w9WgXcQ"
        mock_context.user_data = {}
        
        mock_transcript = MagicMock()
        mock_transcript.language_code = 'ru'
        mock_transcript.language = 'Russian'
        mock_get_transcripts.return_value = ([mock_transcript], True, None)
        
        # Mock the processing message
        mock_processing_msg = MagicMock()
        mock_processing_msg.edit_text = AsyncMock()
        mock_update.message.reply_text.return_value = mock_processing_msg
        
        # Mock rate limiting to allow the request
        with patch('bot.rate_limit_check', return_value=True):
            await bot.handle_message(mock_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            assert mock_context.user_data['lang_code'] == 'ru'
            assert mock_context.user_data['video_id'] == 'dQw4w9WgXcQ'
            
            # First call should be processing message
            mock_update.message.reply_text.assert_called_once_with('üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö...')
            # Second call should be result
            mock_processing_msg.edit_text.assert_called_once()
            call_args = mock_processing_msg.edit_text.call_args[0][0]
            assert "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?" in call_args
    
    @pytest.mark.asyncio
    async def test_language_callback(self, mock_context):
        """–¢–µ—Å—Ç callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        query = MagicMock(spec=CallbackQuery)
        query.answer = AsyncMock()
        query.data = "lang_en"
        query.edit_message_text = AsyncMock()
        
        update = MagicMock(spec=Update)
        update.callback_query = query
        
        await bot.language_callback(update, mock_context)
        
        assert mock_context.user_data['lang_code'] == 'en'
        query.answer.assert_called_once()
        query.edit_message_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_action_callback_subtitles_only(self, mock_context):
        """–¢–µ—Å—Ç callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è '—Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã'"""
        query = MagicMock(spec=CallbackQuery)
        query.answer = AsyncMock()
        query.data = "action_subtitles"
        query.edit_message_text = AsyncMock()
        
        update = MagicMock(spec=Update)
        update.callback_query = query
        
        await bot.action_callback(update, mock_context)
        
        assert mock_context.user_data['action'] == 'subtitles'
        query.edit_message_text.assert_called_once()
        call_args = query.edit_message_text.call_args[0][0]
        assert "—Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤" in call_args
    
    @pytest.mark.asyncio
    async def test_action_callback_ai_summary(self, mock_context):
        """–¢–µ—Å—Ç callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è '–ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è'"""
        query = MagicMock(spec=CallbackQuery)
        query.answer = AsyncMock()
        query.data = "action_ai_summary"
        query.edit_message_text = AsyncMock()
        
        update = MagicMock(spec=Update)
        update.callback_query = query
        
        await bot.action_callback(update, mock_context)
        
        assert mock_context.user_data['action'] == 'ai_summary'
        query.edit_message_text.assert_called_once()
        call_args = query.edit_message_text.call_args[0][0]
        assert "–ò–ò-–º–æ–¥–µ–ª—å" in call_args
    
    @pytest.mark.asyncio 
    async def test_model_callback_auto(self, mock_context):
        """–¢–µ—Å—Ç callback –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        query = MagicMock(spec=CallbackQuery)
        query.answer = AsyncMock()
        query.data = "model_auto"
        query.edit_message_text = AsyncMock()
        
        update = MagicMock(spec=Update)
        update.callback_query = query
        
        mock_context.user_data = {'action': 'only_summary'}
        
        with patch('bot.process_request', new_callable=AsyncMock) as mock_process:
            await bot.model_callback(update, mock_context)
        
        assert mock_context.user_data['model_index'] == 0
        mock_process.assert_called_once_with(query, mock_context)
    
    @pytest.mark.asyncio
    async def test_format_callback(self, mock_context):
        """–¢–µ—Å—Ç callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
        query = MagicMock(spec=CallbackQuery)
        query.answer = AsyncMock()
        query.data = "format_with_time"
        
        update = MagicMock(spec=Update)
        update.callback_query = query
        
        with patch('bot.process_request', new_callable=AsyncMock) as mock_process:
            await bot.format_callback(update, mock_context)
        
        assert mock_context.user_data['with_time'] is True
        mock_process.assert_called_once_with(query, mock_context)


class TestBotProcessRequest:
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    @pytest.fixture
    def mock_query(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è mock CallbackQuery"""
        query = MagicMock(spec=CallbackQuery)
        query.edit_message_text = AsyncMock()
        query.message = MagicMock()
        query.message.reply_text = AsyncMock()
        query.message.reply_document = AsyncMock()
        return query
    
    @pytest.fixture
    def mock_context_with_data(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        context = MagicMock()
        context.user_data = {
            'video_id': 'dQw4w9WgXcQ',
            'lang_code': 'ru',
            'action': 'subtitles',
            'with_time': False,
            'model_index': 0
        }
        return context
    
    @pytest.mark.asyncio
    async def test_process_request_missing_data(self, mock_query):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
        context = MagicMock()
        context.user_data = {}
        
        await bot.process_request(mock_query, context)
        
        mock_query.edit_message_text.assert_called_once()
        call_args = mock_query.edit_message_text.call_args[0][0]
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ —è–∑—ã–∫" in call_args
    
    @pytest.mark.asyncio
    @patch('bot.get_transcript_with_retry')
    @patch('bot.send_subtitles')
    async def test_process_request_subtitles_only(self, mock_send_subs, mock_get_transcript, 
                                                mock_query, mock_context_with_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        mock_transcript = [
            {'start': 0.0, 'text': '–¢–µ—Å—Ç'},
            {'start': 1.0, 'text': '—Å—É–±—Ç–∏—Ç—Ä–æ–≤'}
        ]
        mock_get_transcript.return_value = (mock_transcript, True, None)
        mock_send_subs.return_value = AsyncMock()
        
        await bot.process_request(mock_query, mock_context_with_data)
        
        mock_get_transcript.assert_called_once_with('dQw4w9WgXcQ', ['ru'])
        mock_send_subs.assert_called_once()
    
    @pytest.mark.asyncio
    @patch('bot.get_transcript_with_retry')
    @patch('bot.summarizer.summarize_text')
    async def test_process_request_ai_summary(self, mock_summarize, mock_get_transcript,
                                            mock_query, mock_context_with_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
        mock_context_with_data.user_data['action'] = 'only_summary'
        
        mock_transcript = [{'start': 0.0, 'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç'}]
        mock_get_transcript.return_value = (mock_transcript, True, None)
        
        mock_summary = "–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ"
        mock_stats = {
            'model': 'test_model',
            'chunks': 1,
            'original_length': 100,
            'summary_length': 50
        }
        mock_summarize.return_value = (mock_summary, mock_stats)
        
        await bot.process_request(mock_query, mock_context_with_data)
        
        mock_summarize.assert_called_once()
        mock_query.edit_message_text.assert_called()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å
        calls = mock_query.edit_message_text.call_args_list
        assert any("–°–æ–∑–¥–∞—é –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é" in str(call) for call in calls)
    
    @pytest.mark.asyncio
    @patch('bot.get_transcript_with_retry')
    async def test_process_request_transcript_error(self, mock_get_transcript, mock_query, mock_context_with_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        mock_get_transcript.return_value = (None, False, "–£ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ —Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        
        await bot.process_request(mock_query, mock_context_with_data)
        
        mock_query.edit_message_text.assert_called_once()
        call_args = mock_query.edit_message_text.call_args[0][0]
        assert "—Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã" in call_args


class TestRateLimiting:
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π rate limiting"""
    
    def setup_method(self):
        """–°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        import bot
        bot.request_timestamps.clear()
        bot.global_last_request = 0
    
    @pytest.mark.asyncio
    async def test_rate_limit_check_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit"""
        user_id = 12345
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        result = await bot.rate_limit_check(user_id)
        assert result is True
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        result = await bot.rate_limit_check(user_id)
        assert result is False
    
    @pytest.mark.asyncio
    async def test_rate_limit_check_after_interval(self):
        """–¢–µ—Å—Ç rate limit –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        user_id = 12345
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        result = await bot.rate_limit_check(user_id)
        assert result is True
        
        # –ñ–¥–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        import time
        time.sleep(16)  # MIN_REQUEST_INTERVAL = 15
        
        # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        result = await bot.rate_limit_check(user_id)
        assert result is True
    
    @pytest.mark.asyncio
    async def test_global_rate_limit_check_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit"""
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        result = await bot.global_rate_limit_check()
        assert result is True
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        result = await bot.global_rate_limit_check()
        assert result is False
    
    @pytest.mark.asyncio
    async def test_global_rate_limit_check_after_interval(self):
        """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        result = await bot.global_rate_limit_check()
        assert result is True
        
        # –ñ–¥–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        import time
        time.sleep(3)  # 2 seconds minimum interval
        
        # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        result = await bot.global_rate_limit_check()
        assert result is True
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.get_transcript')
    @patch('bot.global_rate_limit_check')
    async def test_get_transcript_with_retry_success(self, mock_global_check, mock_get_transcript):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å retry"""
        mock_global_check.return_value = True
        mock_get_transcript.return_value = [{'start': 0, 'text': 'Test'}]
        
        result, success, error = await bot.get_transcript_with_retry("test_video", ["en"])
        
        assert success is True
        assert error is None
        assert result == [{'start': 0, 'text': 'Test'}]
        mock_get_transcript.assert_called_once_with("test_video", languages=["en"])
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.get_transcript')
    @patch('bot.global_rate_limit_check')
    async def test_get_transcript_with_retry_rate_limit(self, mock_global_check, mock_get_transcript):
        """–¢–µ—Å—Ç retry –ø—Ä–∏ rate limit"""
        mock_global_check.return_value = True
        mock_get_transcript.side_effect = Exception("Too Many Requests")
        
        result, success, error = await bot.get_transcript_with_retry("test_video", ["en"], max_retries=1)
        
        assert success is False
        assert "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in error
        assert result is None
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.get_transcript')
    @patch('bot.global_rate_limit_check')
    async def test_get_transcript_with_retry_transcripts_disabled(self, mock_global_check, mock_get_transcript):
        """–¢–µ—Å—Ç retry –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–∞—Ö"""
        from youtube_transcript_api import TranscriptsDisabled
        
        mock_global_check.return_value = True
        mock_get_transcript.side_effect = TranscriptsDisabled("test_video_id")
        
        result, success, error = await bot.get_transcript_with_retry("test_video", ["en"], max_retries=1)
        
        assert success is False
        assert "Subtitles are disabled" in error or "—Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã" in error
        assert result is None
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.get_transcript')
    @patch('bot.global_rate_limit_check')
    async def test_get_transcript_with_retry_no_transcript_found(self, mock_global_check, mock_get_transcript):
        """–¢–µ—Å—Ç retry –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        from youtube_transcript_api import NoTranscriptFound
        
        mock_global_check.return_value = True
        mock_get_transcript.side_effect = NoTranscriptFound("test_video_id", ["en"], {})
        
        result, success, error = await bot.get_transcript_with_retry("test_video", ["en"], max_retries=1)
        
        assert success is False
        assert "No transcripts were found" in error or "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in error
        assert result is None
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.list_transcripts')
    @patch('bot.global_rate_limit_check')
    async def test_get_available_transcripts_with_retry_success(self, mock_global_check, mock_list_transcripts):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å retry"""
        mock_global_check.return_value = True
        
        mock_transcript = MagicMock()
        mock_transcript.language_code = 'en'
        mock_transcript.language = 'English'
        mock_list_transcripts.return_value = [mock_transcript]
        
        result, success, error = await bot.get_available_transcripts_with_retry("test_video")
        
        assert success is True
        assert error is None
        assert len(result) == 1
        assert result[0].language_code == 'en'
        mock_list_transcripts.assert_called_once_with("test_video")
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.list_transcripts')
    @patch('bot.global_rate_limit_check')
    async def test_get_available_transcripts_with_retry_rate_limit(self, mock_global_check, mock_list_transcripts):
        """–¢–µ—Å—Ç retry –ø—Ä–∏ rate limit –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        mock_global_check.return_value = True
        mock_list_transcripts.side_effect = Exception("Too Many Requests")
        
        result, success, error = await bot.get_available_transcripts_with_retry("test_video", max_retries=1)
        
        assert success is False
        assert "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in error
        assert result is None
    
    @pytest.mark.asyncio
    @patch('bot.YouTubeTranscriptApi.list_transcripts')
    @patch('bot.global_rate_limit_check')
    async def test_get_available_transcripts_with_retry_video_unavailable(self, mock_global_check, mock_list_transcripts):
        """–¢–µ—Å—Ç retry –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º –≤–∏–¥–µ–æ"""
        mock_global_check.return_value = True
        mock_list_transcripts.side_effect = Exception("Video unavailable")
        
        result, success, error = await bot.get_available_transcripts_with_retry("test_video", max_retries=1)
        
        assert success is False
        assert "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" in error
        assert result is None
    
    @pytest.mark.asyncio
    async def test_rate_limit_check_different_users(self):
        """–¢–µ—Å—Ç rate limit –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user1 = 12345
        user2 = 67890
        
        # –û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        result1 = await bot.rate_limit_check(user1)
        result2 = await bot.rate_limit_check(user2)
        
        assert result1 is True
        assert result2 is True
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        result1 = await bot.rate_limit_check(user1)
        result2 = await bot.rate_limit_check(user2)
        
        assert result1 is False
        assert result2 is False
    
    @pytest.mark.asyncio
    async def test_global_rate_limit_concurrent_requests(self):
        """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        import asyncio
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async def make_request():
            return await bot.global_rate_limit_check()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = [make_request() for _ in range(5)]
        results = await asyncio.gather(*tasks)
        
        # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        assert sum(results) == 1 