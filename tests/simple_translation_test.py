#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from summarizer import TextSummarizer

def test_detect_language():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞...")
    
    summarizer = TextSummarizer()
    
    # –¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    russian_text = "–≠—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"
    result = summarizer.detect_language(russian_text)
    print(f"–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç: '{russian_text[:20]}...' -> {result}")
    assert result == 'ru', f"–û–∂–∏–¥–∞–ª—Å—è 'ru', –ø–æ–ª—É—á–µ–Ω '{result}'"
    
    # –¢–µ—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    english_text = "This is English text with Latin characters"
    result = summarizer.detect_language(english_text)
    print(f"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç: '{english_text[:20]}...' -> {result}")
    assert result == 'en', f"–û–∂–∏–¥–∞–ª—Å—è 'en', –ø–æ–ª—É—á–µ–Ω '{result}'"
    
    # –¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    mixed_text = "This is mixed text with some —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞"
    result = summarizer.detect_language(mixed_text)
    print(f"–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{mixed_text[:20]}...' -> {result}")
    assert result in ['ru', 'en', 'other'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'"
    
    # –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    short_text = "Hello"
    result = summarizer.detect_language(short_text)
    print(f"–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç: '{short_text}' -> {result}")
    assert result == 'en', f"–û–∂–∏–¥–∞–ª—Å—è 'en', –ø–æ–ª—É—á–µ–Ω '{result}'"
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    empty_text = ""
    result = summarizer.detect_language(empty_text)
    print(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç: -> {result}")
    assert result == 'other', f"–û–∂–∏–¥–∞–ª—Å—è 'other', –ø–æ–ª—É—á–µ–Ω '{result}'"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

async def test_translate_to_russian():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    print("\nüåç –¢–µ—Å—Ç–∏—Ä—É—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
    
    summarizer = TextSummarizer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á
    if not summarizer.api_key:
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
        return
    
    english_text = "Hello world! This is a test message."
    result = await summarizer.translate_to_russian(english_text, 'en')
    print(f"–ü–µ—Ä–µ–≤–æ–¥: '{english_text}' -> '{result[:50]}...'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if result != english_text:
        print("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—É–ª –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    print("‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def test_summarize_with_language_detection():
    """–¢–µ—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞...")
    
    summarizer = TextSummarizer()
    
    # –¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    russian_text = "–≠—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    result, stats = await summarizer.summarize_text(russian_text)
    print(f"–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç -> —è–∑—ã–∫: {stats.get('source_language', 'unknown')}")
    assert stats.get('source_language') == 'ru', f"–û–∂–∏–¥–∞–ª—Å—è 'ru', –ø–æ–ª—É—á–µ–Ω '{stats.get('source_language')}'"
    
    # –¢–µ—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    english_text = "This is English text for testing. It contains several sentences."
    result, stats = await summarizer.summarize_text(english_text)
    print(f"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç -> —è–∑—ã–∫: {stats.get('source_language', 'unknown')}")
    assert stats.get('source_language') == 'en', f"–û–∂–∏–¥–∞–ª—Å—è 'en', –ø–æ–ª—É—á–µ–Ω '{stats.get('source_language')}'"
    
    print("‚úÖ –¢–µ—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞...")
    
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_detect_language()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await test_translate_to_russian()
        await test_summarize_with_language_detection()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    import asyncio
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 