#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Telegram YouTube Subtitles Bot
–ó–∞–ø—É—Å–∫: python simple_tests.py
"""

import sys
import os
import re
from io import StringIO

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from bot import extract_video_id, format_subtitles, MIN_REQUEST_INTERVAL
    from summarizer import TextSummarizer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bot.py –∏ summarizer.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)


class SimpleTestRunner:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ pytest"""
    
    def __init__(self):
        self.tests_run = 0
        self.tests_passed = 0
        self.tests_failed = 0
        self.failed_tests = []
    
    def test(self, name, test_func):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
        self.tests_run += 1
        print(f"üß™ –¢–µ—Å—Ç: {name}")
        
        try:
            test_func()
            print("   ‚úÖ –ü–†–û–ô–î–ï–ù")
            self.tests_passed += 1
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            self.tests_failed += 1
            self.failed_tests.append(name)
    
    def assert_equal(self, actual, expected, message=""):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π"""
        if actual != expected:
            raise AssertionError(f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {actual}. {message}")
    
    def assert_true(self, condition, message=""):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–∏—è"""
        if not condition:
            raise AssertionError(f"–£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True. {message}")
    
    def assert_false(self, condition, message=""):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∂–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–∏—è"""
        if condition:
            raise AssertionError(f"–£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False. {message}")
    
    def assert_not_none(self, value, message=""):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ None"""
        if value is None:
            raise AssertionError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None. {message}")
    
    def summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*50)
        print(f"üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.tests_failed}")
        
        if self.tests_failed == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            print(f"\nüí• –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã: {', '.join(self.failed_tests)}")
            return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
runner = SimpleTestRunner()


def test_extract_video_id_youtube_watch():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ YouTube"""
    url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    video_id = extract_video_id(url)
    runner.assert_equal(video_id, "dQw4w9WgXcQ")


def test_extract_video_id_youtu_be():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ youtu.be"""
    url = "https://youtu.be/dQw4w9WgXcQ"
    video_id = extract_video_id(url)
    runner.assert_equal(video_id, "dQw4w9WgXcQ")


def test_extract_video_id_embed():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ embed —Å—Å—ã–ª–∫–∏"""
    url = "https://www.youtube.com/embed/dQw4w9WgXcQ"
    video_id = extract_video_id(url)
    runner.assert_equal(video_id, "dQw4w9WgXcQ")


def test_extract_video_id_direct():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –ø—Ä—è–º–æ–≥–æ ID"""
    video_id = extract_video_id("dQw4w9WgXcQ")
    runner.assert_equal(video_id, "dQw4w9WgXcQ")


def test_extract_video_id_invalid():
    """–¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    invalid_urls = [
        "https://www.google.com",
        "not a url",
        "https://youtube.com/invalid",
        "shortid"
    ]
    
    for url in invalid_urls:
        video_id = extract_video_id(url)
        runner.assert_equal(video_id, None, f"URL: {url}")


def test_format_subtitles_with_time():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    transcript = [
        {'start': 0.0, 'text': '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞'},
        {'start': 65.5, 'text': '–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞'}
    ]
    
    result = format_subtitles(transcript, with_time=True)
    expected = "[00:00] –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n[01:05] –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    runner.assert_equal(result, expected)


def test_format_subtitles_plain():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
    transcript = [
        {'start': 0.0, 'text': '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞'},
        {'start': 65.5, 'text': '–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞'}
    ]
    
    result = format_subtitles(transcript, with_time=False)
    expected = "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    runner.assert_equal(result, expected)


def test_summarizer_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á
    os.environ['OPENROUTER_API_KEY'] = 'test_key'
    
    summarizer = TextSummarizer()
    runner.assert_equal(summarizer.api_key, 'test_key')
    runner.assert_equal(summarizer.chunk_size, 1000)
    runner.assert_true(len(summarizer.models) >= 8)


def test_summarizer_split_text_short():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    summarizer = TextSummarizer()
    text = "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞"
    chunks = summarizer.split_text(text, max_len=100)
    
    runner.assert_equal(len(chunks), 1)
    runner.assert_equal(chunks[0], text)


def test_summarizer_split_text_long():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    summarizer = TextSummarizer()
    words = ["—Å–ª–æ–≤–æ"] * 100
    text = " ".join(words)
    chunks = summarizer.split_text(text, max_len=500)
    
    runner.assert_true(len(chunks) > 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for chunk in chunks:
        runner.assert_true(len(chunk) <= 500)


def test_summarizer_get_models():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
    summarizer = TextSummarizer()
    models = summarizer.get_available_models()
    
    runner.assert_true(isinstance(models, list))
    runner.assert_true(len(models) >= 8)
    runner.assert_true(all(isinstance(model, str) for model in models))


def test_constants():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –±–æ—Ç–∞"""
    runner.assert_true(MIN_REQUEST_INTERVAL > 0)
    runner.assert_true(isinstance(MIN_REQUEST_INTERVAL, (int, float)))


def test_regex_patterns():
    """–¢–µ—Å—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    from bot import YOUTUBE_REGEX
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã YouTube —Å—Å—ã–ª–æ–∫
    test_cases = [
        ("https://www.youtube.com/watch?v=dQw4w9WgXcQ", "dQw4w9WgXcQ"),
        ("https://youtu.be/dQw4w9WgXcQ", "dQw4w9WgXcQ"),
        ("https://www.youtube.com/embed/dQw4w9WgXcQ", "dQw4w9WgXcQ"),
        ("dQw4w9WgXcQ", "dQw4w9WgXcQ"),
    ]
    
    for url, expected_id in test_cases:
        match = re.search(YOUTUBE_REGEX, url)
        if match:
            runner.assert_equal(match.group(1), expected_id, f"URL: {url}")
        else:
            raise AssertionError(f"–ù–µ –Ω–∞–π–¥–µ–Ω ID –≤ URL: {url}")


def test_empty_inputs():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID
    video_id = extract_video_id("")
    runner.assert_equal(video_id, None)
    
    # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    result = format_subtitles([], with_time=False)
    runner.assert_equal(result, "")
    
    result = format_subtitles([], with_time=True)
    runner.assert_equal(result, "")


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π ID
    video_id = extract_video_id("short")
    runner.assert_equal(video_id, None)
    
    # –°—É–±—Ç–∏—Ç—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    transcript = [{'start': 0, 'text': '–¢–µ—Å—Ç'}]
    result = format_subtitles(transcript, with_time=True)
    runner.assert_equal(result, "[00:00] –¢–µ—Å—Ç")
    
    # –†–∞–∑–±–∏–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    summarizer = TextSummarizer()
    chunks = summarizer.split_text("", max_len=100)
    runner.assert_equal(len(chunks), 0)


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–´–• –¢–ï–°–¢–û–í")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ youtube.com/watch", test_extract_video_id_youtube_watch),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ youtu.be", test_extract_video_id_youtu_be),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ embed", test_extract_video_id_embed),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ ID", test_extract_video_id_direct),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", test_extract_video_id_invalid),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏", test_format_subtitles_with_time),
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –º–µ—Ç–æ–∫", test_format_subtitles_plain),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞", test_summarizer_init),
        ("–†–∞–∑–±–∏–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", test_summarizer_split_text_short),
        ("–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", test_summarizer_split_text_long),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π", test_summarizer_get_models),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç", test_constants),
        ("–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è", test_regex_patterns),
        ("–ü—É—Å—Ç—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", test_empty_inputs),
        ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", test_edge_cases),
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    for name, test_func in tests:
        runner.test(name, test_func)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    success = runner.summary()
    
    return success


if __name__ == "__main__":
    print("üìã –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Telegram YouTube Subtitles Bot")
    print("–≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API")
    print()
    
    try:
        success = run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 