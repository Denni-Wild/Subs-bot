Добро пожаловать в наш новый видеоурок по программированию.
Сегодня мы будем изучать основы Python и создадим простую программу.
Python - это мощный язык программирования, который используется во многих областях.
Он прост в изучении и имеет понятный синтаксис.

В этом видео мы рассмотрим:
- Установку Python на ваш компьютер
- Основные концепции программирования
- Создание первой программы
- Работу с переменными и типами данных

Начнем с установки. Скачайте Python с официального сайта python.org.
Выберите последнюю версию для вашей операционной системы.
После установки откройте командную строку и введите python --version.
Если вы видите версию Python, значит установка прошла успешно.

Теперь создадим нашу первую программу. Откройте любой текстовый редактор.
Создайте файл с расширением .py, например hello.py.
Напишите в нем: print("Привет, мир!")
Сохраните файл и запустите его через командную строку.

Это простая программа, которая выводит текст на экран.
Функция print() используется для вывода информации.
Текст в кавычках называется строкой или string.

Теперь давайте изучим переменные. Переменная - это контейнер для хранения данных.
В Python переменные создаются автоматически при присвоении значения.
Например: name = "Анна" создает переменную name со значением "Анна".
age = 25 создает переменную age с числовым значением.

Python поддерживает разные типы данных:
- Строки (str) - для текста
- Целые числа (int) - для целых чисел
- Числа с плавающей точкой (float) - для дробных чисел
- Булевы значения (bool) - True или False

Давайте создадим программу, которая использует переменные.
name = input("Введите ваше имя: ")
age = input("Введите ваш возраст: ")
print(f"Привет, {name}! Тебе {age} лет.")

Функция input() позволяет получать данные от пользователя.
f-строки позволяют вставлять переменные в текст.
Это очень удобный способ форматирования вывода.

Теперь поговорим о структурах данных. Списки - это упорядоченные коллекции элементов.
Создаем список: fruits = ["яблоко", "банан", "апельсин"]
Обращаемся к элементам по индексу: fruits[0] даст "яблоко".
Индексация начинается с нуля.

Словари хранят пары ключ-значение.
person = {"name": "Иван", "age": 30, "city": "Москва"}
Обращаемся к значениям по ключу: person["name"] даст "Иван".

Условные операторы позволяют принимать решения в программе.
if age >= 18:
    print("Вы совершеннолетний")
else:
    print("Вы несовершеннолетний")

Циклы позволяют повторять код несколько раз.
for i in range(5):
    print(f"Счетчик: {i}")

Этот цикл выведет числа от 0 до 4.

Функции позволяют группировать код в блоки.
def greet(name):
    return f"Привет, {name}!"

result = greet("Мария")
print(result)

Функция принимает параметр name и возвращает приветствие.
Ключевое слово return возвращает результат функции.

Теперь давайте создадим более сложную программу.
Она будет калькулятором, который складывает два числа.

def add_numbers(a, b):
    return a + b

def subtract_numbers(a, b):
    return a - b

def multiply_numbers(a, b):
    return a * b

def divide_numbers(a, b):
    if b != 0:
        return a / b
    else:
        return "Ошибка: деление на ноль"

print("Простой калькулятор")
print("1. Сложение")
print("2. Вычитание")
print("3. Умножение")
print("4. Деление")

choice = input("Выберите операцию (1-4): ")
num1 = float(input("Введите первое число: "))
num2 = float(input("Введите второе число: "))

if choice == "1":
    result = add_numbers(num1, num2)
    print(f"Результат: {result}")
elif choice == "2":
    result = subtract_numbers(num1, num2)
    print(f"Результат: {result}")
elif choice == "3":
    result = multiply_numbers(num1, num2)
    print(f"Результат: {result}")
elif choice == "4":
    result = divide_numbers(num1, num2)
    print(f"Результат: {result}")
else:
    print("Неверный выбор")

Эта программа демонстрирует многие концепции Python:
- Функции с параметрами
- Условные операторы
- Обработку ошибок
- Работу с пользовательским вводом

Теперь поговорим о работе с файлами.
Открытие файла для чтения:
with open("file.txt", "r") as file:
    content = file.read()
    print(content)

Запись в файл:
with open("output.txt", "w") as file:
    file.write("Это тестовый текст")

Обработка исключений важна для создания надежных программ.
try:
    number = int(input("Введите число: "))
    result = 10 / number
    print(f"Результат: {result}")
except ValueError:
    print("Ошибка: введите корректное число")
except ZeroDivisionError:
    print("Ошибка: деление на ноль")

Модули позволяют использовать готовый код.
import math
print(math.pi)  # число пи
print(math.sqrt(16))  # квадратный корень

import random
print(random.randint(1, 10))  # случайное число от 1 до 10

Создание собственных модулей:
Создайте файл my_module.py:
def hello():
    print("Привет из модуля!")

def calculate_square(x):
    return x * x

Затем импортируйте его:
import my_module
my_module.hello()
result = my_module.calculate_square(5)

Это основы Python программирования.
Практикуйтесь, создавайте свои программы.
Изучайте документацию и примеры кода.
Программирование - это навык, который развивается с практикой.

Спасибо за внимание! Не забудьте подписаться на канал.
Оставляйте комментарии с вопросами.
До встречи в следующем видео! 