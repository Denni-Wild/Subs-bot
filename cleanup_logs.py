#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
"""

import os
import shutil
from datetime import datetime, timedelta
from pathlib import Path

def cleanup_logs():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é"""
    
    log_dir = Path("logs")
    if not log_dir.exists():
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    max_log_size = 10 * 1024 * 1024  # 10MB
    max_backup_age = 30  # –¥–Ω–µ–π
    max_backups = 5  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
    
    print("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
    main_log = log_dir / "bot.log"
    if main_log.exists():
        current_size = main_log.stat().st_size
        print(f"üìä –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞: {current_size / 1024 / 1024:.2f} MB")
        
        if current_size > max_log_size:
            # –°–æ–∑–¥–∞–µ–º backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"bot_{timestamp}.log"
            backup_path = log_dir / backup_name
            
            try:
                shutil.move(str(main_log), str(backup_path))
                print(f"‚úÖ –õ–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {backup_name}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ª–æ–≥
                with open(main_log, 'w', encoding='utf-8-sig') as f:
                    f.write(f"# –ù–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω {datetime.now()}\n")
                print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–∞: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ backup —Ñ–∞–π–ª—ã
    backup_files = []
    for file in log_dir.glob("bot_*.log"):
        if file.name != "bot.log":
            backup_files.append(file)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ backup —Ñ–∞–π–ª—ã
    for backup_file in backup_files[max_backups:]:
        try:
            backup_file.unlink()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π backup: {backup_file.name}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {backup_file.name}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ backup —Ñ–∞–π–ª—ã
    cutoff_date = datetime.now() - timedelta(days=max_backup_age)
    for backup_file in backup_files:
        if backup_file.stat().st_mtime < cutoff_date.timestamp():
            try:
                backup_file.unlink()
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π backup: {backup_file.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {backup_file.name}: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
    other_logs = ["summarization.log", "orchestrator.log"]
    for log_name in other_logs:
        log_path = log_dir / log_name
        if log_path.exists():
            current_size = log_path.stat().st_size
            if current_size > 1024 * 1024:  # 1MB
                try:
                    # –°–æ–∑–¥–∞–µ–º backup
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    backup_name = f"{log_name.replace('.log', '')}_{timestamp}.log"
                    backup_path = log_dir / backup_name
                    shutil.move(str(log_path), str(backup_path))
                    print(f"‚úÖ {log_name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {backup_name}")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ª–æ–≥
                    with open(log_path, 'w', encoding='utf-8-sig') as f:
                        f.write(f"# –ù–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω {datetime.now()}\n")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ {log_name}: {e}")
    
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    cleanup_logs()
