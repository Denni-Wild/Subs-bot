import os
import re
import logging
import time
import asyncio
import random
import tempfile
from io import BytesIO
from pathlib import Path
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
from dotenv import load_dotenv
from summarizer import TextSummarizer
from voice_transcriber import VoiceTranscriber
from mind_map_generator import MindMapGenerator
import requests
import traceback
from collections import defaultdict
from typing import List, Dict, Optional

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8-sig', mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
def setup_log_rotation():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Ö —Ä–∞–∑—Ä–∞—Å—Ç–∞–Ω–∏—è"""
    import os
    from datetime import datetime, timedelta
    
    log_file = 'logs/bot.log'
    if os.path.exists(log_file):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 10MB)
        if os.path.getsize(log_file) > 10 * 1024 * 1024:
            # –°–æ–∑–¥–∞–µ–º backup —Å –¥–∞—Ç–æ–π
            backup_name = f'logs/bot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
            try:
                os.rename(log_file, backup_name)
                logger.info(f"–õ–æ–≥ —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {backup_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–∞: {e}")

# –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setup_log_rotation()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
ERROR_NOTIFICATIONS_ENABLED = os.getenv('ERROR_NOTIFICATIONS_ENABLED', 'true').lower() == 'true'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä, —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä –∏ mind map –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
summarizer = TextSummarizer()
voice_transcriber = VoiceTranscriber()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mind map –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
if OPENROUTER_API_KEY:
    mind_map_generator = MindMapGenerator(OPENROUTER_API_KEY)
    MIND_MAP_AVAILABLE = True
    logger.info("‚úÖ Mind Map Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
else:
    mind_map_generator = None
    MIND_MAP_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Mind Map Generator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENROUTER_API_KEY")

YOUTUBE_REGEX = r"(?:v=|youtu\.be/|youtube\.com/embed/|youtube\.com/watch\?v=)?([\w-]{11})"

def format_transcription_text(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    Args:
        text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        
    Returns:
        –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return text
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'([.!?]+)', text)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    formatted_sentences = []
    for i in range(0, len(sentences), 2):
        if i + 1 < len(sentences):
            sentence = sentences[i].strip()
            punctuation = sentences[i + 1]
            
            # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
            if sentence:
                sentence = sentence[0].upper() + sentence[1:] if len(sentence) > 1 else sentence.upper()
                formatted_sentences.append(sentence + punctuation)
        else:
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            sentence = sentences[i].strip()
            if sentence:
                sentence = sentence[0].upper() + sentence[1:] if len(sentence) > 1 else sentence.upper()
                formatted_sentences.append(sentence)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    formatted_text = ' '.join(formatted_sentences)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    if not re.search(r'[.!?]', formatted_text):
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ñ—Ä–∞–∑—ã –ø–æ –¥–ª–∏–Ω–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
        words = formatted_text.split()
        phrases = []
        current_phrase = ""
        
        for word in words:
            if len(current_phrase + " " + word) > 15:  # –§—Ä–∞–∑–∞ –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤
                if current_phrase:
                    phrases.append(current_phrase.strip() + ".")
                    current_phrase = word
                else:
                    current_phrase = word
            else:
                current_phrase += (" " + word) if current_phrase else word
        
        if current_phrase:
            phrases.append(current_phrase.strip() + ".")
        
        formatted_text = " ".join(phrases)
    
    # –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã
    # –ò—â–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—É–∑—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    paragraphs = []
    current_paragraph = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    sentence_pattern = r'[^.!?]+[.!?]+'
    sentences_list = re.findall(sentence_pattern, formatted_text)
    
    for sentence in sentences_list:
        sentence = sentence.strip()
        if not sentence:
            continue
            
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        if len(current_paragraph + " " + sentence) > 120:
            if current_paragraph:
                paragraphs.append(current_paragraph.strip())
                current_paragraph = sentence
            else:
                current_paragraph = sentence
        else:
            current_paragraph += (" " + sentence) if current_paragraph else sentence
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
    if current_paragraph:
        paragraphs.append(current_paragraph.strip())
    
    # –ï—Å–ª–∏ –∞–±–∑–∞—Ü—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    formatted_paragraphs = []
    for paragraph in paragraphs:
        if len(paragraph) > 100:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            words = paragraph.split()
            lines = []
            current_line = ""
            
            for word in words:
                if len(current_line + " " + word) <= 80:
                    current_line += (" " + word) if current_line else word
                else:
                    if current_line:
                        lines.append(current_line)
                    current_line = word
            
            if current_line:
                lines.append(current_line)
            
            formatted_paragraphs.append('\n'.join(lines))
        else:
            formatted_paragraphs.append(paragraph)
    
    return '\n\n'.join(formatted_paragraphs)

async def send_error_notification(error_type: str, error_message: str, context: str = "", user_id: int = None, additional_info: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ERROR_NOTIFICATIONS_ENABLED or not ADMIN_CHAT_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    current_time = time.time()
    error_key = f"{error_type}_{context}"
    
    if error_key in error_notification_cooldown:
        if current_time - error_notification_cooldown[error_key] < ERROR_NOTIFICATION_COOLDOWN:
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ cooldown
    
    error_notification_cooldown[error_key] = current_time
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message_parts = []
        message_parts.append("üö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï")
        message_parts.append("")
        message_parts.append(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}")
        message_parts.append(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
        
        if context:
            message_parts.append(f"üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
        
        if user_id:
            message_parts.append(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        if additional_info:
            message_parts.append(f"üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            for key, value in additional_info.items():
                message_parts.append(f"   ‚Ä¢ {key}: {value}")
        
        message_parts.append("")
        message_parts.append(f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        error_message_text = "\n".join(message_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        from telegram import Bot
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=error_message_text,
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            disable_web_page_preview=True
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {error_type}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        logger.error(f"   ‚Ä¢ –¢–∏–ø: {type(e).__name__}")
        logger.error(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        logger.error(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")

def log_and_notify_error(error: Exception, context: str = "", user_id: int = None, additional_info: dict = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        error_type = type(error).__name__
        error_message = str(error)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
        logger.error(f"–û—à–∏–±–∫–∞ –≤ {context}: {error_type} - {error_message}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ–∑ stack trace, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
        logger.error(f"üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        logger.error(f"   ‚Ä¢ –¢–∏–ø: {error_type}")
        logger.error(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
        logger.error(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
        if user_id:
            logger.error(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        if additional_info:
            logger.error(f"   ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {additional_info}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(send_error_notification(
            error_type=error_type,
            error_message=error_message,
            context=context,
            user_id=user_id,
            additional_info=additional_info
        ))
        
    except Exception as log_error:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑–æ–≤—ã–π –ª–æ–≥
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {log_error}")
        print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")

# Enhanced rate limiting constants
MIN_REQUEST_INTERVAL = 15  # Increased from 10 to 15 seconds
MAX_RETRIES = 3
BASE_DELAY = 2  # Base delay in seconds
MAX_DELAY = 60  # Maximum delay in seconds

# Global rate limiting state
request_timestamps = {}  # Track last request time per user
global_last_request = 0  # Global rate limiting

# Voice message series grouping system
voice_series_groups = defaultdict(list)  # Group voice messages by user and series
voice_series_timeout = 300  # 5 minutes timeout for grouping voice messages
voice_series_cleanup_interval = 600  # 10 minutes cleanup interval
global_request_lock = asyncio.Lock()  # Prevent concurrent requests

# Multiple message handling system (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
last_text_message_time = {}  # Track last text message time per user
last_youtube_link_time = {}  # Track last YouTube link time per user
MESSAGE_IGNORE_INTERVAL = 5  # Ignore repeated messages within 5 seconds
YOUTUBE_IGNORE_INTERVAL = 10  # Ignore repeated YouTube links within 10 seconds

# Error notification tracking
error_notification_cooldown = {}  # Track last error notification time per error type
ERROR_NOTIFICATION_COOLDOWN = 300  # 5 minutes cooldown between same error notifications

# Track new users for welcome experience
new_users = set()  # Simple set to track new users

# User state tracking system (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
user_states = {}  # Track user states: 'expecting_mind_map_text', 'normal', etc.

START_MESSAGE = (
    'üëã **–ü—Ä–∏–≤–µ—Ç! –Ø YouTube Subtitle Bot**\n\n'
    'üéØ **–Ø —É–º–µ—é:**\n'
    '‚Ä¢ üì∫ –ü–æ–ª—É—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã —Å YouTube-–≤–∏–¥–µ–æ\n'
    '‚Ä¢ ü§ñ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò\n'
    '‚Ä¢ üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n'
    'üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:**\n'
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n'
    'üí° **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá'
)

HELP_MESSAGE = (
    '‚ÑπÔ∏è **–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê**\n\n'
    'üì∫ **YouTube —Å—É–±—Ç–∏—Ç—Ä—ã:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ\n'
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n'
    '3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n'
    '   ‚Ä¢ üìÑ –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã\n'
    '   ‚Ä¢ ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
    '   ‚Ä¢ üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
    '4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (—Å/–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫)\n'
    '5. –î–ª—è –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å\n\n'
    'üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    '2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç\n'
    '3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏\n'
    '4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)\n'
    '5. –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π\n\n'
    'ü§ñ **–ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:**\n'
    '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n'
    '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ò–ò-–º–æ–¥–µ–ª–µ–π\n'
    '‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2-3 –º–∏–Ω—É—Ç—ã\n\n'
    '‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
    '‚Ä¢ –ù–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ 15 —Å–µ–∫—É–Ω–¥\n'
    '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∏–¥–µ–æ\n'
    '‚Ä¢ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã\n'
    '‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
    'üîß **–ö–æ–º–∞–Ω–¥—ã:**\n'
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n'
    '/about - –û –±–æ—Ç–µ\n'
    '/reset - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n'
    'üí° **–°–æ–≤–µ—Ç—ã:**\n'
    '‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏\n'
    '‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏\n'
    '‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥'
)

ABOUT_MESSAGE = (
    'ü§ñ **–û –ë–û–¢–ï**\n\n'
    '**YouTube Subtitle Bot** - —ç—Ç–æ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n\n'
    'üéØ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:**\n'
    '–°–¥–µ–ª–∞—Ç—å YouTube-–∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n\n'
    '‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n'
    '‚Ä¢ üì∫ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –ª—é–±–æ–≥–æ YouTube-–≤–∏–¥–µ–æ\n'
    '‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤\n'
    '‚Ä¢ ü§ñ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è\n'
    '‚Ä¢ üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n'
    '‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n'
    'üõ† **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n'
    '‚Ä¢ YouTube Transcript API\n'
    '‚Ä¢ –ò–ò-–º–æ–¥–µ–ª–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n'
    '‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ\n'
    '‚Ä¢ Telegram Bot API\n\n'
    'üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n'
    '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 100+ —è–∑—ã–∫–æ–≤\n'
    '‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n'
    '‚Ä¢ –ù–∞–¥–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n\n'
    'üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n'
    '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help\n\n'
    'üöÄ **–í–µ—Ä—Å–∏—è:** 2.0\n'
    'üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** 2024'
)

INFO_MESSAGE = (
    '‚ÑπÔ∏è **–ö–†–ê–¢–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n'
    'üéØ **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**\n'
    '‚Ä¢ üì∫ –ü–æ–ª—É—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã —Å YouTube-–≤–∏–¥–µ–æ\n'
    '‚Ä¢ ü§ñ –°–æ–∑–¥–∞–≤–∞—Ç—å –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é\n'
    '‚Ä¢ üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
    '‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤\n\n'
    '‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n'
    '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ\n'
    '2. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–µ\n'
    '3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n'
    'üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n'
    '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    '–ú–∞–∫—Å–∏–º—É–º: 5 –º–∏–Ω—É—Ç\n\n'
    '‚è±Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
    '‚Ä¢ –ù–µ —á–∞—â–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ 15 —Å–µ–∫—É–Ω–¥\n'
    '‚Ä¢ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: 2-3 –º–∏–Ω—É—Ç—ã\n'
    '‚Ä¢ –ì–æ–ª–æ—Å: –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
    'üí° **–°–æ–≤–µ—Ç—ã:**\n'
    '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞\n'
    '‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏\n'
    '‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∂–¥–∏—Ç–µ 15 —Å–µ–∫—É–Ω–¥\n\n'
    'üìö **–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** /help'
)

LEARN_MORE_MESSAGE = (
    'üìö **–£–ó–ù–ê–ô–¢–ï –ë–û–õ–¨–®–ï –û –ë–û–¢–ï**\n\n'
    'üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n'
    '1Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É** –Ω–∞ YouTube-–≤–∏–¥–µ–æ\n'
    '2Ô∏è‚É£ **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫** —Å—É–±—Ç–∏—Ç—Ä–æ–≤\n'
    '3Ô∏è‚É£ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**\n'
    '   üìÑ –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã\n'
    '   ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
    '   üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
    '4Ô∏è‚É£ **–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!**\n\n'
    'üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n'
    '‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n'
    '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç\n\n'
    'ü§ñ **–ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:**\n'
    '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n'
    '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI-–º–æ–¥–µ–ª–∏\n'
    '‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2-3 –º–∏–Ω—É—Ç—ã\n\n'
    '‚ö†Ô∏è **–í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
    '‚Ä¢ –ù–µ —á–∞—â–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ 15 —Å–µ–∫—É–Ω–¥\n'
    '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã\n'
    '‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–∞\n\n'
    'üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:**\n'
    '‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ\n'
    '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n'
    '‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–æ–∂–¥–∏—Ç–µ 15 —Å–µ–∫—É–Ω–¥\n\n'
    'üöÄ **–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?**\n'
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ!'
)

QUICK_HELP_MESSAGE = (
    'üí° **–ë–´–°–¢–†–ê–Ø –ü–û–ú–û–©–¨**\n\n'
    '‚ùì **–ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å?**\n\n'
    'üé¨ **–î–ª—è YouTube-–≤–∏–¥–µ–æ:**\n'
    '1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å YouTube\n'
    '2. –í—Å—Ç–∞–≤—å—Ç–µ –µ—ë –≤ —á–∞—Ç\n'
    '3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n'
    'üé§ **–î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:**\n'
    '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω\n'
    '2. –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ - –±–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç\n\n'
    'üîß **–ü—Ä–æ–±–ª–µ–º—ã?**\n'
    '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è\n'
    '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã —É –≤–∏–¥–µ–æ\n'
    '‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n\n'
    'üöÄ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**'
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def extract_video_id(text):
    match = re.search(YOUTUBE_REGEX, text)
    return match.group(1) if match else None

def sanitize_filename(filename):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —É–±–∏—Ä–∞—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '')
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    filename = re.sub(r'\s+', ' ', filename)
    filename = re.sub(r'-+', '-', filename)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if len(filename) > 100:
        filename = filename[:97] + '...'
    
    return filename.strip()

async def get_video_title(video_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º oEmbed API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        url = f"https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v={video_id}&format=json"
        
        async with asyncio.Lock():  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            title = data.get('title', 'Unknown Video')
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {title}")
            return title
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ {video_id}: {e}")
        return f"Video_{video_id}"

async def create_filename(video_id: str, file_type: str, lang_code: str = None, format_str: str = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_title = await get_video_title(video_id)
        safe_title = sanitize_filename(video_title)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename_parts = [safe_title]
        
        if lang_code:
            filename_parts.append(f"[{lang_code}]")
        
        if format_str:
            format_short = "time" if "–º–µ—Ç–∫–∞–º–∏" in format_str else "plain"
            filename_parts.append(f"[{format_short}]")
        
        filename_parts.append(f"[{file_type}]")
        
        filename = " - ".join(filename_parts) + ".txt"
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        fallback_parts = [file_type, video_id]
        if lang_code:
            fallback_parts.append(lang_code)
        return f"{'_'.join(fallback_parts)}.txt"

async def rate_limit_check(user_id: int) -> bool:
    """Check if user is within rate limits"""
    now = time.time()
    last_time = request_timestamps.get(user_id, 0)
    
    if now - last_time < MIN_REQUEST_INTERVAL:
        return False
    
    request_timestamps[user_id] = now
    return True

async def check_multiple_messages(user_id: int, message_type: str, content: str = None) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏ –¥–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('text', 'youtube', 'voice')
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è YouTube —Å—Å—ã–ª–æ–∫)
        
    Returns:
        tuple: (should_process, warning_message)
    """
    now = time.time()
    
    if message_type == 'voice':
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        # –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        last_time = last_text_message_time.get(user_id, 0)
        if now - last_time < MESSAGE_IGNORE_INTERVAL:
            remaining = MESSAGE_IGNORE_INTERVAL - int(now - last_time)
            warning = (
                f'‚ö†Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n'
                f'üé§ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥\n'
                f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥\n'
                f'üîÑ –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–∞–∫–µ—Ç–æ–º\n\n'
                f'üí° **–°–æ–≤–µ—Ç:** –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è'
            )
            return False, warning
        else:
            last_text_message_time[user_id] = now
            return True, ""
    
    elif message_type == 'text':
        last_time = last_text_message_time.get(user_id, 0)
        if now - last_time < MESSAGE_IGNORE_INTERVAL:
            remaining = MESSAGE_IGNORE_INTERVAL - int(now - last_time)
            warning = (
                f'‚ö†Ô∏è **–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ**\n\n'
                f'üìù –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥\n'
                f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥\n'
                f'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n'
                f'üí° **–°–æ–≤–µ—Ç:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É'
            )
            return False, warning
        else:
            last_text_message_time[user_id] = now
            return True, ""
    
    elif message_type == 'youtube':
        last_time = last_youtube_link_time.get(user_id, 0)
        if now - last_time < YOUTUBE_IGNORE_INTERVAL:
            remaining = YOUTUBE_IGNORE_INTERVAL - int(now - last_time)
            warning = (
                f'‚ö†Ô∏è **YouTube —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞**\n\n'
                f'üé¨ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –ø–æ–¥—Ä—è–¥\n'
                f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥\n'
                f'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞\n\n'
                f'üí° **–°–æ–≤–µ—Ç:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π'
            )
            return False, warning
        else:
            last_youtube_link_time[user_id] = now
            return True, ""
    
    return True, ""

async def global_rate_limit_check() -> bool:
    """Check global rate limiting to prevent API abuse"""
    global global_last_request
    now = time.time()
    
    async with global_request_lock:
        if now - global_last_request < 2:  # Minimum 2 seconds between any requests
            return False
        global_last_request = now
        return True

async def add_voice_to_series(user_id: int, voice_message: dict) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–µ—Ä–∏–∏"""
    global voice_series_groups
    
    now = time.time()
    series_id = f"series_{user_id}_{int(now // voice_series_timeout)}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ä–∏—é
    voice_series_groups[series_id].append({
        'voice': voice_message,
        'timestamp': now,
        'user_id': user_id
    })
    
    logger.info(f"üé§ –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ä–∏—é {series_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return series_id

async def get_voice_series(user_id: int, series_id: str) -> List[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏"""
    global voice_series_groups
    
    if series_id in voice_series_groups:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = [msg for msg in voice_series_groups[series_id] if msg['user_id'] == user_id]
        return user_messages
    return []

async def cleanup_expired_voice_series():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global voice_series_groups
    
    now = time.time()
    expired_series = []
    
    for series_id, messages in voice_series_groups.items():
        if not messages:
            expired_series.append(series_id)
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ timeout
        oldest_message = min(messages, key=lambda x: x['timestamp'])
        if now - oldest_message['timestamp'] > voice_series_timeout:
            expired_series.append(series_id)
    
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Ä–∏–∏
    for series_id in expired_series:
        del voice_series_groups[series_id]
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {series_id}")
    
    if expired_series:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_series)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Ä–∏–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

async def cleanup_expired_message_tracking():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global last_text_message_time, last_youtube_link_time
    
    now = time.time()
    cleanup_threshold = 3600  # 1 —á–∞—Å
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    expired_text_users = [
        user_id for user_id, timestamp in last_text_message_time.items()
        if now - timestamp > cleanup_threshold
    ]
    for user_id in expired_text_users:
        del last_text_message_time[user_id]
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è YouTube —Å—Å—ã–ª–æ–∫
    expired_youtube_users = [
        user_id for user_id, timestamp in last_youtube_link_time.items()
        if now - timestamp > cleanup_threshold
    ]
    for user_id in expired_youtube_users:
        del last_youtube_link_time[user_id]
    
    if expired_text_users or expired_youtube_users:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_text_users)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ {len(expired_youtube_users)} YouTube –∑–∞–ø–∏—Å–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

async def process_voice_series(user_id: int, series_id: str, bot) -> tuple:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    global voice_series_groups
    
    if series_id not in voice_series_groups:
        return False, "–°–µ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", {}
    
    messages = [msg for msg in voice_series_groups[series_id] if msg['user_id'] == user_id]
    if not messages:
        return False, "–í —Å–µ—Ä–∏–∏ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", {}
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    messages.sort(key=lambda x: x['timestamp'])
    
    all_texts = []
    total_duration = 0
    total_tokens = 0
    total_confidence = 0
    successful_transcriptions = 0
    
    logger.info(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ—Ä–∏—é –∏–∑ {len(messages)} –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    for i, msg in enumerate(messages):
        voice = msg['voice']
        logger.info(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(messages)}: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {voice.duration} —Å–µ–∫")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(voice.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(temp_path)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_path)
            except Exception:
                pass
            
            if success and text:
                all_texts.append(text)
                total_duration += voice.duration
                total_tokens += stats.get('tokens_count', 0)
                total_confidence += stats.get('confidence_avg', 0)
                successful_transcriptions += 1
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
    
    if not all_texts:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏", {}
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
    combined_text = " ".join(all_texts)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    combined_stats = {
        'messages_count': len(messages),
        'successful_transcriptions': successful_transcriptions,
        'total_duration': total_duration,
        'total_tokens': total_tokens,
        'average_confidence': total_confidence / successful_transcriptions if successful_transcriptions > 0 else 0,
        'text_length': len(combined_text)
    }
    
    logger.info(f"‚úÖ –°–µ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(all_texts)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Ä–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if series_id in voice_series_groups:
        del voice_series_groups[series_id]
    
    return True, combined_text, combined_stats

async def process_single_voice_from_series(update: Update, context: ContextTypes.DEFAULT_TYPE, series_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–∏–∏"""
    user_id = update.effective_user.id
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é
        series_messages = await get_voice_series(user_id, series_id)
        if not series_messages:
            await query.edit_message_text('‚ùå –°–µ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        first_message = series_messages[0]
        voice = first_message['voice']
        
        logger.info(f'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–∏–∏ {series_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(voice.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await file.download_to_drive(temp_path)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        start_time = time.time()
        success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
        processing_time = time.time() - start_time
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except Exception:
            pass
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_parts = []
            response_parts.append(f"üé§ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)**")
            response_parts.append(text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")

                response_parts.append(f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {stats.get('text_length', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats.get('tokens_count', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('confidence_avg', 0):.2f}")
                response_parts.append(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            
            full_response = "\n".join(response_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(full_response) <= 3000:
                await query.edit_message_text(full_response, parse_mode='Markdown')
            else:
                await query.edit_message_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                timestamp = int(time.time())
                file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                await context.bot.send_document(chat_id=user_id, document=InputFile(file))
        else:
            await query.edit_message_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}')
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Ä–∏—é
        if series_id in voice_series_groups:
            del voice_series_groups[series_id]
            
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏: {e}', exc_info=True)
        await query.edit_message_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Ä–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if series_id in voice_series_groups:
            del voice_series_groups[series_id]

async def process_voice_series_complete(update: Update, context: ContextTypes.DEFAULT_TYPE, series_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    query = update.callback_query
    
    try:
        logger.info(f'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–Ω—É—é —Å–µ—Ä–∏—é {series_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
        success, combined_text, combined_stats = await process_voice_series(user_id, series_id, context.bot)
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_parts = []
            response_parts.append("üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –°–ï–†–ò–ò –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô:**")
            response_parts.append(combined_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–∏–∏
            if combined_stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–∏–∏:**")
                response_parts.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏: {combined_stats.get('messages_count', 0)}")
                response_parts.append(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {combined_stats.get('successful_transcriptions', 0)}")
                response_parts.append(f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {combined_stats.get('total_duration', 0)} —Å–µ–∫—É–Ω–¥")
                response_parts.append(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {combined_stats.get('total_tokens', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combined_stats.get('average_confidence', 0):.2f}")
                response_parts.append(f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {combined_stats.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            full_response = "\n".join(response_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(full_response) <= 3000:
                await query.edit_message_text(full_response, parse_mode='Markdown')
            else:
                await query.edit_message_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–µ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                timestamp = int(time.time())
                file.name = f'voice_series_transcription_{user_id}_{timestamp}.txt'
                await context.bot.send_document(chat_id=user_id, document=InputFile(file))
        else:
            await query.edit_message_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n{combined_text}')
            
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}', exc_info=True)
        await query.edit_message_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.')

async def get_transcript_with_retry(video_id: str, languages: list, max_retries: int = MAX_RETRIES) -> tuple:
    """
    Get transcript with exponential backoff retry logic and fallback methods
    Returns: (transcript_data, success, error_message)
    """
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {video_id}, —è–∑—ã–∫–∏: {languages}, –ø–æ–ø—ã—Ç–∫–∞ 1/{max_retries}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    try:
        logger.info(f"üìã –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        ytt_api = YouTubeTranscriptApi()
        list_transcripts = ytt_api.list(video_id)
        available_languages = [t.language_code for t in list_transcripts]
        logger.info(f"üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_languages}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if languages[0] not in available_languages:
            fallback_languages = ['en', 'ru', 'auto']  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è fallback
            for fallback_lang in fallback_languages:
                if fallback_lang in available_languages:
                    logger.info(f"üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —è–∑—ã–∫ {languages[0]} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é fallback: {fallback_lang}")
                    languages = [fallback_lang]
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö fallback, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                if available_languages:
                    logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫: {available_languages[0]}")
                    languages = [available_languages[0]]
                else:
                    return None, False, "–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ."
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit")
            # Check global rate limit
            if not await global_rate_limit_check():
                logger.info(f"‚è≥ –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limit –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥—É 2 —Å–µ–∫—É–Ω–¥—ã")
                await asyncio.sleep(2)
                continue
                
            logger.info(f"üåê –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ YouTube API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            transcript = None
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            try:
                ytt_api = YouTubeTranscriptApi()
                transcript = ytt_api.fetch(video_id, languages=languages)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã –º–µ—Ç–æ–¥–æ–º 1: {len(transcript)} —Å—Ç—Ä–æ–∫")
            except Exception as e1:
                logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e1}")
                
                # –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ list_transcripts
                try:
                    ytt_api = YouTubeTranscriptApi()
                    list_transcripts = ytt_api.list(video_id)
                    for lang in languages:
                        try:
                            transcript_obj = list_transcripts.find_transcript([lang])
                            transcript = transcript_obj.fetch()
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã –º–µ—Ç–æ–¥–æ–º 2: {len(transcript)} —Å—Ç—Ä–æ–∫")
                            break
                        except:
                            continue
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    
                    # –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
                    try:
                        ytt_api = YouTubeTranscriptApi()
                        transcript = ytt_api.fetch(video_id, languages=['auto'])
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã: {len(transcript)} —Å—Ç—Ä–æ–∫")
                    except Exception as e3:
                        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e3}")
            
            if transcript:
                return transcript, True, None
            else:
                raise Exception("–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {error_msg}")
            
            # Handle specific error types
            if "Too Many Requests" in error_msg or "429" in error_msg:
                if attempt < max_retries - 1:
                    # Exponential backoff with jitter
                    delay = min(BASE_DELAY * (2 ** attempt) + random.uniform(0, 1), MAX_DELAY)
                    logger.warning(f"Rate limit hit for video {video_id}, attempt {attempt + 1}/{max_retries}, waiting {delay:.1f}s")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç)."
            
            elif "TranscriptsDisabled" in error_msg:
                return None, False, "–£ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ —Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã."
            
            elif "NoTranscriptFound" in error_msg:
                return None, False, "–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ."
            
            elif "Video unavailable" in error_msg:
                return None, False, "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ."
            
            elif "no element found" in error_msg:
                if attempt < max_retries - 1:
                    delay = BASE_DELAY * (2 ** attempt)
                    logger.warning(f"XML parsing error for {video_id}, attempt {attempt + 1}/{max_retries}: {error_msg}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —Å—É–±—Ç–∏—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            
            else:
                if attempt < max_retries - 1:
                    delay = BASE_DELAY * (2 ** attempt)
                    logger.warning(f"Error getting transcript for {video_id}, attempt {attempt + 1}/{max_retries}: {error_msg}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {error_msg}"
    
    return None, False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."

async def get_available_transcripts_with_retry(video_id: str, max_retries: int = MAX_RETRIES) -> tuple:
    """
    Get available transcripts list with retry logic
    Returns: (transcripts_list, success, error_message)
    """
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {video_id}, –ø–æ–ø—ã—Ç–∫–∞ 1/{max_retries}")
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limit")
            # Check global rate limit
            if not await global_rate_limit_check():
                logger.info(f"‚è≥ –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limit –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥—É 2 —Å–µ–∫—É–Ω–¥—ã")
                await asyncio.sleep(2)
                continue
                
            logger.info(f"üåê –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ YouTube API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
            ytt_api = YouTubeTranscriptApi()
            list_transcripts = ytt_api.list(video_id)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –æ—Ç YouTube API")
            return list(list_transcripts), True, None
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {error_msg}")
            
            if "Too Many Requests" in error_msg or "429" in error_msg:
                if attempt < max_retries - 1:
                    delay = min(BASE_DELAY * (2 ** attempt) + random.uniform(0, 1), MAX_DELAY)
                    logger.warning(f"Rate limit hit for video {video_id} (list), attempt {attempt + 1}/{max_retries}, waiting {delay:.1f}s")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç)."
            
            elif "Video unavailable" in error_msg:
                return None, False, "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ."
            
            else:
                if attempt < max_retries - 1:
                    delay = BASE_DELAY * (2 ** attempt)
                    logger.warning(f"Error listing transcripts for {video_id}, attempt {attempt + 1}/{max_retries}: {error_msg}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    return None, False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {error_msg}"
    
    return None, False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."

def build_language_keyboard(list_transcripts):
    buttons = []
    for transcript in list_transcripts:
        lang_code = transcript.language_code
        lang_name = transcript.language
        buttons.append([InlineKeyboardButton(f'{lang_name} ({lang_code})', callback_data=f'lang_{lang_code}')])
    return InlineKeyboardMarkup(buttons)

def build_action_keyboard():
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è: —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã –∏–ª–∏ —Å –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('üìÑ –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã', callback_data='action_subtitles')],
        [InlineKeyboardButton('ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data='action_ai_summary')],
        [InlineKeyboardButton('üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', callback_data='action_only_summary')]
    ])

def build_format_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏', callback_data='format_with_time')],
        [InlineKeyboardButton('–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫', callback_data='format_plain')]
    ])



def build_main_keyboard():
    """–°—Ç—Ä–æ–∏—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ mind map"""
    buttons = [
        [InlineKeyboardButton('üì∫ –ü–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã', callback_data='get_subs')],
        [InlineKeyboardButton('üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å', callback_data='voice_info')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É mind map –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if MIND_MAP_AVAILABLE:
        buttons.append([InlineKeyboardButton('üß† –°–æ–∑–¥–∞—Ç—å Mind Map', callback_data='mind_map_info')])
    
    buttons.extend([
        [InlineKeyboardButton('üìö –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data='learn_more')],
        [InlineKeyboardButton('üí° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å', callback_data='quick_help')],
        [InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help')],
        [InlineKeyboardButton('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='reset')]
    ])
    
    return InlineKeyboardMarkup(buttons)

def format_subtitles(transcript, with_time=False):
    if with_time:
        return '\n'.join([
            f"[{int(item.start)//60:02}:{int(item.start)%60:02}] {item.text}" for item in transcript
        ])
    else:
        return '\n'.join([item.text for item in transcript])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_new_user = user_id not in new_users
    
    if is_new_user:
        new_users.add(user_id)
        logger.info(f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(START_MESSAGE, reply_markup=build_main_keyboard())
        
        # –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        await asyncio.sleep(1)
        await update.message.reply_text(
            'üí° **–°–æ–≤–µ—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–∞:**\n\n'
            'üé¨ **–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ:**\n'
            '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (–¥–æ 10 –º–∏–Ω—É—Ç)\n'
            '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∏–¥–µ–æ –µ—Å—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã\n'
            '‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã\n\n'
            'üöÄ **–ì–æ—Ç–æ–≤—ã?** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ!'
        )
    else:
        # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(START_MESSAGE, reply_markup=build_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_MESSAGE, reply_markup=build_main_keyboard())

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ABOUT_MESSAGE, reply_markup=build_main_keyboard())

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(INFO_MESSAGE, reply_markup=build_main_keyboard())

async def first_time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä"""
    await update.message.reply_text(
        'üéØ **–ü–ï–†–í–´–ô –†–ê–ó? –ù–ï –ë–û–ô–¢–ï–°–¨!**\n\n'
        'üöÄ **–í–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n\n'
        '1Ô∏è‚É£ **–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube**\n'
        '   (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥–æ 10 –º–∏–Ω—É—Ç)\n\n'
        '2Ô∏è‚É£ **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É**\n'
        '   (–Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" ‚Üí "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É")\n\n'
        '3Ô∏è‚É£ **–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç**\n'
        '   (–ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É)\n\n'
        '4Ô∏è‚É£ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**\n'
        '   üìÑ –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "–¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã"\n'
        '   ü§ñ –ü–æ—Ç–æ–º "–°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"\n\n'
        'üé¨ **–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:**\n'
        'https://youtube.com/watch?v=dQw4w9WgXcQ\n\n'
        'üí° **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —Å–º–æ—Ç—Ä–µ–ª–∏.\n\n'
        'üöÄ **–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É!',
        reply_markup=build_main_keyboard()
    )

async def subs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üì∫ **–ü–û–õ–£–ß–ï–ù–ò–ï –°–£–ë–¢–ò–¢–†–û–í**\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã!\n\n'
        'üéØ **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n'
        '‚Ä¢ üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã\n'
        '‚Ä¢ ü§ñ –°—É–±—Ç–∏—Ç—Ä—ã + –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n'
        '‚Ä¢ üîÆ –¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è\n\n'
        'üìù **–§–æ—Ä–º–∞—Ç—ã:**\n'
        '‚Ä¢ –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏\n'
        '‚Ä¢ –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫\n\n'
        'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**'
    )

async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô**\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n'
        '‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**\n'
        '‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫\n'
        '‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n'
        '‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
        '‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
        '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)\n'
        '‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n'
        '‚Ä¢ –ß–µ—Ç–∫–∞—è —Ä–µ—á—å\n\n'
        'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**'
    )

async def mind_map_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mind map"""
    if not MIND_MAP_AVAILABLE:
        await update.message.reply_text(
            '‚ùå **Mind Map –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n'
            '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenRouter API –∫–ª—é—á.\n\n'
            'üìù **–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**\n'
            '1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://openrouter.ai/\n'
            '2. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª\n'
            '3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n'
            'üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!',
            reply_markup=build_main_keyboard()
        )
        return
    
    await update.message.reply_text(
        'üß† **–°–û–ó–î–ê–ù–ò–ï MIND MAP**\n\n'
        '‚úÖ **–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é Mind Map!**\n\n'
        'üìù **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç:**\n'
        '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã YouTube\n'
        '‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
        '‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n'
        '‚Ä¢ –°—Ç–∞—Ç—å–∏, –∑–∞–º–µ—Ç–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n'
        'üéØ **–ß—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:**\n'
        '‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏\n'
        '‚Ä¢ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n'
        '‚Ä¢ Markdown —Ñ–∞–π–ª\n'
        '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–¥–µ–π\n\n'
        'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**\n\n'
        'üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Ç–µ–∫—Å—Ç, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∫–∞—Ä—Ç–∞!\n\n'
        'üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç –¥–ª—è Mind Map...',
        reply_markup=build_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    text = update.message.text.strip()
    logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await get_user_state(user_id)
    logger.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_state}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Mind Map
    if current_state == 'expecting_mind_map_text':
        logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —Ä–µ–∂–∏–º–µ Mind Map, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è mind map
        if len(text) < 50:
            await update.message.reply_text(
                '‚ùì **–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è Mind Map**\n\n'
                'üìù **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞:** 50 —Å–∏–º–≤–æ–ª–æ–≤\n'
                'üìä **–í–∞—à —Ç–µ–∫—Å—Ç:** {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n'
                'üí° **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n'
                '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã YouTube\n'
                '‚Ä¢ –°—Ç–∞—Ç—å–∏, –∑–∞–º–µ—Ç–∫–∏\n'
                '‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã, —ç—Å—Å–µ\n'
                '‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n'
                'üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è Mind Map...',
                reply_markup=build_main_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º mind map
        if MIND_MAP_AVAILABLE:
            await update.message.reply_text(
                f'üß† **–°–æ–∑–¥–∞—é Mind Map!**\n\n'
                f'üìù **–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:** {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n'
                f'üéØ **–ß—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:**\n'
                '‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏\n'
                '‚Ä¢ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n'
                '‚Ä¢ Markdown —Ñ–∞–π–ª\n'
                '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–¥–µ–π\n\n'
                'üöÄ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...**',
                reply_markup=build_main_keyboard()
            )
            
            try:
                logger.info(f"üß† –°–æ–∑–¥–∞—é mind map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º mind map –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                results = await mind_map_generator.create_mind_map(text, "all")
                
                logger.info(f"‚úÖ Mind Map —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await send_mind_map_results(update, context, results, text)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await clear_user_state(user_id)
                logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mind map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await update.message.reply_text(
                    f'‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Mind Map**\n\n'
                    f'üîç **–î–µ—Ç–∞–ª–∏:** {str(e)}\n\n'
                    'üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n'
                    '‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ\n'
                    '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç\n'
                    '‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n'
                    'üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞—é –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Mind Map...',
                    reply_markup=build_main_keyboard()
                )
        else:
            await update.message.reply_text(
                '‚ùå **Mind Map –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n'
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenRouter API –∫–ª—é—á.\n\n'
                'üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!**',
                reply_markup=build_main_keyboard()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await clear_user_state(user_id)
        
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –≤ —Ä–µ–∂–∏–º–µ Mind Map)
    logger.info(f"üìù –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
    video_id = extract_video_id(text)
    if video_id:
        # –≠—Ç–æ YouTube —Å—Å—ã–ª–∫–∞
        should_process, warning = await check_multiple_messages(user_id, 'youtube', text)
        if not should_process:
            logger.info(f"‚ö†Ô∏è YouTube —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            await update.message.reply_text(warning)
            return
        logger.info(f"‚úÖ YouTube —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        should_process, warning = await check_multiple_messages(user_id, 'text', text)
        if not should_process:
            logger.info(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
            await update.message.reply_text(warning)
            return
        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # Check user rate limit
    if not await rate_limit_check(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - request_timestamps.get(user_id, 0))
        logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å {int(remaining_time)} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        wait_msg = await update.message.reply_text(
            f'‚ö†Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n'
            f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥\n'
            f'üîÑ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        )
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ rate limit
        await asyncio.sleep(remaining_time + 0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        request_timestamps[user_id] = time.time()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await wait_msg.edit_text('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...')
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f'‚úÖ Rate limit –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É')

    logger.info(f"üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π video_id: {video_id}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–æ–∫
    if video_id:
        # Show processing message
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ {video_id}")
        processing_msg = await update.message.reply_text('üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö...')
        
        # Get available transcripts with retry logic
        logger.info(f"üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è {video_id}")
        list_transcripts, success, error_msg = await get_available_transcripts_with_retry(video_id)
        
        if not success:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {error_msg}")
            log_and_notify_error(
                error=Exception(error_msg),
                context="get_available_transcripts",
                user_id=user_id,
                additional_info={"video_id": video_id}
            )
            await processing_msg.edit_text(f'‚ùå {error_msg}')
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(list_transcripts)} —è–∑—ã–∫–æ–≤")
        
        if not list_transcripts:
            logger.warning(f"‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
            await processing_msg.edit_text('‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.')
            return
        
        # Save video info for user
        context.user_data['video_id'] = video_id
        context.user_data['list_transcripts'] = list_transcripts
        
        # If only one language - offer action directly
        if len(list_transcripts) == 1:
            lang_code = list_transcripts[0].language_code
            context.user_data['lang_code'] = lang_code
            logger.info(f"üéØ –û–¥–∏–Ω —è–∑—ã–∫ –Ω–∞–π–¥–µ–Ω: {lang_code}")
            await processing_msg.edit_text(
                f'‚úÖ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {list_transcripts[0].language} ({lang_code}). –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?',
                reply_markup=build_action_keyboard()
            )
        else:
            logger.info(f"üåç –ù–∞–π–¥–µ–Ω–æ {len(list_transcripts)} —è–∑—ã–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–±–æ—Ä")
            await processing_msg.edit_text('‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_language_keyboard(list_transcripts))
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ YouTube —Å—Å—ã–ª–∫–∞ –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ Mind Map)
    if not video_id:
        logger.info(f"üìù –¢–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YouTube —Å—Å—ã–ª–∫–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å mind map")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è mind map
        if len(text) < 50:
            await update.message.reply_text(
                '‚ùì **–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ**\n\n'
                'üé¨ **–î–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTube:**\n'
                '‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å YouTube\n'
                '‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –µ—ë –≤ —á–∞—Ç\n'
                '‚Ä¢ –ü—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=...\n\n'
                'üé§ **–î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:**\n'
                '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω\n'
                '‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ\n\n'
                'üß† **–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Mind Map:**\n'
                '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)\n'
                '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã, —Å—Ç–∞—Ç—å–∏, –∑–∞–º–µ—Ç–∫–∏\n\n'
                'üí° **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá',
                reply_markup=build_main_keyboard()
            )
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å mind map
        if MIND_MAP_AVAILABLE:
            await update.message.reply_text(
                f'üß† **–û—Ç–ª–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Mind Map!**\n\n'
                f'üìù **–î–ª–∏–Ω–∞:** {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n'
                f'üéØ **–ß—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:**\n'
                '‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏\n'
                '‚Ä¢ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n'
                '‚Ä¢ Markdown —Ñ–∞–π–ª\n'
                '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–¥–µ–π\n\n'
                'üöÄ **–°–æ–∑–¥–∞—é Mind Map...**',
                reply_markup=build_main_keyboard()
            )
            
            # –°–æ–∑–¥–∞–µ–º mind map
            try:
                logger.info(f"üß† –°–æ–∑–¥–∞—é mind map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º mind map –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                results = await mind_map_generator.create_mind_map(text, "all")
                
                logger.info(f"‚úÖ Mind Map —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await send_mind_map_results(update, context, results, text)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mind map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await update.message.reply_text(
                    f'‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Mind Map**\n\n'
                    f'üîç **–î–µ—Ç–∞–ª–∏:** {str(e)}\n\n'
                    'üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n'
                    '‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ\n'
                    '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç\n'
                    '‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                    reply_markup=build_main_keyboard()
                )
        else:
            await update.message.reply_text(
                '‚ùå **Mind Map –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n'
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenRouter API –∫–ª—é—á.\n\n'
                'üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!**',
                reply_markup=build_main_keyboard()
            )
        return

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    logger.info(f'üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
    should_process, warning = await check_multiple_messages(user_id, 'voice')
    if not should_process:
        logger.info(f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        await update.message.reply_text(warning)
        return
    logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # Check user rate limit
    if not await rate_limit_check(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - request_timestamps.get(user_id, 0))
        logger.warning(f'‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {int(remaining_time)} —Å–µ–∫')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        wait_msg = await update.message.reply_text(
            f'‚ö†Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n'
            f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥\n'
            f'üîÑ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        )
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ rate limit
        await asyncio.sleep(remaining_time + 0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        request_timestamps[user_id] = time.time()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await wait_msg.edit_text('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...')
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f'‚úÖ Rate limit –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É')
    
    # Check if voice transcription is available
    if not voice_transcriber.is_available():
        logger.error(f'‚ùå API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (SONIOX_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)')
        await update.message.reply_text(
            '‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n'
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SONIOX_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
        )
        return
    
    voice = update.message.voice
    if not voice:
        logger.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        return
    
    logger.info(f'üìä –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {voice.duration} —Å–µ–∫, file_id: {voice.file_id}, —Ä–∞–∑–º–µ—Ä: {voice.file_size} –±–∞–π—Ç')
    
    # Check voice message duration and offer options for long messages
    if voice.duration > 1200:  # –ë–æ–ª–µ–µ 20 –º–∏–Ω—É—Ç
        logger.warning(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {voice.duration} —Å–µ–∫ (>{voice.duration//60} –º–∏–Ω)')
        await update.message.reply_text(
            '‚ö†Ô∏è **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**\n\n'
            f'üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)\n'
            'üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 20 –º–∏–Ω—É—Ç\n\n'
            'üí° **–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:**\n'
            '‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ 20 –º–∏–Ω—É—Ç\n'
            '‚Ä¢ ‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π\n'
            '‚Ä¢ üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
            '‚Ä¢ üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é —á–∞—Å—Ç—å\n\n'
            'üîÑ **–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–π—á–∞—Å** (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π):',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('üé§ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å', callback_data='voice_force')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
        ])
        )
        logger.info(f'üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø—Ü–∏–∏ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
        return
    elif voice.duration > 600:  # –ë–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        logger.info(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {voice.duration} —Å–µ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['pending_voice_file_id'] = voice.file_id
        
        await update.message.reply_text(
            '‚ö†Ô∏è **–î–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n'
            f'üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)\n'
            '‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã\n\n'
            'üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n'
            '‚Ä¢ –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏\n'
            '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∑–≤—É–∫–∞\n\n'
            'üîÑ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?**',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='voice_continue')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
            ])
        )
        logger.info(f'üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–ª–∏–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
        return
    
    # Show processing message
    logger.info(f'üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫)')
    processing_msg = await update.message.reply_text('üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
    
    try:
        # Download voice file
        logger.info(f'üì• –ó–∞–≥—Ä—É–∂–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª {voice.file_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        file = await context.bot.get_file(voice.file_id)
        logger.info(f'‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file.file_size} –±–∞–π—Ç')
        
        # Create temporary file
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        logger.info(f'üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {temp_path}')
        
        # Download the file
        await file.download_to_drive(temp_path)
        logger.info(f'‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {temp_path}')
        
        # Transcribe voice message
        logger.info(f'üé§ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        start_time = time.time()
        success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
        processing_time = time.time() - start_time
        
        logger.info(f'‚è±Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥, —É—Å–ø–µ—Ö: {success}')
        
        # Clean up temporary file
        try:
            os.unlink(temp_path)
            logger.info(f'üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path} —É–¥–∞–ª–µ–Ω')
        except Exception as cleanup_error:
            logger.warning(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path}: {cleanup_error}')
        
        if success:
            logger.info(f'‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤')
            
            # Format response
            response_parts = []
            response_parts.append(f"üé§ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)**")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            formatted_text = format_transcription_text(text)
            response_parts.append(f"\nüìù **–¢–µ–∫—Å—Ç:**\n{formatted_text}")
            
            # Add statistics
            if stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")

                response_parts.append(f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {stats.get('text_length', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats.get('tokens_count', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('confidence_avg', 0):.2f}")
                response_parts.append(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            
            full_response = "\n".join(response_parts)
            
            # Send response
            if len(full_response) <= 3000:  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è Markdown
                logger.info(f'üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—Ç–µ–∫—Å—Ç)')
                try:
                    await processing_msg.edit_text(full_response, parse_mode='Markdown')
                except Exception as markdown_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {markdown_error}")
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown
                    try:
                        await processing_msg.edit_text(full_response)
                    except Exception as fallback_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ Markdown: {fallback_error}")
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                        safe_text = "üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                        await processing_msg.edit_text(safe_text)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–π–ª–æ–º
                        file = BytesIO(full_response.encode('utf-8'))
                        timestamp = int(time.time())
                        file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                        await update.message.reply_document(InputFile(file))
            else:
                logger.info(f'üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
                await processing_msg.edit_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                timestamp = int(time.time())
                file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                await update.message.reply_document(InputFile(file))
        else:
            logger.error(f'‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}')
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–±–µ–∑ stack trace, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
            logger.error(f'üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:')
            logger.error(f'   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {text}')
            logger.error(f'   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}')
            logger.error(f'   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            try:
                if os.path.exists(temp_path):
                    file_size = os.path.getsize(temp_path)
                    logger.error(f'üìÅ –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç')
                else:
                    logger.error('üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            except Exception as diag_error:
                logger.error(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Ñ–∞–π–ª–∞: {diag_error}')
            
            log_and_notify_error(
                error=Exception(text),
                context="voice_transcription_failed",
                user_id=user_id,
                additional_info={
                    "duration": voice.duration, 
                    "file_id": voice.file_id,
                    "error_message": text,
                    "processing_time": processing_time
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            user_error_message = f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}'
            await processing_msg.edit_text(user_error_message)
            
    except Exception as e:
        logger.error(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}', exc_info=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        import traceback
        logger.error(f'Stack trace –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {traceback.format_exc()}')
        
        log_and_notify_error(
            error=e,
            context="voice_transcription_exception",
            user_id=user_id,
            additional_info={
                "duration": voice.duration, 
                "file_id": voice.file_id,
                "error_type": type(e).__name__,
                "error_message": str(e)
            }
        )
        
        try:
            user_error_message = f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{str(e)}'
            await processing_msg.edit_text(user_error_message)
        except Exception as edit_error:
            logger.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {edit_error}')
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            except Exception as simple_error:
                logger.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {simple_error}')

async def handle_forwarded_voice_series(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Å–µ—Ä–∏—é"""
    user_id = update.effective_user.id
    
    logger.info(f'üîÑ –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if not await rate_limit_check(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - request_timestamps.get(user_id, 0))
        logger.warning(f'‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {int(remaining_time)} —Å–µ–∫')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        wait_msg = await update.message.reply_text(
            f'‚ö†Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n'
            f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥\n'
            f'üîÑ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        )
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ rate limit
        await asyncio.sleep(remaining_time + 0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        request_timestamps[user_id] = time.time()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await wait_msg.edit_text('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...')
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f'‚úÖ Rate limit –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if not voice_transcriber.is_available():
        logger.error(f'‚ùå API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        await update.message.reply_text(
            '‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n'
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SONIOX_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice = update.message.voice
    if not voice:
        logger.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        return
    
    logger.info(f'üìä –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {voice.duration} —Å–µ–∫, file_id: {voice.file_id}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if voice.duration > 1200:  # –ë–æ–ª–µ–µ 20 –º–∏–Ω—É—Ç
        await update.message.reply_text(
            '‚ö†Ô∏è **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ**\n\n'
            f'üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)\n'
            'üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 20 –º–∏–Ω—É—Ç\n\n'
            'üí° **–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:**\n'
            '‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ 20 –º–∏–Ω—É—Ç\n'
            '‚Ä¢ ‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π\n'
            '‚Ä¢ üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
            '‚Ä¢ üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é —á–∞—Å—Ç—å\n\n'
            'üîÑ **–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–π—á–∞—Å** (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π):',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('üé§ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å', callback_data='voice_force')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
            ])
        )
        return
    elif voice.duration > 600:  # –ë–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['pending_voice_file_id'] = voice.file_id
        
        await update.message.reply_text(
            '‚ö†Ô∏è **–î–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n'
            f'üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫—É–Ω–¥ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)\n'
            '‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã\n\n'
            'üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n'
            '‚Ä¢ –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏\n'
            '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∑–≤—É–∫–∞\n\n'
            'üîÑ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É?**',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='voice_continue')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
            ])
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ
    logger.info(f'üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text('üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        file = await context.bot.get_file(voice.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await file.download_to_drive(temp_path)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        start_time = time.time()
        success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
        processing_time = time.time() - start_time
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except Exception:
            pass
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_parts = []
            response_parts.append(f"üé§ **–ü–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)**")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            formatted_text = format_transcription_text(text)
            response_parts.append(f"\nüìù **–¢–µ–∫—Å—Ç:**\n{formatted_text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")

                response_parts.append(f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {stats.get('text_length', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats.get('tokens_count', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('confidence_avg', 0):.2f}")
                response_parts.append(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            
            full_response = "\n".join(response_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(full_response) <= 3000:
                await processing_msg.edit_text(full_response, parse_mode='Markdown')
            else:
                await processing_msg.edit_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                timestamp = int(time.time())
                file.name = f'forwarded_voice_transcription_{user_id}_{timestamp}.txt'
                await update.message.reply_document(InputFile(file))
        else:
            await processing_msg.edit_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}')
            
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}', exc_info=True)
        await processing_msg.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')

async def handle_multiple_forwarded_voice_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, voice_messages: list):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    logger.info(f'üé§ –ü–æ–ª—É—á–µ–Ω–∞ —Å–µ—Ä–∏—è –∏–∑ {len(voice_messages)} –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if not await rate_limit_check(user_id):
        remaining_time = MIN_REQUEST_INTERVAL - (time.time() - request_timestamps.get(user_id, 0))
        logger.warning(f'‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {int(remaining_time)} —Å–µ–∫')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        wait_msg = await update.message.reply_text(
            f'‚ö†Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n'
            f'‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥\n'
            f'üîÑ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–µ—Ä–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        )
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ rate limit
        await asyncio.sleep(remaining_time + 0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        request_timestamps[user_id] = time.time()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await wait_msg.edit_text('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...')
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f'‚úÖ Rate limit –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä–∏–∏')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if not voice_transcriber.is_available():
        logger.error(f'‚ùå API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        await update.message.reply_text(
            '‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n'
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SONIOX_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∏
    total_duration = sum(voice.duration for voice in voice_messages)
    
    if total_duration > 3600:  # –ë–æ–ª–µ–µ 1 —á–∞—Å–∞ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await update.message.reply_text(
            '‚ö†Ô∏è **–°–µ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è**\n\n'
            f'üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} —Å–µ–∫—É–Ω–¥ ({total_duration//60} –º–∏–Ω)\n'
            'üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 1 —á–∞—Å –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n'
            'üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n'
            '‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π\n'
            '‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º\n'
            '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π'
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
    await update.message.reply_text(
        f'üé§ **–°–µ—Ä–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n'
        f'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(voice_messages)}\n'
        f'‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} —Å–µ–∫—É–Ω–¥ ({total_duration//60} –º–∏–Ω {total_duration%60} —Å–µ–∫)\n\n'
        'üîÑ **–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å—é —Å–µ—Ä–∏—é?**',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–∏—é', callback_data='voice_series_multiple')],
            [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='voice_cancel')]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['pending_voice_series'] = [
        {
            'voice': voice,
            'timestamp': time.time()
        } for voice in voice_messages
    ]

async def process_multiple_forwarded_voice_series(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        voice_series = context.user_data.get('pending_voice_series', [])
        if not voice_series:
            await query.edit_message_text('‚ùå –°–µ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return
        
        logger.info(f'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ—Ä–∏—é –∏–∑ {len(voice_series)} –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        
        all_texts = []
        total_duration = 0
        total_tokens = 0
        total_confidence = 0
        successful_transcriptions = 0
        
        for i, voice_data in enumerate(voice_series):
            voice = voice_data['voice']
            logger.info(f'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(voice_series)}: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {voice.duration} —Å–µ–∫')
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await context.bot.get_file(voice.file_id)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                    temp_path = temp_file.name
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await file.download_to_drive(temp_path)
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
                success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_path)
                except Exception:
                    pass
                
                if success and text:
                    all_texts.append(text)
                    total_duration += voice.duration
                    total_tokens += stats.get('tokens_count', 0)
                    total_confidence += stats.get('confidence_avg', 0)
                    successful_transcriptions += 1
                    logger.info(f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤')
                else:
                    logger.warning(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {text}')
                    
            except Exception as e:
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}')
        
        if not all_texts:
            await query.edit_message_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏.')
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('pending_voice_series', None)
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
        combined_text = " ".join(all_texts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–∏–∏
        combined_stats = {
            'messages_count': len(voice_series),
            'successful_transcriptions': successful_transcriptions,
            'total_duration': total_duration,
            'total_tokens': total_tokens,
            'average_confidence': total_confidence / successful_transcriptions if successful_transcriptions > 0 else 0,
            'text_length': len(combined_text)
        }
        
        logger.info(f'‚úÖ –°–µ—Ä–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(all_texts)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_parts = []
        response_parts.append("üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –°–ï–†–ò–ò –ü–ï–†–ï–°–´–õ–ê–ï–ú–´–• –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô:**")
        response_parts.append(combined_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–∏–∏
        if combined_stats:
            response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–∏–∏:**")
            response_parts.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏: {combined_stats.get('messages_count', 0)}")
            response_parts.append(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {combined_stats.get('successful_transcriptions', 0)}")
            response_parts.append(f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {combined_stats.get('total_duration', 0)} —Å–µ–∫—É–Ω–¥")
            response_parts.append(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {combined_stats.get('total_tokens', 0)}")
            response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combined_stats.get('average_confidence', 0):.2f}")
            response_parts.append(f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {combined_stats.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        full_response = "\n".join(response_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(full_response) <= 3000:
            await query.edit_message_text(full_response, parse_mode='Markdown')
        else:
            await query.edit_message_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–µ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
            file = BytesIO(full_response.encode('utf-8'))
            timestamp = int(time.time())
            file.name = f'multiple_forwarded_voice_series_{user_id}_{timestamp}.txt'
            await context.bot.send_document(chat_id=user_id, document=InputFile(file))
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('pending_voice_series', None)
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}', exc_info=True)
        await query.edit_message_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.')
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        context.user_data.pop('pending_voice_series', None)



async def process_forwarded_voice_series(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        series_key = f"forwarded_series_{user_id}"
        series_data = context.user_data.get(series_key, {})
        messages = series_data.get('messages', [])
        
        if not messages:
            await query.edit_message_text('‚ùå –°–µ—Ä–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return
        
        logger.info(f'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ—Ä–∏—é –∏–∑ {len(messages)} –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        
        all_texts = []
        total_duration = 0
        total_tokens = 0
        total_confidence = 0
        successful_transcriptions = 0
        
        for i, msg in enumerate(messages):
            voice = msg['voice']
            logger.info(f'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{len(messages)}: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {voice.duration} —Å–µ–∫')
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await context.bot.get_file(voice.file_id)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                    temp_path = temp_file.name
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await file.download_to_drive(temp_path)
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
                success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_path)
                except Exception:
                    pass
                
                if success and text:
                    all_texts.append(text)
                    total_duration += voice.duration
                    total_tokens += stats.get('tokens_count', 0)
                    total_confidence += stats.get('confidence_avg', 0)
                    successful_transcriptions += 1
                    logger.info(f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤')
                else:
                    logger.warning(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {text}')
                    
            except Exception as e:
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}')
        
        if not all_texts:
            await query.edit_message_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏.')
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop(series_key, None)
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
        combined_text = " ".join(all_texts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–∏–∏
        combined_stats = {
            'messages_count': len(messages),
            'successful_transcriptions': successful_transcriptions,
            'total_duration': total_duration,
            'total_tokens': total_tokens,
            'average_confidence': total_confidence / successful_transcriptions if successful_transcriptions > 0 else 0,
            'text_length': len(combined_text)
        }
        
        logger.info(f'‚úÖ –°–µ—Ä–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(all_texts)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_parts = []
        response_parts.append("üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –°–ï–†–ò–ò –ü–ï–†–ï–°–´–õ–ê–ï–ú–´–• –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô:**")
        response_parts.append(combined_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–∏–∏
        if combined_stats:
            response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–∏–∏:**")
            response_parts.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ä–∏–∏: {combined_stats.get('messages_count', 0)}")
            response_parts.append(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {combined_stats.get('successful_transcriptions', 0)}")
            response_parts.append(f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {combined_stats.get('total_duration', 0)} —Å–µ–∫—É–Ω–¥")
            response_parts.append(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {combined_stats.get('total_tokens', 0)}")
            response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combined_stats.get('average_confidence', 0):.2f}")
            response_parts.append(f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {combined_stats.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        full_response = "\n".join(response_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(full_response) <= 3000:
            await query.edit_message_text(full_response, parse_mode='Markdown')
        else:
            await query.edit_message_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–µ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
            file = BytesIO(full_response.encode('utf-8'))
            timestamp = int(time.time())
            file.name = f'forwarded_voice_series_{user_id}_{timestamp}.txt'
            await context.bot.send_document(chat_id=user_id, document=InputFile(file))
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop(series_key, None)
        
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}', exc_info=True)
        await query.edit_message_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.')
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        series_key = f"forwarded_series_{user_id}"
        context.user_data.pop(series_key, None)

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.replace('lang_', '')
    context.user_data['lang_code'] = lang_code
    await query.edit_message_text(f'–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?', reply_markup=build_action_keyboard())

async def action_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data.replace('action_', '')
    context.user_data['action'] = action
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    current_state = {
        'video_id': context.user_data.get('video_id'),
        'lang_code': context.user_data.get('lang_code'),
        'action': action,
        'model_index': context.user_data.get('model_index'),
        'with_time': context.user_data.get('with_time')
    }
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ '{action}'. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    if action == 'subtitles':
        # –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã - —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_format_keyboard())
    elif action in ['ai_summary', 'only_summary']:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
        logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}'")
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_format_keyboard())



async def format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    with_time = query.data == 'format_with_time'
    context.user_data['with_time'] = with_time
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    user_id = query.from_user.id
    action = context.user_data.get('action')
    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç {'—Å –º–µ—Ç–∫–∞–º–∏' if with_time else '–±–µ–∑ –º–µ—Ç–æ–∫'} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}'")
    
    await process_request(query, context)

async def process_request(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–ª—É—á–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∏/–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é"""
    video_id = context.user_data.get('video_id')
    lang_code = context.user_data.get('lang_code')
    action = context.user_data.get('action')
    with_time = context.user_data.get('with_time', False)
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: video_id={video_id}, lang_code={lang_code}, action={action}, with_time={with_time}")
    
    if not video_id or not lang_code:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç video_id –∏–ª–∏ lang_code: video_id={video_id}, lang_code={lang_code}")
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ —è–∑—ã–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
        return
    
    # Show processing message
    logger.info(f"üìù –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
    await query.edit_message_text('üîÑ –ü–æ–ª—É—á–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã...')
    
    # Get transcript with retry logic
    logger.info(f"üé¨ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {video_id} –Ω–∞ —è–∑—ã–∫–µ {lang_code}")
    transcript, success, error_msg = await get_transcript_with_retry(video_id, [lang_code])
    
    if not success:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã: {error_msg}")
        log_and_notify_error(
            error=Exception(error_msg),
            context="get_transcript",
            user_id=query.from_user.id,
            additional_info={"video_id": video_id, "lang_code": lang_code}
        )
        await query.edit_message_text(f'‚ùå {error_msg}')
        return
    
    logger.info(f"‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {len(transcript)} —Å—Ç—Ä–æ–∫")
    subtitles = format_subtitles(transcript, with_time=with_time)
    raw_subtitles = format_subtitles(transcript, with_time=False)  # –î–ª—è –ò–ò –±–µ–∑ –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    
    format_str = '—Å –º–µ—Ç–∫–∞–º–∏' if with_time else '–±–µ–∑ –º–µ—Ç–æ–∫'
    
    if action == 'subtitles':
        # –¢–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã
        logger.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã")
        await send_subtitles(query, subtitles, video_id, lang_code, format_str, len(transcript))
    
    elif action in ['ai_summary', 'only_summary']:
        # –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        text_check = summarizer.check_text_length(raw_subtitles)
        
        if not text_check["can_process"]:
            # –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await query.edit_message_text(
                f"‚ùå **–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
                f"üìè –†–∞–∑–º–µ—Ä: {text_check['length']:,} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üî¢ –ß–∞—Å—Ç–µ–π: {text_check['chunks']}\n\n"
                f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {summarizer.max_text_length:,} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        if text_check["warning"]:
            await query.edit_message_text(
                f"ü§ñ **–ù–∞—á–∏–Ω–∞—é –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é**\n\n"
                f"{text_check['warning']}\n\n"
                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
        else:
            await query.edit_message_text('ü§ñ –°–æ–∑–¥–∞—é –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2-3 –º–∏–Ω—É—Ç.')
        
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            summary, stats = await summarizer.summarize_text(raw_subtitles)
            logger.info(f"‚úÖ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_parts = []
            
            if action == 'ai_summary':
                # –°—É–±—Ç–∏—Ç—Ä—ã + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                response_parts.append("üìÑ **–°–£–ë–¢–ò–¢–†–´:**")
                if len(subtitles) <= 2000:
                    response_parts.append(subtitles[:2000])
                    if len(subtitles) > 2000:
                        response_parts.append("... (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ñ–∞–π–ª–µ)")
                else:
                    response_parts.append("(–°—É–±—Ç–∏—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª–æ–º)")
            
            response_parts.append("\nü§ñ **–ò–ò-–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:**")
            response_parts.append(summary)
            
            # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            source_language = stats.get('source_language', 'unknown')
            if source_language != 'ru':
                logger.info(f"üåç –Ø–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π ({source_language}), —Å–æ–∑–¥–∞—é –ø–µ—Ä–µ–≤–æ–¥...")
                await query.edit_message_text('üåç –°–æ–∑–¥–∞—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫...')
                
                try:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                    translation = await summarizer.translate_to_russian(summary, source_language)
                    response_parts.append("\nüá∑üá∫ **–ü–ï–†–ï–í–û–î –ù–ê –†–£–°–°–ö–ò–ô:**")
                    response_parts.append(translation)
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as translation_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {translation_error}")
                    response_parts.append("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
            response_parts.append(f"‚Ä¢ –ú–æ–¥–µ–ª—å: {stats.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            response_parts.append(f"‚Ä¢ –°—Ç—Ä–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(transcript)}")
            response_parts.append(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å—Ç–µ–π: {stats.get('chunks', 0)}")
            response_parts.append(f"‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {stats.get('original_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            response_parts.append(f"‚Ä¢ –†–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {stats.get('summary_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            response_parts.append(f"‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫: {source_language}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ fallback –º–µ—Ö–∞–Ω–∏–∑–º–µ
            if stats.get('fallback_used'):
                response_parts.append(f"‚Ä¢ ‚ö†Ô∏è Fallback: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            if stats.get('final_summary_failed'):
                response_parts.append(f"‚Ä¢ ‚ö†Ô∏è –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç API
            if 'prompt_tokens' in stats:
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–∞: {stats.get('prompt_tokens', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞: {stats.get('completion_tokens', 0)}")
                response_parts.append(f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('total_tokens', 0)}")
                response_parts.append(f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats.get('finish_reason', 'unknown')}")
            
            full_response = "\n".join(response_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if len(full_response) <= 3000:  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è Markdown
                try:
                    await query.edit_message_text(full_response, parse_mode='Markdown')
                except Exception as markdown_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {markdown_error}")
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown
                    try:
                        await query.edit_message_text(full_response)
                    except Exception as fallback_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ Markdown: {fallback_error}")
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                        safe_text = "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                        await query.edit_message_text(safe_text)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–π–ª–æ–º
                        file = BytesIO(full_response.encode('utf-8'))
                        filename = await create_filename(video_id, "summary", lang_code)
                        file.name = filename
                        await query.message.reply_document(InputFile(file))
            else:
                await query.edit_message_text("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                filename = await create_filename(video_id, "summary", lang_code)
                file.name = filename
                await query.message.reply_document(InputFile(file))
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã —Ñ–∞–π–ª–æ–º
            if action == 'ai_summary' and len(subtitles) > 2000:
                subs_file = BytesIO(subtitles.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                subs_filename = await create_filename(video_id, "subtitles", lang_code, format_str)
                subs_file.name = subs_filename
                await query.message.reply_document(
                    InputFile(subs_file), 
                    caption=f'–ü–æ–ª–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã\n–§–æ—Ä–º–∞—Ç: {format_str}'
                )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await ask_user_satisfaction(query, context, summary, stats, raw_subtitles, action, subtitles, video_id, lang_code, format_str)
            
        except Exception as ai_error:
            logger.error(f'–û—à–∏–±–∫–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {ai_error}')
            log_and_notify_error(
                error=ai_error,
                context="ai_summarization",
                user_id=query.from_user.id,
                additional_info={
                    "video_id": video_id,
                    "lang_code": lang_code,
                    "action": action
                }
            )
            await query.edit_message_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {ai_error}')

async def send_subtitles(query, subtitles, video_id, lang_code, format_str, transcript_count):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É–±—Ç–∏—Ç—Ä—ã"""
    stat_msg = f'–Ø–∑—ã–∫: {lang_code}\n–°—Ç—Ä–æ–∫: {transcript_count}\n–§–æ—Ä–º–∞—Ç: {format_str}'
    
    if len(subtitles) <= 4000:
        await query.edit_message_text(subtitles)
        await query.message.reply_text(stat_msg)
    else:
        file = BytesIO(subtitles.encode('utf-8'))
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = await create_filename(video_id, "subtitles", lang_code, format_str)
        file.name = filename
        await query.edit_message_text('–°—É–±—Ç–∏—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.')
        await query.message.reply_document(InputFile(file), caption=stat_msg)

async def main_keyboard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'help':
        await query.edit_message_text(HELP_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'learn_more':
        await query.edit_message_text(LEARN_MORE_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'quick_help':
        await query.edit_message_text(QUICK_HELP_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'get_subs':
        await query.edit_message_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID.')
    elif query.data == 'about':
        await query.edit_message_text(ABOUT_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'info':
        await query.edit_message_text(INFO_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'voice_info':
        await query.edit_message_text(
            'üé§ **–†–ê–°–®–ò–§–†–û–í–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô**\n\n'
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n'
            '‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**\n'
            '‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫\n'
            '‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n'
            '‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç\n\n'
            '‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n'
            '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)\n'
            '‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞\n'
            '‚Ä¢ –ß–µ—Ç–∫–∞—è —Ä–µ—á—å\n\n'
            'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**',
            reply_markup=build_main_keyboard()
        )
    elif query.data == 'mind_map_info':
        if not MIND_MAP_AVAILABLE:
            await query.edit_message_text(
                '‚ùå **Mind Map –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n'
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenRouter API –∫–ª—é—á.\n\n'
                'üìù **–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**\n'
                '1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://openrouter.ai/\n'
                '2. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª\n'
                '3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n'
                'üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!',
                reply_markup=build_main_keyboard()
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Mind Map
        user_id = query.from_user.id
        await set_user_state(user_id, 'expecting_mind_map_text')
        
        await query.edit_message_text(
            'üß† **–°–û–ó–î–ê–ù–ò–ï MIND MAP**\n\n'
            '‚úÖ **–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é Mind Map!**\n\n'
            'üìù **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç:**\n'
            '‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã YouTube\n'
            '‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
            '‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n'
            '‚Ä¢ –°—Ç–∞—Ç—å–∏, –∑–∞–º–µ—Ç–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n'
            'üéØ **–ß—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:**\n'
            '‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏\n'
            '‚Ä¢ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n'
            '‚Ä¢ Markdown —Ñ–∞–π–ª\n'
            '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–¥–µ–π\n\n'
            'üöÄ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**\n\n'
            'üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Ç–µ–∫—Å—Ç, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∫–∞—Ä—Ç–∞!\n\n'
            'üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç –¥–ª—è Mind Map...',
            reply_markup=build_main_keyboard()
        )
    elif query.data == 'reset':
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        context.user_data.clear()
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await clear_user_state(user_id)
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        await query.edit_message_text(
            'üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ.',
            reply_markup=build_main_keyboard()
        )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.', reply_markup=build_main_keyboard())

async def voice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f'üìû –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    
    try:
        await query.answer()
        
        if query.data == 'voice_cancel':
            logger.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id
            context.user_data.pop('pending_voice_file_id', None)
            await query.edit_message_text('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
            return
        
        elif query.data == 'voice_continue':
            # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            file_id = context.user_data.get('pending_voice_file_id')
            if not file_id:
                logger.error(f'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω file_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
                await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.')
                return
            
            logger.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {file_id}')
            logger.info(f'üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
            await query.edit_message_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id
            context.user_data.pop('pending_voice_file_id', None)
            
            await process_voice_message_by_file_id(update, context, file_id, force=False)
        
        elif query.data.startswith('voice_force_'):
            file_id = query.data.replace('voice_force_', '')
            logger.info(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {file_id}')
            logger.info(f'üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
            await query.edit_message_text('‚ö†Ô∏è **–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç.')
            await process_voice_message_by_file_id(update, context, file_id, force=True)
        
        elif query.data.startswith('voice_continue_'):
            file_id = query.data.replace('voice_continue_', '')
            logger.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {file_id}')
            logger.info(f'üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
            await query.edit_message_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            await process_voice_message_by_file_id(update, context, file_id, force=False)
        
        elif query.data.startswith('voice_single_'):
            series_id = query.data.replace('voice_single_', '')
            logger.info(f'üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–∏–∏: {series_id}')
            await query.edit_message_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            await process_single_voice_from_series(update, context, series_id)
        
        elif query.data.startswith('voice_series_'):
            series_id = query.data.replace('voice_series_', '')
            logger.info(f'üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {series_id}')
            await query.edit_message_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...')
            await process_voice_series_complete(update, context, series_id)
        
        elif query.data.startswith('voice_wait_'):
            series_id = query.data.replace('voice_wait_', '')
            logger.info(f'‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ—à–∏–ª –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ä–∏—é: {series_id}')
            await query.edit_message_text(
                '‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Ä–∏—é**\n\n'
                'üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–∏–∏\n'
                '‚è±Ô∏è –ò–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n'
                'üîÑ **–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:**',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–∏—é', callback_data=f'voice_series_{series_id}')],
                    [InlineKeyboardButton('üé§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data=f'voice_single_{series_id}')]
                ])
            )
        
        elif query.data == 'voice_series_multiple':
            logger.info(f'üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
            await query.edit_message_text('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–µ—Ä–∏—é –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...')
            await process_multiple_forwarded_voice_series(update, context)
        
        else:
            logger.warning(f'‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
            await query.edit_message_text('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')
            
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –≤ voice_callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}', exc_info=True)
        try:
            await query.edit_message_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.')
        except:
            pass


async def process_voice_message_by_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str, force: bool = False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ file_id"""
    user_id = update.effective_user.id
    
    logger.info(f'üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, file_id: {file_id}, force: {force}')
    try:
        # Download voice file
        logger.info(f'üì• –ó–∞–≥—Ä—É–∂–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª {file_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        file = await context.bot.get_file(file_id)
        logger.info(f'‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file.file_size} –±–∞–π—Ç')
        
        # Create temporary file
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        logger.info(f'üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {temp_path}')
        
        # Download the file
        await file.download_to_drive(temp_path)
        logger.info(f'‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {temp_path}')
        
        # Create a mock voice object for the transcriber
        class MockVoice:
            def __init__(self, file_id, duration=300):
                self.file_id = file_id
                self.duration = duration
        
        voice = MockVoice(file_id, duration=1200 if force else 600)
        logger.info(f'üé§ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫)')
        
        # Transcribe voice message
        start_time = time.time()
        success, text, stats = await voice_transcriber.transcribe_voice_message(temp_path)
        processing_time = time.time() - start_time
        
        logger.info(f'‚è±Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥, —É—Å–ø–µ—Ö: {success}')
        
        # Clean up temporary file
        try:
            os.unlink(temp_path)
            logger.info(f'üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path} —É–¥–∞–ª–µ–Ω')
        except Exception as cleanup_error:
            logger.warning(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path}: {cleanup_error}')
        
        if success:
            logger.info(f'‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤')
            
            # Format response
            response_parts = []
            response_parts.append(f"üé§ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫ ({voice.duration//60} –º–∏–Ω {voice.duration%60} —Å–µ–∫)**")
            if force:
                response_parts.append("‚ö†Ô∏è *–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ*")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            formatted_text = format_transcription_text(text)
            response_parts.append(f"\nüìù **–¢–µ–∫—Å—Ç:**\n{formatted_text}")
            
            # Add statistics
            if stats:
                response_parts.append(f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")

                response_parts.append(f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {stats.get('text_length', 0)}")
                response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {stats.get('tokens_count', 0)}")
                response_parts.append(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('confidence_avg', 0):.2f}")
                response_parts.append(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            
            full_response = "\n".join(response_parts)
            
            # Send response
            if len(full_response) <= 3000:  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è Markdown
                logger.info(f'üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—Ç–µ–∫—Å—Ç)')
                try:
                    await update.callback_query.edit_message_text(full_response, parse_mode='Markdown')
                except Exception as markdown_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {markdown_error}")
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ Markdown
                    try:
                        await update.callback_query.edit_message_text(full_response)
                    except Exception as fallback_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ Markdown: {fallback_error}")
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                        safe_text = "üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                        await update.callback_query.edit_message_text(safe_text)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–π–ª–æ–º
                        file = BytesIO(full_response.encode('utf-8'))
                        timestamp = int(time.time())
                        file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                        await update.callback_query.message.reply_document(InputFile(file))
            else:
                logger.info(f'üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
                await update.callback_query.edit_message_text("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.")
                file = BytesIO(full_response.encode('utf-8'))
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                timestamp = int(time.time())
                file.name = f'voice_transcription_{user_id}_{timestamp}.txt'
                await update.callback_query.message.reply_document(InputFile(file))
        else:
            logger.error(f'‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}')
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–±–µ–∑ stack trace, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
            logger.error(f'üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:')
            logger.error(f'   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {text}')
            logger.error(f'   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}')
            logger.error(f'   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            try:
                if os.path.exists(temp_path):
                    file_size = os.path.getsize(temp_path)
                    logger.error(f'üìÅ –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç')
                else:
                    logger.error('üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            except Exception as diag_error:
                logger.error(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Ñ–∞–π–ª–∞: {diag_error}')
            
            log_and_notify_error(
                error=Exception(text),
                context="voice_transcription_by_file_id_failed",
                user_id=user_id,
                additional_info={
                    "file_id": file_id, 
                    "force": force,
                    "error_message": text,
                    "processing_time": processing_time
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            user_error_message = f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}'
            await update.callback_query.edit_message_text(user_error_message)
            
    except Exception as e:
        logger.error(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ file_id {file_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}', exc_info=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        import traceback
        logger.error(f'Stack trace –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {traceback.format_exc()}')
        
        log_and_notify_error(
            error=e,
            context="voice_transcription_by_file_id_exception",
            user_id=user_id,
            additional_info={
                "file_id": file_id, 
                "force": force,
                "error_type": type(e).__name__,
                "error_message": str(e)
            }
        )
        
        try:
            user_error_message = f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{str(e)}'
            await update.callback_query.edit_message_text(user_error_message)
        except Exception as edit_error:
            logger.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {edit_error}')
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await update.callback_query.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            except Exception as simple_error:
                logger.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {simple_error}')

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    
    await update.message.reply_text(
        'üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ.',
        reply_markup=build_main_keyboard()
    )

async def ask_user_satisfaction(query, context, summary, stats, raw_subtitles, action, subtitles, video_id, lang_code, format_str):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    context.user_data['pending_summary_data'] = {
        'summary': summary,
        'stats': stats,
        'raw_subtitles': raw_subtitles,
        'action': action,
        'subtitles': subtitles,
        'video_id': video_id,
        'lang_code': lang_code,
        'format_str': format_str
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    satisfaction_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton('üëç –î–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º', callback_data='satisfaction_good')],
        [InlineKeyboardButton('üëé –ù–µ –¥–æ–≤–æ–ª–µ–Ω, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å', callback_data='satisfaction_bad')],
        [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='satisfaction_cancel')]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await query.message.reply_text(
        'ü§ñ **–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏?**\n\n'
        '–ï—Å–ª–∏ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã - –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n'
        '–ï—Å–ª–∏ –Ω–µ—Ç - —è –ø–æ–ø—Ä–æ–±—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.',
        reply_markup=satisfaction_keyboard
    )
    
    logger.info(f"üë§ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –≤–∏–¥–µ–æ {video_id}")

async def satisfaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    if query.data == 'satisfaction_good':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await handle_satisfaction_good(query, context)
    elif query.data == 'satisfaction_bad':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–≤–æ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
        await handle_satisfaction_bad(query, context)
    elif query.data == 'satisfaction_cancel':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç
        await handle_satisfaction_cancel(query, context)

async def handle_satisfaction_good(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    user_id = query.from_user.id
    pending_data = context.user_data.get('pending_summary_data', {})
    
    if not pending_data:
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    stats = pending_data.get('stats', {})
    model_name = stats.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    text_length = stats.get('original_length', 0)
    summary_length = stats.get('summary_length', 0)
    
    summarizer.log_user_feedback(
        model_name=model_name,
        text_length=text_length,
        summary_length=summary_length,
        user_satisfied=True
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('pending_summary_data', None)
    
    await query.edit_message_text(
        '‚úÖ **–û—Ç–ª–∏—á–Ω–æ!** –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n'
        f'ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}\n'
        f'üìä –†–∞–∑–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {summary_length} —Å–∏–º–≤–æ–ª–æ–≤\n\n'
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôè'
    )
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é {model_name}")

async def handle_satisfaction_bad(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø—Ä–æ–±—É–µ—Ç –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"""
    user_id = query.from_user.id
    pending_data = context.user_data.get('pending_summary_data', {})
    
    if not pending_data:
        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    stats = pending_data.get('stats', {})
    model_name = stats.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    text_length = stats.get('original_length', 0)
    summary_length = stats.get('summary_length', 0)
    
    summarizer.log_user_feedback(
        model_name=model_name,
        text_length=text_length,
        summary_length=summary_length,
        user_satisfied=False,
        feedback_reason="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–≤–æ–ª–µ–Ω –∫–∞—á–µ—Å—Ç–≤–æ–º"
    )
    
    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
    await query.edit_message_text('üîÑ –ü—Ä–æ–±—É—é –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...')
    
    try:
        raw_subtitles = pending_data.get('raw_subtitles', '')
        action = pending_data.get('action', '')
        subtitles = pending_data.get('subtitles', '')
        video_id = pending_data.get('video_id', '')
        lang_code = pending_data.get('lang_code', '')
        format_str = pending_data.get('format_str', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        new_summary, new_stats, success = await summarizer.summarize_with_retry(raw_subtitles, max_retries=2)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pending_data.update({
                'summary': new_summary,
                'stats': new_stats
            })
            context.user_data['pending_summary_data'] = pending_data
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            new_model = new_stats.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            await query.edit_message_text(
                f'ü§ñ **–ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–æ–¥–µ–ª—å—é {new_model}**\n\n'
                f'{new_summary[:1000]}{"..." if len(new_summary) > 1000 else ""}\n\n'
                '–ö–∞–∫ –≤–∞–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton('üëç –î–æ–≤–æ–ª–µ–Ω', callback_data='satisfaction_good')],
                    [InlineKeyboardButton('üëé –í—Å–µ –µ—â–µ –Ω–µ –¥–æ–≤–æ–ª–µ–Ω', callback_data='satisfaction_bad')],
                    [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='satisfaction_cancel')]
                ])
            )
            
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –º–æ–¥–µ–ª—å—é {new_model}")
        else:
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            await query.edit_message_text(
                '‚ùå **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç**\n\n'
                '–Ø –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É–ª—É—á—à–∏–ª—Å—è.\n\n'
                '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                '‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n'
                '‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n'
                '‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('pending_summary_data', None)
            
            logger.warning(f"‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )

async def handle_satisfaction_cancel(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ—Ü–µ–Ω–∫–∏"""
    user_id = query.from_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('pending_summary_data', None)
    
    await query.edit_message_text('‚ùå –û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    
    logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

async def send_mind_map_results(update: Update, context: ContextTypes.DEFAULT_TYPE, results: dict, original_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è mind map –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = update.effective_user.id
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã mind map –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        structure = results['structure']
        main_topic = structure['main_topic']
        subtopics_count = len(structure['subtopics'])
        total_ideas = sum(len(items) for items in structure['subtopics'].values())
        
        info_message = (
            f'üß† **Mind Map —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n'
            f'üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n'
            f'‚Ä¢ üéØ –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞: {main_topic}\n'
            f'‚Ä¢ üè∑Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–µ–º: {subtopics_count}\n'
            f'‚Ä¢ üí° –í—Å–µ–≥–æ –∏–¥–µ–π: {total_ideas}\n'
            f'‚Ä¢ üìù –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(original_text)}\n\n'
            f'üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–¥–µ–π:**\n'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–µ–º–∞—Ö
        for topic, ideas in structure['subtopics'].items():
            info_message += f'‚Ä¢ **{topic}**: {len(ideas)} –∏–¥–µ–π\n'
        
        info_message += '\nüìÅ **–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –Ω–∏–∂–µ**'
        
        await update.message.reply_text(info_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Markdown —Ñ–∞–π–ª
        if results['markdown']:
            markdown_file = BytesIO(results['markdown'].encode('utf-8'))
            markdown_file.name = f'mindmap_{hash(original_text) % 10000}.md'
            await update.message.reply_document(
                document=InputFile(markdown_file, filename=markdown_file.name),
                caption='üìÑ **Markdown —Ñ–∞–π–ª**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mind map –≤ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö'
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Mermaid —Ñ–∞–π–ª
        if results['mermaid']:
            mermaid_file = BytesIO(results['mermaid'].encode('utf-8'))
            mermaid_file.name = f'mindmap_{hash(original_text) % 10000}.mmd'
            await update.message.reply_document(
                document=InputFile(mermaid_file, filename=mermaid_file.name),
                caption='üé® **Mermaid –¥–∏–∞–≥—Ä–∞–º–º–∞**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ Mermaid Live Editor –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö'
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª
        if results['html_content']:
            html_file = BytesIO(results['html_content'].encode('utf-8'))
            html_file.name = f'mindmap_{hash(original_text) % 10000}.html'
            await update.message.reply_document(
                document=InputFile(html_file, filename=html_file.name),
                caption='üåê **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è HTML –∫–∞—Ä—Ç–∞**\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if results['png_path'] and os.path.exists(results['png_path']):
            try:
                with open(results['png_path'], 'rb') as png_file:
                    await update.message.reply_photo(
                        photo=png_file,
                        caption='üñºÔ∏è **PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**\n–°—Ç–∞—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è mind map'
                    )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(results['png_path'])
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PNG –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await update.message.reply_text(
            'üéâ **Mind Map –≥–æ—Ç–æ–≤!**\n\n'
            'üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n'
            '‚Ä¢ üìÑ **Markdown**: –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –ª—é–±–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n'
            '‚Ä¢ üé® **Mermaid**: –í—Å—Ç–∞–≤—å—Ç–µ –≤ Mermaid Live Editor\n'
            '‚Ä¢ üåê **HTML**: –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n'
            '‚Ä¢ üñºÔ∏è **PNG**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è—Ö\n\n'
            'üöÄ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:**\n'
            '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç\n'
            '‚Ä¢ YouTube —Å—É–±—Ç–∏—Ç—Ä—ã\n'
            '‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n'
            'üí≠ **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá',
            reply_markup=build_main_keyboard()
        )
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã mind map —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ mind map –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await update.message.reply_text(
            '‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤**\n\n'
            'Mind Map –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã.\n\n'
            'üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n'
            '‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ\n'
            '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n\n'
            'üìù **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n'
            f'`{str(e)[:100]}...`',
            reply_markup=build_main_keyboard()
        )

async def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
    while True:
        try:
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Ä–∏–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await cleanup_expired_voice_series()
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            await cleanup_expired_message_tracking()
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await cleanup_expired_user_states()
            
            # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–æ–π
            await asyncio.sleep(600)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É

async def set_user_state(user_id: int, state: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_states
    user_states[user_id] = state
    logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

async def get_user_state(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_states
    return user_states.get(user_id, 'normal')

async def clear_user_state(user_id: int):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global user_states
    if user_id in user_states:
        del user_states[user_id]
        logger.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ")

async def cleanup_expired_user_states():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global user_states
    
    now = time.time()
    cleanup_threshold = 3600  # 1 —á–∞—Å
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ —á–∞—Å–∞
    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Å—Ç—Ä–æ–∫–∏) –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    expired_users = []
    
    for user_id, state in user_states.items():
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(state, str):
            last_message_time = last_text_message_time.get(user_id, 0)
            if now - last_message_time > cleanup_threshold:
                expired_users.append(user_id)
    
    for user_id in expired_users:
        del user_states[user_id]
    
    if expired_users:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_users)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

if __name__ == '__main__':
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not TELEGRAM_BOT_TOKEN:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler('start', start))
        app.add_handler(CommandHandler('help', help_command))
        app.add_handler(CommandHandler('about', about_command))
        app.add_handler(CommandHandler('info', info_command))
        app.add_handler(CommandHandler('first_time', first_time_command))
        app.add_handler(CommandHandler('subs', subs_command))
        app.add_handler(CommandHandler('voice', voice_command))
        app.add_handler(CommandHandler('mindmap', mind_map_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
        app.add_handler(MessageHandler(filters.VOICE & filters.FORWARDED, handle_forwarded_voice_series))
        app.add_handler(CallbackQueryHandler(language_callback, pattern=r'^lang_'))
        app.add_handler(CallbackQueryHandler(action_callback, pattern=r'^action_'))

        app.add_handler(CallbackQueryHandler(format_callback, pattern=r'^format_'))
        app.add_handler(CallbackQueryHandler(satisfaction_callback, pattern=r'^satisfaction_'))
        app.add_handler(CallbackQueryHandler(main_keyboard_callback, pattern=r'^(help|learn_more|quick_help|get_subs|about|info|voice_info|mind_map_info|reset)$'))
        app.add_handler(CallbackQueryHandler(voice_callback, pattern=r'^(voice_force_|voice_continue_|voice_continue|voice_cancel|voice_single_|voice_series_|voice_wait_|voice_series_multiple)$'))
        app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
        app.add_handler(CommandHandler('reset', reset_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
            """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
            logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if update and hasattr(update, 'effective_user'):
                user_id = update.effective_user.id if update.effective_user else None
                log_and_notify_error(
                    error=context.error,
                    context="unhandled_exception",
                    user_id=user_id,
                    additional_info={"update_type": type(update).__name__}
                )
        
        app.add_error_handler(error_handler)
        
        logger.info("üöÄ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        def run_background_tasks():
            asyncio.run(start_background_tasks())
        
        background_thread = threading.Thread(target=run_background_tasks, daemon=True)
        background_thread.start()
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            app.run_polling(
                allowed_updates=["message", "callback_query"],
                drop_pending_updates=True,
                close_loop=False
            )
        except Exception as startup_error:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {startup_error}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {startup_error}")
            
    except Exception as init_error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {init_error}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_error}")
        import traceback
        traceback.print_exc()