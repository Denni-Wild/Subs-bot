"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è mind_map_generator.py
"""

import pytest
import asyncio
from mind_map_generator import MindMapGenerator

class TestMindMapGenerator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ MindMapGenerator"""
    
    @pytest.fixture
    def generator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return MindMapGenerator("test_api_key")
    
    @pytest.fixture
    def sample_text(self):
        """–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return """
        –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.
        YouTube —Å—É–±—Ç–∏—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–∏–¥–µ–æ.
        –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.
        –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Soniox API.
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.
        """
    
    def test_init(self, generator):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        assert generator.openrouter_api_key == "test_api_key"
        assert generator.base_url == "https://openrouter.ai/api/v1"
    
    @pytest.mark.asyncio
    async def test_analyze_text_structure(self, generator, sample_text):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–∞"""
        structure = await generator.analyze_text_structure(sample_text)
        
        assert isinstance(structure, dict)
        assert "main_topic" in structure
        assert "subtopics" in structure
        assert isinstance(structure["subtopics"], dict)
    
    def test_generate_markdown(self, generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown"""
        structure = {
            "main_topic": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞",
            "subtopics": {
                "–ø–æ–¥—Ç–µ–º–∞_1": ["–ø—É–Ω–∫—Ç_1", "–ø—É–Ω–∫—Ç_2"],
                "–ø–æ–¥—Ç–µ–º–∞_2": ["–ø—É–Ω–∫—Ç_3"]
            }
        }

        markdown = generator.generate_markdown(structure)

        assert "# –¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞" in markdown
        assert "## –ø–æ–¥—Ç–µ–º–∞_1" in markdown
        assert "## –ø–æ–¥—Ç–µ–º–∞_2" in markdown
        assert "üí° –ø—É–Ω–∫—Ç_1" in markdown  # –¢–µ–ø–µ—Ä—å —Å —ç–º–æ–¥–∑–∏
        assert "üí° –ø—É–Ω–∫—Ç_2" in markdown
        assert "üí° –ø—É–Ω–∫—Ç_3" in markdown
        assert "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏" in markdown
    
    def test_generate_mermaid(self, generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        structure = {
            "main_topic": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞",
            "subtopics": {
                "–ø–æ–¥—Ç–µ–º–∞_1": ["–ø—É–Ω–∫—Ç_1", "–ø—É–Ω–∫—Ç_2"]
            }
        }

        mermaid = generator.generate_mermaid(structure)

        assert "mindmap" in mermaid
        assert 'root(("–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞"))' in mermaid  # –¢–µ–ø–µ—Ä—å —Å –∫–∞–≤—ã—á–∫–∞–º–∏
        assert '"–ø–æ–¥—Ç–µ–º–∞_1"' in mermaid  # –° –∫–∞–≤—ã—á–∫–∞–º–∏
        assert '"üí° –ø—É–Ω–∫—Ç_1"' in mermaid  # –° —ç–º–æ–¥–∑–∏ –∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        assert '"üí° –ø—É–Ω–∫—Ç_2"' in mermaid
    
    @pytest.mark.asyncio
    async def test_render_to_png(self, generator):
        """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤ PNG"""
        mermaid_code = "mindmap\n  root((–¢–µ—Å—Ç))\n    –ø–æ–¥—Ç–µ–º–∞\n      –ø—É–Ω–∫—Ç"
        output_path = "test_output.png"
        
        result = await generator.render_to_png(mermaid_code, output_path)
        
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False –µ—Å–ª–∏ –Ω–µ—Ç mermaid-cli –∏ kroki.io –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        assert isinstance(result, bool)
    
    def test_generate_html_markmap(self, generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML Markmap"""
        markdown_content = "# –¢–µ—Å—Ç\n## –ü–æ–¥—Ç–µ–º–∞\n- –ü—É–Ω–∫—Ç"
        
        html = generator.generate_html_markmap(markdown_content)
        
        assert "<!DOCTYPE html>" in html
        assert "<title>Mind Map - Subs-bot</title>" in html
        assert "markmap-toolbar" in html  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º markmap-toolbar
        assert "markmap-view" in html     # –ò markmap-view
        assert "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏" in html
    
    @pytest.mark.asyncio
    async def test_create_mind_map_all_formats(self, generator, sample_text):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è mind map –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        results = await generator.create_mind_map(sample_text, "all")
        
        assert "structure" in results
        assert "markdown" in results
        assert "mermaid" in results
        assert "png_path" in results
        assert "html_content" in results
        
        assert results["markdown"] is not None
        assert results["mermaid"] is not None
        assert results["html_content"] is not None
    
    @pytest.mark.asyncio
    async def test_create_mind_map_markdown_only(self, generator, sample_text):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è mind map —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        results = await generator.create_mind_map(sample_text, "markdown")
        
        assert results["markdown"] is not None
        assert results["mermaid"] is None
        assert results["png_path"] is None
        assert results["html_content"] is None
    
    @pytest.mark.asyncio
    async def test_create_mind_map_mermaid_only(self, generator, sample_text):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è mind map —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Mermaid"""
        results = await generator.create_mind_map(sample_text, "mermaid")
        
        assert results["markdown"] is None
        assert results["mermaid"] is not None
        assert results["png_path"] is None
        assert results["html_content"] is None

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    pytest.main([__file__])
