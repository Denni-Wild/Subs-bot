#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º YouTube –≤–∏–¥–µ–æ
–ó–∞–ø—É—Å–∫: python test_real_video.py <youtube_url>
"""

import sys
import os
import asyncio
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from bot import extract_video_id, get_available_transcripts, format_subtitles
    from summarizer import TextSummarizer
    from youtube_transcript_api import YouTubeTranscriptApi
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def print_separator(title=""):
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print("\n" + "="*60)
    if title:
        print(f"üéØ {title}")
        print("="*60)


def test_extract_video_id(url):
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è video_id"""
    print_separator("–¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Video ID")
    
    print(f"üì∫ –í—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}")
    
    video_id = extract_video_id(url)
    
    if video_id:
        print(f"‚úÖ Video ID –∏–∑–≤–ª–µ—á–µ–Ω: {video_id}")
        print(f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: https://youtu.be/{video_id}")
        return video_id
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Video ID")
        return None


def test_get_transcripts(video_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    print_separator("–¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {video_id}...")
    
    try:
        transcripts = get_available_transcripts(video_id)
        
        if transcripts:
            transcripts_list = list(transcripts)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —è–∑—ã–∫–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(transcripts_list)}")
            
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:")
            for i, transcript in enumerate(transcripts_list, 1):
                print(f"   {i}. {transcript.language} ({transcript.language_code})")
            
            return transcripts_list
        else:
            print("‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        return None


def test_download_subtitles(video_id, lang_code='ru'):
    """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    print_separator(f"–¢–ï–°–¢ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ ({lang_code})")
    
    try:
        print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ —è–∑—ã–∫–µ: {lang_code}")
        
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=[lang_code])
        
        if transcript:
            print(f"‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(transcript)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            plain_text = format_subtitles(transcript, with_time=False)
            time_text = format_subtitles(transcript, with_time=True)
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(transcript)}")
            print(f"   ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –º–µ—Ç–æ–∫): {len(plain_text)}")
            print(f"   ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ (—Å –º–µ—Ç–∫–∞–º–∏): {len(time_text)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
            print(f"\nüìù –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏):")
            lines = plain_text.split('\n')[:3]
            for i, line in enumerate(lines, 1):
                print(f"   {i}. {line}")
            
            print(f"\nüïê –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏):")
            time_lines = time_text.split('\n')[:3]
            for i, line in enumerate(time_lines, 1):
                print(f"   {i}. {line}")
            
            return plain_text
        else:
            print("‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –ø—É—Å—Ç—ã")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        return None


async def test_ai_summarization(text):
    """–¢–µ—Å—Ç –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    print_separator("–¢–ï–°–¢ 4: –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    if not openrouter_key:
        print("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á OpenRouter")
        print("   –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://openrouter.ai/")
        return None
    
    print(f"ü§ñ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {openrouter_key[:10]}...{openrouter_key[-4:]}")
    
    try:
        summarizer = TextSummarizer()
        
        print(f"üìä –ú–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {len(summarizer.models)}")
        print(f"üîß –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π: {summarizer.chunk_size} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –≤—ã–∑–æ–≤–æ–≤ (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤)
        test_text = text[:2000] if len(text) > 2000 else text
        
        print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)")
        
        start_time = datetime.now()
        
        summary, stats = await summarizer.summarize_text(test_text, model_index=0)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for key, value in stats.items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        print(f"\nü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò:")
        print("-" * 40)
        print(summary)
        print("-" * 40)
        
        return summary
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üé¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–û–ú YOUTUBE –í–ò–î–ï–û")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    if len(sys.argv) > 1:
        url = sys.argv[1]
    else:
        url = input("\nüîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ: ").strip()
    
    if not url:
        print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url}")
    
    # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ video_id
    video_id = test_extract_video_id(url)
    if not video_id:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å video_id. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    transcripts = test_get_transcripts(video_id)
    if not transcripts:
        print("\nüí• –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    lang_code = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    available_langs = [t.language_code for t in transcripts]
    
    if 'ru' not in available_langs and 'en' in available_langs:
        lang_code = 'en'
    elif 'ru' not in available_langs and 'en' not in available_langs:
        lang_code = available_langs[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    
    print(f"\nüéØ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {lang_code}")
    
    # –¢–µ—Å—Ç 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    subtitles_text = test_download_subtitles(video_id, lang_code)
    if not subtitles_text:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã.")
        return
    
    # –¢–µ—Å—Ç 4: –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    try:
        asyncio.run(test_ai_summarization(subtitles_text))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
    
    # –ò—Ç–æ–≥–∏
    print_separator("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ video_id: –†–ê–ë–û–¢–ê–ï–¢")
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: –†–ê–ë–û–¢–ê–ï–¢") 
    print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
    
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    if openrouter_key:
        print("‚úÖ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê")
    else:
        print("‚ö†Ô∏è –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –ù–ï –¢–ï–°–¢–ò–†–û–í–ê–õ–ê–°–¨ (–Ω–µ—Ç API –∫–ª—é—á–∞)")
    
    print("\nüéâ –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –†–ê–ë–û–¢–ê–ï–¢!")
    print(f"üì∫ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: {video_id}")


if __name__ == "__main__":
    main() 