#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Mind Map Generator –¥–ª—è Subs-bot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mind map
"""

import asyncio
import os
from mind_map_generator import MindMapGenerator

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üß† Mind Map Generator Demo")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = MindMapGenerator(api_key)
    print("‚úÖ Mind Map Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    sample_text = """
    –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ. 
    –≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
    
    –í –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç-–±–æ—Ç–æ–≤, —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞. 
    –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
    
    YouTube –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ 
    –∏ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ. –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Siri –∏ Alexa, —Ç–∞–∫–∂–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ò–ò.
    
    –í –º–µ–¥–∏—Ü–∏–Ω–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
    –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–µ—á–µ–Ω–∏—è. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏.
    
    –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ò–ò –¥–ª—è 
    —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    
    print(f"\nüìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ({len(sample_text)} —Å–∏–º–≤–æ–ª–æ–≤)...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º mind map –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        results = await generator.create_mind_map(sample_text, "all")
        
        print("\n‚úÖ Mind Map —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üìä –ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞: {results['structure']['main_topic']}")
        print(f"üè∑Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–µ–º: {len(results['structure']['subtopics'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–¥–µ–π:")
        for topic, ideas in results['structure']['subtopics'].items():
            print(f"  {topic}: {len(ideas)} –∏–¥–µ–π")
            for idea in ideas[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–¥–µ–∏
                print(f"    ‚Ä¢ {idea}")
            if len(ideas) > 3:
                print(f"    ... –∏ –µ—â–µ {len(ideas) - 3} –∏–¥–µ–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã...")
        
        # Markdown
        with open("demo_mindmap.md", "w", encoding="utf-8") as f:
            f.write(results['markdown'])
        print("  ‚úÖ Markdown —Å–æ—Ö—Ä–∞–Ω–µ–Ω: demo_mindmap.md")
        
        # Mermaid
        with open("demo_mindmap.mmd", "w", encoding="utf-8") as f:
            f.write(results['mermaid'])
        print("  ‚úÖ Mermaid —Å–æ—Ö—Ä–∞–Ω–µ–Ω: demo_mindmap.mmd")
        
        # HTML
        with open("demo_mindmap.html", "w", encoding="utf-8") as f:
            f.write(results['html_content'])
        print("  ‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: demo_mindmap.html")
        
        # PNG (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if results['png_path']:
            print(f"  ‚úÖ PNG —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {results['png_path']}")
        else:
            print("  ‚ö†Ô∏è PNG –Ω–µ —Å–æ–∑–¥–∞–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è mermaid-cli –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ kroki.io)")
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("  ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ demo_mindmap.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã")
        print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ demo_mindmap.mmd —Å mermaid-cli –¥–ª—è PNG")
        print("  ‚Ä¢ –ò–∑—É—á–∏—Ç–µ demo_mindmap.md –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mind map: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
