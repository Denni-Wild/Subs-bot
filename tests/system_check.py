#!/usr/bin/env python3
"""
Enterprise Task Management System - Final Check
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π enterprise —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import os
from pathlib import Path
from datetime import datetime

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    
    required_files = [
        "enterprise_task_orchestrator.py",
        "mcp_integrations.py", 
        "enterprise_config.json",
        "start_enterprise_orchestrator.py",
        "test_integrations.py",
        "demo_enterprise_system.py",
        "ENTERPRISE_SYSTEM_README.md"
    ]
    
    missing_files = []
    existing_files = []
    
    for file in required_files:
        if Path(file).exists():
            existing_files.append(file)
            print(f"  ‚úÖ {file}")
        else:
            missing_files.append(file)
            print(f"  ‚ùå {file}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(existing_files)}/{len(required_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
    
    if missing_files:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = ['aiofiles', 'aiohttp']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"  ‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"  ‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open("enterprise_config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = ['servers', 'data_dirs', 'sync_interval']
        for section in required_sections:
            if section in config:
                print(f"  ‚úÖ {section}")
            else:
                print(f"  ‚ùå {section}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = config.get('servers', {})
        print(f"  üì° –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def check_integrations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
    
    try:
        from mcp_integrations import MCPIntegrationManager
        
        manager = MCPIntegrationManager()
        status = await manager.get_integration_status()
        
        online_count = sum(1 for is_online in status.values() if is_online)
        total_count = len(status)
        
        print(f"  üìä –û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤: {online_count}/{total_count}")
        
        for server, is_online in status.items():
            status_icon = "üü¢" if is_online else "üî¥"
            print(f"    {status_icon} {server}")
        
        return online_count == total_count
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
        return False

async def check_orchestrator():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        from enterprise_task_orchestrator import EnterpriseTaskOrchestrator
        
        orchestrator = EnterpriseTaskOrchestrator()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        test_task = await orchestrator.create_task(
            title="–°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
            description="–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            priority=3,
            tags=["system", "check"]
        )
        
        print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_task.id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health = orchestrator.get_health_status()
        print(f"  üè• –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health['orchestrator_status']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = orchestrator.get_statistics()
        print(f"  üìà –û–ø–µ—Ä–∞—Ü–∏–π: {stats['total_operations']}")
        
        await orchestrator.stop()
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    log_dir = Path("logs")
    if log_dir.exists():
        log_files = list(log_dir.glob("*.log"))
        print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: {len(log_files)}")
        
        for log_file in log_files:
            print(f"    üìÑ {log_file.name}")
        
        return True
    else:
        print("  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def generate_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    print("\nüìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    total_checks = len(results)
    passed_checks = sum(1 for result in results.values() if result)
    
    print(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_checks - passed_checks}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_checks/total_checks)*100:.1f}%")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏:")
    for check_name, result in results.items():
        status_icon = "‚úÖ" if result else "‚ùå"
        print(f"  {status_icon} {check_name}")
    
    if passed_checks == total_checks:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã –≤ {total_checks - passed_checks} –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "total_checks": total_checks,
        "passed_checks": passed_checks,
        "results": results
    }
    
    with open("system_check_report.json", "w", encoding="utf-8") as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: system_check_report.json")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç Enterprise Task Management System - Final Check")
    print("=" * 60)
    
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    results["–§–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã"] = check_files()
    results["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"] = check_dependencies()
    results["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"] = check_config()
    results["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"] = await check_integrations()
    results["–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"] = await check_orchestrator()
    results["–õ–æ–≥–∏"] = check_logs()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report(results)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é: python demo_enterprise_system.py")
    print("2. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: ENTERPRISE_SYSTEM_README.md")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ enterprise_config.json")
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs/")

if __name__ == "__main__":
    asyncio.run(main()) 