#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Telegram YouTube Subtitles Bot
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import subprocess
import sys
import os
from pathlib import Path


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("‚úÖ –£–°–ü–ï–®–ù–û")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥:\n{result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print("‚ùå –û–®–ò–ë–ö–ê")
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥:\n{e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∏:\n{e.stderr}")
        return False


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'pytest',
        'pytest-asyncio',
        'responses',
        'python-telegram-bot',
        'youtube-transcript-api'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def run_unit_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã"""
    cmd = [
        sys.executable, '-m', 'pytest',
        'test_summarizer.py::TestTextSummarizer',
        'test_bot.py::TestBotUtilityFunctions',
        'test_bot.py::TestBotKeyboards',
        '-v', '--tb=short'
    ]
    return run_command(cmd, "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)")


def run_integration_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    cmd = [
        sys.executable, '-m', 'pytest',
        'test_bot.py::TestBotHandlers',
        'test_integration.py::TestFullWorkflow',
        'test_integration.py::TestEdgeCases',
        '-v', '--tb=short'
    ]
    return run_command(cmd, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ API)")


def run_slow_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API"""
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç:")
    print("   ‚Ä¢ OPENROUTER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ú–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if response != 'y':
        print("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        return True
    
    cmd = [
        sys.executable, '-m', 'pytest',
        '--run-slow',
        '-v', '--tb=short'
    ]
    return run_command(cmd, "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API)")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∫—Ä–æ–º–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö"""
    cmd = [
        sys.executable, '-m', 'pytest',
        '-v', '--tb=short',
        '--durations=10'
    ]
    return run_command(cmd, "–í—Å–µ —Ç–µ—Å—Ç—ã (–∫—Ä–æ–º–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)")


def run_coverage_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è"""
    try:
        import coverage
    except ImportError:
        print("‚ùå –ü–∞–∫–µ—Ç 'coverage' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install coverage pytest-cov")
        return False
    
    cmd = [
        sys.executable, '-m', 'pytest',
        '--cov=.',
        '--cov-report=html',
        '--cov-report=term-missing',
        '--cov-exclude=test_*',
        '-v'
    ]
    return run_command(cmd, "–¢–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞")


def run_specific_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç"""
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
    test_files = list(Path('.').glob('test_*.py'))
    
    for i, file in enumerate(test_files, 1):
        print(f"  {i}. {file.name}")
    
    try:
        choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(test_files)}): ")) - 1
        if 0 <= choice < len(test_files):
            test_file = test_files[choice]
            cmd = [sys.executable, '-m', 'pytest', str(test_file), '-v']
            return run_command(cmd, f"–¢–µ—Å—Ç—ã –∏–∑ {test_file.name}")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return False
    except (ValueError, KeyboardInterrupt):
        print("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return False


def show_test_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤"""
    print("\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ï–°–¢–û–í:")
    print("\n1. test_summarizer.py:")
    print("   ‚Ä¢ TestTextSummarizer - —Ç–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
    print("   ‚Ä¢ TestTextSummarizerIntegration - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ò–ò")
    
    print("\n2. test_bot.py:")
    print("   ‚Ä¢ TestBotUtilityFunctions - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("   ‚Ä¢ TestBotKeyboards - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("   ‚Ä¢ TestBotHandlers - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥")
    print("   ‚Ä¢ TestBotProcessRequest - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞")
    
    print("\n3. test_integration.py:")
    print("   ‚Ä¢ TestFullWorkflow - –ø–æ–ª–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    print("   ‚Ä¢ TestEdgeCases - –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
    print("   ‚Ä¢ TestRealAPIIntegration - —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API")
    
    print("\n4. conftest.py:")
    print("   ‚Ä¢ –û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    print("\nüìä –ú–ê–†–ö–ï–†–´ –¢–ï–°–¢–û–í:")
    print("   ‚Ä¢ @pytest.mark.slow - –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ä–µ–∞–ª—å–Ω—ã–µ API)")
    print("   ‚Ä¢ @pytest.mark.integration - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    print("   ‚Ä¢ @pytest.mark.asyncio - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM YOUTUBE SUBTITLES BOT")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    while True:
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("1. üöÄ –ë—ã—Å—Ç—Ä—ã–µ —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã")
        print("2. üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã") 
        print("3. üåê –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ä–µ–∞–ª—å–Ω—ã–µ API)")
        print("4. üìä –í—Å–µ —Ç–µ—Å—Ç—ã (–∫—Ä–æ–º–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)")
        print("5. üìà –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
        print("6. üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
        print("7. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤")
        print("8. ‚ùå –í—ã—Ö–æ–¥")
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-8): ").strip()
            
            if choice == '1':
                run_unit_tests()
            elif choice == '2':
                run_integration_tests()
            elif choice == '3':
                run_slow_tests()
            elif choice == '4':
                run_all_tests()
            elif choice == '5':
                run_coverage_tests()
            elif choice == '6':
                run_specific_test()
            elif choice == '7':
                show_test_structure()
            elif choice == '8':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


if __name__ == '__main__':
    main() 