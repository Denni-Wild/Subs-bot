import os
import re
import logging
import time
from io import BytesIO
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
from dotenv import load_dotenv

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

YOUTUBE_REGEX = r"(?:v=|youtu\\.be/|youtube\\.com/embed/|youtube\\.com/watch\\?v=)?([\w-]{11})"

START_MESSAGE = (
    'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å YouTube-–≤–∏–¥–µ–æ.\n\n'
    '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å—É–±—Ç–∏—Ç—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).\n\n'
    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –¥—Ä—É–≥–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å.\n'
    '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç: —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑.\n\n'
    '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.'
)

HELP_MESSAGE = (
    '‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n'
    '1. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID (11 —Å–∏–º–≤–æ–ª–æ–≤).\n'
    '2. –ï—Å–ª–∏ —É –≤–∏–¥–µ–æ –µ—Å—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ —Ñ–æ—Ä–º–∞—Ç.\n'
    '3. –ï—Å–ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª–∏–Ω–Ω—ã–µ, –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.\n\n'
    '–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://youtu.be/dQw4w9WgXcQ\n'
    '–ü—Ä–∏–º–µ—Ä ID: dQw4w9WgXcQ'
)

# –ê–Ω—Ç–∏—Å–ø–∞–º: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)
MIN_REQUEST_INTERVAL = 10

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def extract_video_id(text):
    match = re.search(YOUTUBE_REGEX, text)
    if match:
        return match.group(1)
    return None

def get_available_transcripts(video_id):
    try:
        list_transcripts = YouTubeTranscriptApi.list_transcripts(video_id)
        return list_transcripts
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}')
        return None

def build_language_keyboard(list_transcripts):
    buttons = []
    for transcript in list_transcripts:
        lang_code = transcript.language_code
        lang_name = transcript.language
        buttons.append([InlineKeyboardButton(f'{lang_name} ({lang_code})', callback_data=f'lang_{lang_code}')])
    return InlineKeyboardMarkup(buttons)

def build_format_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏', callback_data='format_with_time')],
        [InlineKeyboardButton('–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫', callback_data='format_plain')]
    ])

def build_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')],
        [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã', callback_data='get_subs')]
    ])

def format_subtitles(transcript, with_time=False):
    if with_time:
        return '\n'.join([
            f"[{int(item['start'])//60:02}:{int(item['start'])%60:02}] {item['text']}" for item in transcript
        ])
    else:
        return '\n'.join([item['text'] for item in transcript])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_MESSAGE, reply_markup=build_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_MESSAGE, reply_markup=build_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()
    last_time = context.user_data.get('last_request_time', 0)
    if now - last_time < MIN_REQUEST_INTERVAL:
        await update.message.reply_text(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ {MIN_REQUEST_INTERVAL} —Å–µ–∫—É–Ω–¥.')
        return
    context.user_data['last_request_time'] = now

    text = update.message.text.strip()
    video_id = extract_video_id(text)
    if not video_id:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID.')
        return
    list_transcripts = get_available_transcripts(video_id)
    if not list_transcripts:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')
        return
    list_transcripts = list(list_transcripts)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['video_id'] = video_id
    context.user_data['list_transcripts'] = list_transcripts
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —è–∑—ã–∫ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    if len(list_transcripts) == 1:
        lang_code = list_transcripts[0].language_code
        context.user_data['lang_code'] = lang_code
        await update.message.reply_text(
            f'–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {list_transcripts[0].language} ({lang_code}). –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:',
            reply_markup=build_format_keyboard()
        )
    else:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:', reply_markup=build_language_keyboard(list_transcripts))

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.replace('lang_', '')
    context.user_data['lang_code'] = lang_code
    await query.edit_message_text(f'–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:', reply_markup=build_format_keyboard())

async def format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    with_time = query.data == 'format_with_time'
    context.user_data['with_time'] = with_time
    video_id = context.user_data.get('video_id')
    lang_code = context.user_data.get('lang_code')
    if not video_id or not lang_code:
        await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ —è–∑—ã–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
        return
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=[lang_code])
        subtitles = format_subtitles(transcript, with_time=with_time)
        format_str = '—Å –º–µ—Ç–∫–∞–º–∏' if with_time else '–±–µ–∑ –º–µ—Ç–æ–∫'
        stat_msg = f'–Ø–∑—ã–∫: {lang_code}\n–°—Ç—Ä–æ–∫: {len(transcript)}\n–§–æ—Ä–º–∞—Ç: {format_str}'
        if len(subtitles) <= 4000:
            await query.edit_message_text(subtitles)
            await query.message.reply_text(stat_msg)
        else:
            file = BytesIO(subtitles.encode('utf-8'))
            file.name = f'subtitles_{video_id}_{lang_code}.txt'
            await query.edit_message_text('–°—É–±—Ç–∏—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.')
            await query.message.reply_document(InputFile(file), caption=stat_msg)
    except TranscriptsDisabled:
        await query.edit_message_text('–£ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ —Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.')
    except NoTranscriptFound:
        await query.edit_message_text('–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}')
        await query.edit_message_text(f'–û—à–∏–±–∫–∞: {e}')

async def main_keyboard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'help':
        await query.edit_message_text(HELP_MESSAGE, reply_markup=build_main_keyboard())
    elif query.data == 'get_subs':
        await query.edit_message_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –∏–ª–∏ –µ–≥–æ ID.')

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.', reply_markup=build_main_keyboard())

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(language_callback, pattern=r'^lang_'))
    app.add_handler(CallbackQueryHandler(format_callback, pattern=r'^format_'))
    app.add_handler(CallbackQueryHandler(main_keyboard_callback, pattern=r'^(help|get_subs)$'))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    app.run_polling() 