#!/usr/bin/env python3
"""
Obsidian –∏ –º–æ–±–∏–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Obsidian, –º–æ–±–∏–ª—å–Ω—ã–µ API –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import os
import json
import asyncio
import aiohttp
import aiofiles
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
import logging
from dataclasses import dataclass, asdict
import sqlite3
from contextlib import asynccontextmanager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ObsidianNote:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ Obsidian"""
    title: str
    content: str
    tags: List[str]
    created: str
    modified: str
    path: str
    metadata: Dict = None

@dataclass
class MobileTask:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    id: str
    title: str
    description: str
    status: str
    priority: int
    deadline: Optional[str]
    tags: List[str]
    time_spent: int
    created_at: str
    modified_at: str
    subtasks: List[str]
    dependencies: List[str]

class ObsidianSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Obsidian"""
    
    def __init__(self, vault_path: str):
        self.vault_path = Path(vault_path)
        self.tasks_folder = self.vault_path / "Tasks"
        self.calendar_folder = self.vault_path / "Calendar"
        self.notes_folder = self.vault_path / "Notes"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.tasks_folder.mkdir(exist_ok=True)
        self.calendar_folder.mkdir(exist_ok=True)
        self.notes_folder.mkdir(exist_ok=True)
    
    async def sync_task_to_obsidian(self, task_data: Dict) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –≤ Obsidian"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∑–∞–¥–∞—á–∏
            note_content = self._create_task_note_content(task_data)
            note_path = self.tasks_folder / f"{task_data['id']}.md"
            
            async with aiofiles.open(note_path, 'w', encoding='utf-8') as f:
                await f.write(note_content)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω
            if task_data.get('deadline'):
                await self._create_calendar_event(task_data)
            
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_data['id']} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Obsidian")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Obsidian: {e}")
            return False
    
    def _create_task_note_content(self, task_data: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏"""
        tags = " ".join([f"#{tag}" for tag in task_data.get('tags', [])])
        status_emoji = {
            'pending': '‚è≥',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ',
            'failed': '‚ùå',
            'cancelled': 'üö´'
        }
        
        content = f"""---
title: {task_data['title']}
id: {task_data['id']}
status: {task_data['status']}
priority: {task_data['priority']}
created: {task_data['created_at']}
modified: {datetime.now().isoformat()}
deadline: {task_data.get('deadline', '')}
tags: {tags}
---

# {status_emoji.get(task_data['status'], 'üìã')} {task_data['title']}

## üìù –û–ø–∏—Å–∞–Ω–∏–µ
{task_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

## üìä –î–µ—Ç–∞–ª–∏
- **–°—Ç–∞—Ç—É—Å**: {task_data['status']}
- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {task_data['priority']}
- **–°–æ–∑–¥–∞–Ω–æ**: {task_data['created_at']}
- **–í—Ä–µ–º—è**: {task_data.get('time_spent', 0)} –º–∏–Ω—É—Ç
- **–î–µ–¥–ª–∞–π–Ω**: {task_data.get('deadline', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}

## üìã –ü–æ–¥–∑–∞–¥–∞—á–∏
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
        for subtask in task_data.get('subtasks', []):
            content += f"- [ ] {subtask}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if task_data.get('dependencies'):
            content += "\n## üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n"
            for dep in task_data['dependencies']:
                content += f"- [[{dep}]]\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
        if task_data.get('tags'):
            content += f"\n## üè∑Ô∏è –¢–µ–≥–∏\n{tags}\n"
        
        return content
    
    async def _create_calendar_event(self, task_data: Dict) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        if not task_data.get('deadline'):
            return
        
        try:
            deadline = datetime.fromisoformat(task_data['deadline'])
            event_content = f"""---
title: {task_data['title']}
date: {deadline.strftime('%Y-%m-%d')}
time: {deadline.strftime('%H:%M')}
type: task
priority: {task_data['priority']}
---

# üìÖ {task_data['title']}

**–î–µ–¥–ª–∞–π–Ω**: {deadline.strftime('%d.%m.%Y %H:%M')}
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {task_data['priority']}

{task_data.get('description', '')}

[[{task_data['id']}]]
"""
            
            event_path = self.calendar_folder / f"{task_data['id']}_deadline.md"
            async with aiofiles.open(event_path, 'w', encoding='utf-8') as f:
                await f.write(event_content)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def read_obsidian_tasks(self) -> List[Dict]:
        """–ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Obsidian"""
        tasks = []
        
        try:
            for file_path in self.tasks_folder.glob("*.md"):
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                
                task_data = self._parse_obsidian_note(content, file_path.name)
                if task_data:
                    tasks.append(task_data)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Obsidian: {e}")
        
        return tasks
    
    def _parse_obsidian_note(self, content: str, filename: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–º–µ—Ç–∫–∏ Obsidian"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º YAML frontmatter
            if content.startswith('---'):
                parts = content.split('---', 2)
                if len(parts) >= 3:
                    yaml_content = parts[1]
                    note_content = parts[2]
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ YAML
                    metadata = {}
                    for line in yaml_content.strip().split('\n'):
                        if ':' in line:
                            key, value = line.split(':', 1)
                            metadata[key.strip()] = value.strip()
                    
                    return {
                        'id': metadata.get('id', filename.replace('.md', '')),
                        'title': metadata.get('title', ''),
                        'status': metadata.get('status', 'pending'),
                        'priority': int(metadata.get('priority', 3)),
                        'created_at': metadata.get('created', ''),
                        'modified_at': metadata.get('modified', ''),
                        'deadline': metadata.get('deadline', ''),
                        'tags': metadata.get('tags', '').split() if metadata.get('tags') else [],
                        'description': self._extract_description(note_content)
                    }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–º–µ—Ç–∫–∏ {filename}: {e}")
        
        return None
    
    def _extract_description(self, content: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏"""
        lines = content.split('\n')
        description_lines = []
        in_description = False
        
        for line in lines:
            if line.startswith('## üìù –û–ø–∏—Å–∞–Ω–∏–µ'):
                in_description = True
                continue
            elif line.startswith('##') and in_description:
                break
            elif in_description and line.strip():
                description_lines.append(line)
        
        return '\n'.join(description_lines).strip()

class MobileAPI:
    """–ú–æ–±–∏–ª—å–Ω—ã–π API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–∞–º"""
    
    def __init__(self, db_path: str = "mobile_tasks.db"):
        self.db_path = db_path
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id TEXT PRIMARY KEY,
                title TEXT NOT NULL,
                description TEXT,
                status TEXT DEFAULT 'pending',
                priority INTEGER DEFAULT 3,
                deadline TEXT,
                tags TEXT,
                time_spent INTEGER DEFAULT 0,
                created_at TEXT,
                modified_at TEXT,
                subtasks TEXT,
                dependencies TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    async def sync_tasks_to_mobile(self, tasks: List[Dict]) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –≤ –º–æ–±–∏–ª—å–Ω—É—é –±–∞–∑—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            for task in tasks:
                cursor.execute('''
                    INSERT OR REPLACE INTO tasks 
                    (id, title, description, status, priority, deadline, tags, 
                     time_spent, created_at, modified_at, subtasks, dependencies)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    task['id'],
                    task['title'],
                    task.get('description', ''),
                    task['status'],
                    task['priority'],
                    task.get('deadline', ''),
                    json.dumps(task.get('tags', [])),
                    task.get('time_spent', 0),
                    task['created_at'],
                    datetime.now().isoformat(),
                    json.dumps(task.get('subtasks', [])),
                    json.dumps(task.get('dependencies', []))
                ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ –º–æ–±–∏–ª—å–Ω—É—é –±–∞–∑—É")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –º–æ–±–∏–ª—å–Ω—É—é –±–∞–∑—É: {e}")
            return False
    
    async def get_mobile_tasks(self, status: Optional[str] = None, 
                             priority: Optional[int] = None) -> List[MobileTask]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            query = "SELECT * FROM tasks"
            params = []
            
            if status or priority:
                query += " WHERE"
                if status:
                    query += " status = ?"
                    params.append(status)
                if priority:
                    if status:
                        query += " AND"
                    query += " priority = ?"
                    params.append(priority)
            
            query += " ORDER BY priority DESC, created_at DESC"
            
            cursor.execute(query, params)
            rows = cursor.fetchall()
            conn.close()
            
            tasks = []
            for row in rows:
                task = MobileTask(
                    id=row[0],
                    title=row[1],
                    description=row[2],
                    status=row[3],
                    priority=row[4],
                    deadline=row[5],
                    tags=json.loads(row[6]) if row[6] else [],
                    time_spent=row[7],
                    created_at=row[8],
                    modified_at=row[9],
                    subtasks=json.loads(row[10]) if row[10] else [],
                    dependencies=json.loads(row[11]) if row[11] else []
                )
                tasks.append(task)
            
            return tasks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            return []
    
    async def update_task_status(self, task_id: str, status: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE tasks 
                SET status = ?, modified_at = ?
                WHERE id = ?
            ''', (status, datetime.now().isoformat(), task_id))
            
            conn.commit()
            conn.close()
            
            return cursor.rowcount > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
            return False

class WebInterface:
    """–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self, mobile_api: MobileAPI, port: int = 8080):
        self.mobile_api = mobile_api
        self.port = port
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        from aiohttp import web
        
        app = web.Application()
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        app.router.add_static('/static', path='static', name='static')
        
        # API endpoints
        app.router.add_get('/api/tasks', self.get_tasks_api)
        app.router.add_post('/api/tasks/{task_id}/status', self.update_task_status_api)
        app.router.add_get('/', self.index_page)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', self.port)
        await site.start()
        
        logger.info(f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{self.port}")
    
    async def get_tasks_api(self, request):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        status = request.query.get('status')
        priority = request.query.get('priority')
        
        if priority:
            priority = int(priority)
        
        tasks = await self.mobile_api.get_mobile_tasks(status, priority)
        return web.json_response([asdict(task) for task in tasks])
    
    async def update_task_status_api(self, request):
        """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        task_id = request.match_info['task_id']
        data = await request.json()
        status = data.get('status')
        
        if not status:
            return web.json_response({'error': 'Status required'}, status=400)
        
        success = await self.mobile_api.update_task_status(task_id, status)
        return web.json_response({'success': success})
    
    async def index_page(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Task Manager Mobile</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                .task { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
                .priority-high { border-left: 4px solid #ff4444; }
                .priority-medium { border-left: 4px solid #ffaa00; }
                .priority-low { border-left: 4px solid #44aa44; }
                .status-pending { background-color: #fff3cd; }
                .status-in_progress { background-color: #d1ecf1; }
                .status-completed { background-color: #d4edda; }
                .filters { margin-bottom: 20px; }
                .filter-btn { margin: 5px; padding: 8px 15px; border: none; border-radius: 3px; cursor: pointer; }
                .filter-btn.active { background-color: #007bff; color: white; }
            </style>
        </head>
        <body>
            <h1>üì± Task Manager Mobile</h1>
            
            <div class="filters">
                <button class="filter-btn active" onclick="filterTasks('all')">–í—Å–µ</button>
                <button class="filter-btn" onclick="filterTasks('pending')">–û–∂–∏–¥–∞—é—Ç</button>
                <button class="filter-btn" onclick="filterTasks('in_progress')">–í —Ä–∞–±–æ—Ç–µ</button>
                <button class="filter-btn" onclick="filterTasks('completed')">–ó–∞–≤–µ—Ä—à–µ–Ω—ã</button>
            </div>
            
            <div id="tasks"></div>
            
            <script>
                let currentFilter = 'all';
                
                async function loadTasks(filter = 'all') {
                    const response = await fetch(`/api/tasks${filter !== 'all' ? '?status=' + filter : ''}`);
                    const tasks = await response.json();
                    displayTasks(tasks);
                }
                
                function displayTasks(tasks) {
                    const container = document.getElementById('tasks');
                    container.innerHTML = '';
                    
                    tasks.forEach(task => {
                        const taskDiv = document.createElement('div');
                        taskDiv.className = `task priority-${getPriorityClass(task.priority)} status-${task.status}`;
                        
                        const statusEmoji = {
                            'pending': '‚è≥',
                            'in_progress': 'üîÑ',
                            'completed': '‚úÖ',
                            'failed': '‚ùå'
                        };
                        
                        taskDiv.innerHTML = `
                            <h3>${statusEmoji[task.status]} ${task.title}</h3>
                            <p>${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                            <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${task.priority}</p>
                            <p><strong>–í—Ä–µ–º—è:</strong> ${task.time_spent} –º–∏–Ω</p>
                            ${task.deadline ? `<p><strong>–î–µ–¥–ª–∞–π–Ω:</strong> ${new Date(task.deadline).toLocaleString()}</p>` : ''}
                            <div>
                                <button onclick="updateStatus('${task.id}', 'pending')" ${task.status === 'pending' ? 'disabled' : ''}>‚è≥ –û–∂–∏–¥–∞–µ—Ç</button>
                                <button onclick="updateStatus('${task.id}', 'in_progress')" ${task.status === 'in_progress' ? 'disabled' : ''}>üîÑ –í —Ä–∞–±–æ—Ç–µ</button>
                                <button onclick="updateStatus('${task.id}', 'completed')" ${task.status === 'completed' ? 'disabled' : ''}>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</button>
                            </div>
                        `;
                        
                        container.appendChild(taskDiv);
                    });
                }
                
                function getPriorityClass(priority) {
                    if (priority <= 2) return 'high';
                    if (priority <= 3) return 'medium';
                    return 'low';
                }
                
                async function updateStatus(taskId, status) {
                    const response = await fetch(`/api/tasks/${taskId}/status`, {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({status})
                    });
                    
                    if (response.ok) {
                        loadTasks(currentFilter);
                    }
                }
                
                function filterTasks(filter) {
                    currentFilter = filter;
                    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
                    event.target.classList.add('active');
                    loadTasks(filter);
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                loadTasks();
            </script>
        </body>
        </html>
        """
        return web.Response(text=html, content_type='text/html')

class SyncManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, obsidian_path: str, db_path: str = "mobile_tasks.db"):
        self.obsidian_sync = ObsidianSync(obsidian_path)
        self.mobile_api = MobileAPI(db_path)
        self.web_interface = WebInterface(self.mobile_api)
    
    async def sync_all(self, tasks: List[Dict]) -> Dict[str, bool]:
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
        results = {
            'obsidian': False,
            'mobile': False
        }
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Obsidian
        obsidian_success = True
        for task in tasks:
            if not await self.obsidian_sync.sync_task_to_obsidian(task):
                obsidian_success = False
        results['obsidian'] = obsidian_success
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–æ–±–∏–ª—å–Ω–æ–π –±–∞–∑–æ–π
        results['mobile'] = await self.mobile_api.sync_tasks_to_mobile(tasks)
        
        return results
    
    async def start_web_interface(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        await self.web_interface.start_server()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    obsidian_vault = "D:/ObsidianVault"  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É vault Obsidian
    sync_manager = SyncManager(obsidian_vault)
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á
    sample_tasks = [
        {
            'id': 'task_001',
            'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
            'description': '–°–æ–∑–¥–∞—Ç—å API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
            'status': 'in_progress',
            'priority': 4,
            'deadline': '2024-01-15T18:00:00',
            'tags': ['development', 'api'],
            'time_spent': 120,
            'created_at': '2024-01-10T10:00:00',
            'subtasks': ['–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', '–î–∏–∑–∞–π–Ω API', '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è'],
            'dependencies': []
        }
    ]
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    results = await sync_manager.sync_all(sample_tasks)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {results}")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await sync_manager.start_web_interface()
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    while True:
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(main()) 