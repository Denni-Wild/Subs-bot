#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç—Ä—ã–≤–∫–æ–º
"""

import os
import asyncio
from summarizer import TextSummarizer

async def quick_test():
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò")
    print("="*40)
    
    # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_text = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è. –ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∞, —è –∑–∞–ø–∏—Å—ã–≤–∞—é –æ—á–µ—Ä–µ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –æ –°–∞—Ç—É—Ä–Ω–µ –≤ –†—ã–±–∞—Ö. 
29 –º–∞—Ä—Ç–∞ –°–∞—Ç—É—Ä–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∑–Ω–∞–∫ —Ä—ã–±—ã. –ò —ç—Ç–æ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç –ø—Ä–∏–Ω–µ—Å—ë—Ç –Ω–∞–º –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –Ω–æ–≤–æ–≥–æ. 
–û–Ω –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç—Ç–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –∂–∏–∑–Ω–∏ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ò —Å–µ–≥–æ–¥–Ω—è –º—ã –±—É–¥–µ–º –æ–±—Å—É–∂–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–º, 
—á—Ç–æ —ç—Ç–æ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç –ø—Ä–∏–Ω–µ—Å—ë—Ç –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–∞–∂–¥–æ–π –ª–∞–≥–Ω—ã.

–Ø –Ω–∞—á–Ω—É —Å —Ç–æ–≥–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤–∏–¥–µ–æ –ø–æ —Ç—Ä–∞–Ω–∑–∏—Ç—É –°–∞—Ç—É—Ä–Ω–∞ –≤ –†—ã–±–∞—Ö. –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –æ–± –æ–±—â–∏—Ö 
—ç—Ñ—Ñ–µ–∫—Ç–∞—Ö, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –º–∏—Ä–µ, –∫–∞–∫–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è. –¢–∞–∫–∂–µ –±—ã–ª–æ –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ, 
–ø–æ—Å–≤—è—â—ë–Ω–Ω–æ–µ –ª—é–¥—è–º —Å –õ—É–Ω–æ–π –≤–æ–≤–Ω–µ. –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∏—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∞–¥—ã —Å–∞—Ç–∏, –±—ã–ª–æ –≤–∞–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –Ω–∏—Ö 
—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ, –∫–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç —ç—Ç–æ –¥–∞—Å—Ç, —á—Ç–æ –∏–º –æ–∂–∏–¥–∞—Ç—å.

–°–µ–≥–æ–¥–Ω—è –∂–µ –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ –∂–∏–∑–Ω–∏ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ 
–æ—Ç –µ–≥–æ –ª–∞–≥–Ω—ã –∏–ª–∏ –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞. –¢—Ä–∞–Ω–∑–∏—Ç –°–∞—Ç—É—Ä–Ω–∞ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥–ª–∏—Ç—Å—è –æ–∫–æ–ª–æ 2.5 –ª–µ—Ç, 
–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏.
    """.strip()
    
    print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç ({len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   {test_text[:150]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.environ.get('OPENROUTER_API_KEY', '')
    if not api_key or 'your-real-key' in api_key:
        print("\n‚ö†Ô∏è  –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω API –∫–ª—é—á OpenRouter")
        print("   –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞: https://openrouter.ai/")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export OPENROUTER_API_KEY='your-key'")
        print("\nüîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞...")
        
        # –î–µ–º–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
        summarizer = TextSummarizer()
        chunks = summarizer.split_text(test_text)
        
        print(f"\n‚úÇÔ∏è  –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:")
        print(f"   –ß–∞—Å—Ç–µ–π: {len(chunks)}")
        for i, chunk in enumerate(chunks):
            print(f"   –ß–∞—Å—Ç—å {i+1}: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for i, (name, model_id) in enumerate(summarizer.models[:4]):
            print(f"   {i+1}. {name}")
        
        print("\nüí° –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:")
        print("""
–ì–õ–ê–í–ù–ê–Ø –¢–ï–ú–ê: –û–±–∑–æ—Ä –≤–ª–∏—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –°–∞—Ç—É—Ä–Ω–∞ –≤ –∑–Ω–∞–∫ –†—ã–±—ã –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö –ª–∞–≥–Ω.

–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:
‚Ä¢ 29 –º–∞—Ä—Ç–∞ –°–∞—Ç—É—Ä–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∑–Ω–∞–∫ –†—ã–±—ã
‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Ç –¥–ª–∏—Ç—Å—è –æ–∫–æ–ª–æ 2.5 –ª–µ—Ç –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –í–∏–¥–µ–æ –ø–æ—Å–≤—è—â–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∞–≥–Ω—ã (–∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞)
‚Ä¢ –†–∞–Ω–µ–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –æ–±—â–∏–µ –≤–∏–¥–µ–æ –æ —Ç—Ä–∞–Ω–∑–∏—Ç–µ –∏ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –ª—é–¥–µ–π —Å –õ—É–Ω–æ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö

–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´: 
–¢—Ä–∞–Ω–∑–∏—Ç –°–∞—Ç—É—Ä–Ω–∞ –≤ –†—ã–±—ã - –≤–∞–∂–Ω–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏. 
–í–ª–∏—è–Ω–∏–µ –±—É–¥–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–∞–≥–Ω—ã —á–µ–ª–æ–≤–µ–∫–∞.

–û –ß–ï–ú –≠–¢–û–¢ –¢–ï–ö–°–¢: –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –°–∞—Ç—É—Ä–Ω–∞ –≤ –∑–Ω–∞–∫ –†—ã–±—ã –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ª—é–¥–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∞–≥–Ω–∞–º–∏.
        """.strip())
        
        return False
    
    # –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å API
    print(f"\nüîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    summarizer = TextSummarizer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–æ–¥–µ–ª–∏
    models_to_test = [0, 1]  # Venice –∏ Gemma
    
    for model_index in models_to_test:
        model_name = summarizer.models[model_index][0]
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {model_name}")
        
        try:
            custom_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é:

1. –ì–õ–ê–í–ù–ê–Ø –¢–ï–ú–ê (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´ (3-4 –ø—É–Ω–∫—Ç–∞)
3. –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –û –ß–ï–ú –≠–¢–û–¢ –¢–ï–ö–°–¢ (–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ)

–ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""
            
            summary, stats = await summarizer.summarize_text(
                test_text, 
                model_index=model_index,
                custom_prompt=custom_prompt
            )
            
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"   üìä {stats.get('original_length', 0)} ‚Üí {stats.get('summary_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("-" * 40)
            print(summary)
            print("-" * 40)
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(quick_test())
    
    if success:
        print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏ –∏–∑ YouTube –≤–∏–¥–µ–æ")
        print("‚úÖ –ò–ò-–º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
        print("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è")
    else:
        print(f"\nüìã –î–õ–Ø –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á: https://openrouter.ai/")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export OPENROUTER_API_KEY='–≤–∞—à-–∫–ª—é—á'") 
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python quick_summarization_test.py")
        print("4. –ò–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: python bot.py")
    
    print(f"\nüéØ –ò–¢–û–ì: –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã!") 