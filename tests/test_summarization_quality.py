#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–∞—Ö
"""

import os
import asyncio
import time
from summarizer import TextSummarizer

# –¢–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
os.environ['OPENROUTER_API_KEY'] = 'sk-or-v1-your-real-key-here'

async def test_summarization_quality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ò–ò-–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò")
    print("="*60)
    
    # –ß–∏—Ç–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
    try:
        with open('subtitles_DpQtKCcTMnQ_ru.txt', 'r', encoding='utf-8') as f:
            text = f.read()
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, {len(text.split())} —Å–ª–æ–≤")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
    summarizer = TextSummarizer()
    print(f"ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(summarizer.models)}")
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤)
    test_text = text[:3000] + "..."
    print(f"üî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Ç—Ä—ã–≤–∫–µ: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìñ –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {test_text[:200]}...")
    
    print("\n" + "="*60)
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    print("="*60)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 4 –º–æ–¥–µ–ª–∏ (—á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ)
    models_to_test = [0, 1, 2, 3]  # Venice, Gemma, Hunyuan, DeepSeek
    
    for model_index in models_to_test:
        model_name = summarizer.models[model_index][0]
        model_id = summarizer.models[model_index][1]
        
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å {model_index + 1}/4: {model_name}")
        print(f"   ID: {model_id}")
        
        start_time = time.time()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            custom_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é:

1. –ì–õ–ê–í–ù–ê–Ø –¢–ï–ú–ê (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´ (3-5 –ø—É–Ω–∫—Ç–æ–≤)
3. –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –û –ß–ï–ú –≠–¢–û–¢ –¢–ï–ö–°–¢ (–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ)

–ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""
            
            summary, stats = await summarizer.summarize_text(
                test_text, 
                model_index=model_index,
                custom_prompt=custom_prompt
            )
            
            duration = time.time() - start_time
            
            print(f"   ‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {duration:.1f} —Å–µ–∫")
            print(f"   üìä –°–∂–∞—Ç–∏–µ: {stats.get('original_length', 0)} ‚Üí {stats.get('summary_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            results.append({
                'model_name': model_name,
                'model_id': model_id,
                'summary': summary,
                'duration': duration,
                'stats': stats,
                'success': True
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            preview = summary[:200] + "..." if len(summary) > 200 else summary
            print(f"   üìù –ü—Ä–µ–≤—å—é: {preview}")
            
        except Exception as e:
            duration = time.time() - start_time
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            results.append({
                'model_name': model_name,
                'model_id': model_id,
                'summary': f"–û—à–∏–±–∫–∞: {e}",
                'duration': duration,
                'stats': {},
                'success': False
            })
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "="*60)
    print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    
    successful_results = [r for r in results if r['success']]
    
    if not successful_results:
        print("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenRouter")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
        print("   - –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞")
        return
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π: {len(successful_results)}/{len(results)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    successful_results.sort(key=lambda x: x['duration'])
    
    print(f"\nüèÜ –†–ï–ô–¢–ò–ù–ì –ü–û –°–ö–û–†–û–°–¢–ò:")
    for i, result in enumerate(successful_results, 1):
        print(f"   {i}. {result['model_name']}: {result['duration']:.1f} —Å–µ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–ª–∏–Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏)
    print(f"\nüìè –ê–ù–ê–õ–ò–ó –î–õ–ò–ù–´ –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò:")
    for result in successful_results:
        summary_len = len(result['summary'])
        print(f"   {result['model_name']}: {summary_len} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìã –ü–û–õ–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*60)
    
    for i, result in enumerate(successful_results, 1):
        print(f"\nü§ñ –ú–û–î–ï–õ–¨ {i}: {result['model_name']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result['duration']:.1f} —Å–µ–∫")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result['stats']}")
        print(f"üìù –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:")
        print("-" * 40)
        print(result['summary'])
        print("-" * 40)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if successful_results:
        fastest = successful_results[0]
        print(f"   üöÄ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: {fastest['model_name']} ({fastest['duration']:.1f} —Å–µ–∫)")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
        detailed = max(successful_results, key=lambda x: len(x['summary']))
        print(f"   üìñ –°–∞–º–∞—è –ø–æ–¥—Ä–æ–±–Ω–∞—è: {detailed['model_name']} ({len(detailed['summary'])} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        print(f"\n   ‚ú® –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º")
        print(f"   ‚ú® –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∂—É—Ç –º–æ–¥–µ–ª–∏: Mistral, DeepSeek, –∏–ª–∏ Gemma")

def test_with_real_youtube():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º YouTube –≤–∏–¥–µ–æ"""
    print(f"\nüé¨ –¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú YOUTUBE –í–ò–î–ï–û")
    print("="*40)
    print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É: https://youtu.be/DpQtKCcTMnQ")
    print("3. –í—ã–±–µ—Ä–∏—Ç–µ '–¢–æ–ª—å–∫–æ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è'")
    print("4. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

if __name__ == "__main__":
    print("üß™ –§–ò–ù–ê–õ–¨–ù–ê–Ø –§–ê–ó–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ò–ò-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ YouTube —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.environ.get('OPENROUTER_API_KEY', '')
    if not api_key or api_key.startswith('sk-or-v1-your-real'):
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á!")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á:")
        print("   export OPENROUTER_API_KEY='your-real-key'")
        print("   –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
        print()
        print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–µ–º–æ-—Ä–µ–∂–∏–º–æ–º...")
        print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(test_summarization_quality())
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    test_with_real_youtube()
    
    print(f"\nüéØ –ò–¢–û–ì: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π –∏–∑ YouTube –≤–∏–¥–µ–æ!") 